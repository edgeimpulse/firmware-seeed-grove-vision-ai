/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 21.08.2025 10:27:47

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238592;
#else
constexpr int kTensorArenaSize = 237568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 25830, -28412, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00017999234842136502, 0.00016323543968610466, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 71,-48,-64,126,-94,-4,-44,48,109,-13,-55,-36,-28,55,-38,14,127,-47,-33,-60,100,50,97,-77,-59,-53,-18,70,20,-89,15,78, 
  /* [1][0][][] */ 54,85,87,-74,-74,88,-11,21,-37,-15,48,121,127,52,33,0,-44,-20,-63,-108,-81,48,35,124,88,79,-55,-4,110,-109,-119,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0037101947236806154, 0.0033647832460701466, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -379, 517, 565, 167, -644, 675, -283, 531, -506, -175, 581, 523, 533, 525, -576, -500, -403, 1239, -407, 197, -446, 623, 506, 573, 547, 529, 123, -335, 2, -513, 81, -246, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.7687935875728726e-05, 4.7860274207778275e-05, 4.5384036639006808e-05, 4.4190677726874128e-05, 4.276538675185293e-05, 4.2803218093467876e-05, 4.4795204303227365e-05, 4.8133704694919288e-05, 4.818398883799091e-05, 4.421317862579599e-05, 4.6990844566607848e-05, 4.6936558646848425e-05, 4.6871246013324708e-05, 4.7224537411238998e-05, 4.5904005673946813e-05, 4.2321596993133426e-05, 4.0493949200026691e-05, 5.183252869755961e-05, 4.3967062083538622e-05, 4.3736708903452381e-05, 4.1016657633008435e-05, 4.3745199945988134e-05, 4.7940709919203073e-05, 4.516242552199401e-05, 4.8282632633345202e-05, 4.6710771130165085e-05, 4.452731809578836e-05, 4.4567870645551011e-05, 4.9767724703997374e-05, 4.3447587813716382e-05, 5.9034166042692959e-05, 4.3485331843839958e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -45,-53,87,-8,84,-17,-93,-105,52,-113,-114,-16,44,-1,-39,47,-64,-33,-73,-67,-87,-109,-5,96,-121,2,68,-70,90,-8,-29,-85,73,-68,-99,54,-127,-86,-108,19,65,-92,-107,89,41,-120,96,-28, 
  /* [1][0][][] */ -37,47,-60,8,-26,86,55,19,91,-88,-89,81,74,-38,37,72,106,-28,40,127,-35,2,47,34,32,28,-26,109,15,18,104,-51,70,111,-2,35,60,74,-12,-49,-65,18,-7,-84,-24,37,-25,-45, 
  /* [2][0][][] */ 66,54,-53,106,-10,-52,110,108,-86,100,-22,95,103,-30,98,-104,-58,-15,42,69,-87,-5,127,32,-24,95,121,15,-65,95,96,109,-57,-10,-84,-97,-78,114,109,-13,-122,-65,29,8,-75,121,-17,-70, 
  /* [3][0][][] */ 78,0,45,-16,-69,51,-107,45,61,27,71,26,111,116,80,4,117,104,-46,29,127,-86,-58,-112,-21,-119,-86,117,70,-105,93,11,-55,-34,0,-11,-90,-23,55,51,-21,-91,-96,9,82,39,-34,-77, 
  /* [4][0][][] */ 40,97,-11,47,-41,-34,16,6,52,85,-24,71,17,-38,-25,-79,-32,-14,-80,3,105,-110,78,16,-24,-17,54,-71,-63,25,-88,-69,62,112,3,-123,-64,-23,-127,39,-59,-79,-92,-113,25,110,28,50, 
  /* [5][0][][] */ 121,-79,96,102,57,-117,45,74,127,-110,5,-101,35,87,55,47,59,77,-81,119,48,60,27,-29,-127,-57,0,-99,50,50,16,-90,-27,14,-77,20,-112,-26,45,38,-115,-42,60,106,-26,21,35,-50, 
  /* [6][0][][] */ 37,-41,114,78,-85,-63,7,66,-1,-84,13,-90,90,63,119,-111,37,19,-6,106,-77,-124,116,71,-60,-78,2,-63,-32,-111,72,-79,-90,-126,-43,-101,-12,61,-114,127,86,59,26,-11,-118,107,-73,-46, 
  /* [7][0][][] */ 127,80,-26,-31,-58,119,-8,10,123,16,-83,-2,63,-96,57,80,55,23,4,121,62,42,5,90,-65,107,52,61,-70,115,-18,47,35,34,70,103,-91,96,-6,-16,89,-63,94,75,59,0,103,-100, 
  /* [8][0][][] */ -6,18,-52,-97,46,17,-93,-31,-7,25,28,113,-8,-35,-94,-78,-69,79,-69,3,18,-34,66,96,-116,76,29,67,-71,5,-103,100,78,-41,36,-14,102,-13,-21,54,77,87,-121,-127,-20,-30,-30,96, 
  /* [9][0][][] */ -3,3,117,46,83,-117,-48,-127,41,49,-14,62,-29,-82,-110,-32,7,-4,-104,-72,2,101,-116,-112,116,-13,-17,25,-8,-68,-94,102,61,-3,26,-24,-82,13,-37,-50,48,-74,54,-102,81,20,-111,54, 
  /* [10][0][][] */ -42,98,102,-54,-3,112,126,39,51,43,36,-88,110,67,-19,20,-33,93,-92,-47,-6,36,68,-61,32,66,-100,-105,-42,93,-83,-67,97,109,124,81,-30,22,-30,49,-40,127,-94,-26,-85,-55,2,-50, 
  /* [11][0][][] */ 127,26,-5,113,127,53,71,40,122,102,-64,90,4,-97,40,-56,-54,-90,68,52,42,82,35,-100,-102,-82,-6,75,83,6,33,-7,-76,-61,59,53,-52,89,-27,-45,-30,114,-59,15,-31,-56,-84,-80, 
  /* [12][0][][] */ 31,82,-44,12,98,16,-16,45,-62,70,-1,-6,-33,-1,61,-69,-95,-20,-41,-66,38,-1,29,105,-64,-36,113,-92,97,27,-26,127,-73,-59,-37,25,7,-58,-15,56,111,52,-95,-28,-10,-79,-33,124, 
  /* [13][0][][] */ 124,-44,111,105,103,121,94,74,83,-90,23,-45,100,59,78,-38,-112,-59,-63,40,77,-19,127,-38,-61,50,19,25,-80,-75,86,49,51,112,-13,44,-72,-15,28,80,-65,87,-38,22,-32,31,3,-21, 
  /* [14][0][][] */ -63,-99,77,62,69,-37,-22,-126,-87,-47,58,70,-39,-91,-97,-90,-65,-63,2,18,-52,24,-12,52,-124,-79,-40,20,-127,-126,-88,27,98,-34,-43,-3,85,110,26,-120,-19,-122,32,79,57,-122,57,-94, 
  /* [15][0][][] */ -3,-40,-36,72,92,-100,31,-113,50,-11,-94,27,105,-3,-108,-127,97,-1,-110,11,43,12,65,108,85,63,30,98,13,51,47,-119,-4,1,-80,-16,-79,105,116,-86,13,113,-68,-44,20,-88,-58,-95, 
  /* [16][0][][] */ -91,-10,111,-76,41,122,-66,39,51,48,-126,110,-19,-38,-69,-76,123,82,81,67,120,87,-48,58,-39,57,-87,69,-110,7,56,6,-127,82,65,66,-46,55,-57,-85,32,-60,74,104,66,117,118,-18, 
  /* [17][0][][] */ 61,-69,44,94,-11,-87,-28,-64,61,-58,92,67,118,72,-78,58,44,64,109,127,-62,7,35,-25,35,77,-50,49,123,-25,-9,84,0,0,49,23,-23,112,-52,-3,-70,-8,8,9,28,36,100,-69, 
  /* [18][0][][] */ -108,97,107,-79,-16,-122,-114,-2,-13,70,-121,-46,-45,38,56,-67,19,-30,53,-31,99,-56,14,-91,27,-108,-26,110,27,28,-8,38,40,-36,-121,-120,-41,26,-41,59,-48,-8,-59,-19,-127,13,19,-11, 
  /* [19][0][][] */ 31,32,84,45,70,-83,115,103,111,-61,44,19,-88,53,-57,69,83,-96,127,65,-18,98,-42,30,91,-75,39,-61,-77,-117,-52,50,95,-77,50,12,13,-59,-42,-94,62,-113,-86,26,-78,40,97,-80, 
  /* [20][0][][] */ -19,70,73,101,-102,97,14,59,10,9,-104,23,-13,101,39,-88,-56,-44,-79,-41,21,-57,-93,-86,87,-88,-124,50,26,7,-54,121,107,44,-24,55,42,-44,-19,-127,-97,-45,-105,-123,-37,-71,-82,114, 
  /* [21][0][][] */ 116,95,86,-97,115,-69,94,29,13,-57,-61,25,16,20,-40,-83,-107,-23,39,-2,124,-39,89,-75,61,-76,-19,83,21,18,10,-10,20,33,-84,-104,127,118,-122,-21,-6,19,43,0,-92,-87,-74,107, 
  /* [22][0][][] */ 47,-37,-60,-83,97,-44,114,67,-83,96,-62,-118,120,-127,-96,-73,37,88,-109,-48,96,-68,40,38,92,1,-95,103,-54,-60,-65,-92,58,69,21,12,13,-3,-55,-100,-5,-1,15,98,63,-114,91,-15, 
  /* [23][0][][] */ 82,-76,15,69,110,-109,23,-94,70,-72,100,52,28,-127,32,-32,91,-24,-105,115,106,-76,117,-28,-16,-3,99,27,76,62,79,-27,-28,53,26,42,109,8,-114,20,-117,12,24,-103,-62,-93,120,35, 
  /* [24][0][][] */ -55,-28,-89,-54,-70,-113,-49,-75,77,127,89,22,121,44,-21,-115,-92,54,26,-35,106,-74,-43,-31,43,-20,90,59,106,70,2,-44,11,19,51,29,-41,-67,58,-4,-83,-81,118,10,29,-40,45,76, 
  /* [25][0][][] */ -68,-41,-69,0,103,-64,-86,64,56,-100,-28,0,81,-18,-96,-14,-73,70,36,-96,78,90,-2,-51,13,-42,-88,43,79,-75,37,127,103,-100,48,77,107,-46,-22,-5,-90,108,-89,10,107,42,68,42, 
  /* [26][0][][] */ 54,-123,-20,-5,-101,-1,-3,-10,-107,-123,109,98,-77,-43,12,-13,127,34,-76,-52,19,82,107,19,51,69,10,53,23,4,-92,-2,-28,-63,-97,-103,-60,89,-42,112,-88,111,62,35,-71,87,-37,116, 
  /* [27][0][][] */ 6,4,-69,-110,-127,-75,-74,-22,40,98,33,-98,-33,61,80,-33,66,-19,60,-89,-100,7,-35,-29,-110,44,-117,-6,63,25,-33,-14,59,67,-98,-93,-97,-72,-119,87,-99,14,25,12,97,23,67,102, 
  /* [28][0][][] */ 67,-4,80,42,-105,-60,-112,-70,-63,-100,46,39,-79,-88,5,85,86,93,-72,69,-25,22,-109,-87,-127,73,-82,-58,-91,-70,-6,-19,-100,10,48,62,16,-108,-39,28,67,40,-86,37,-101,-8,-13,43, 
  /* [29][0][][] */ 43,47,52,-63,-100,11,-127,0,102,-24,-99,-87,105,-95,-60,-51,-108,101,33,-77,-88,-35,52,5,-41,7,-54,-35,-114,-16,115,-13,48,-4,-82,-56,-19,102,-14,93,59,105,-58,87,-5,108,-55,-32, 
  /* [30][0][][] */ 18,-53,-46,29,-78,17,-26,-10,93,-14,48,-11,-72,43,45,7,4,25,85,-72,31,-72,-78,14,-83,48,-50,92,6,-88,-43,4,-64,-51,-84,-34,14,-9,-3,20,75,-59,14,127,86,-33,83,49, 
  /* [31][0][][] */ 83,-103,38,107,52,64,-65,-108,-34,-23,-88,-66,109,-127,-53,115,-61,-95,39,53,68,37,-34,112,51,-123,35,43,-67,-82,49,114,18,21,-98,-10,103,-36,-68,-120,65,-75,-33,32,4,-55,-39,28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023796120658516884, 0.0023882116656750441, 0.0022646482102572918, 0.0022051001433283091, 0.0021339785307645798, 0.0021358663216233253, 0.0022352656815201044, 0.0024018557742238045, 0.0024043649900704622, 0.002206222852692008, 0.0023448274005204439, 0.0023421186488121748, 0.0023388594854623079, 0.002356488723307848, 0.0022905946243554354, 0.0021118335425853729, 0.0020206344779580832, 0.002586425980553031, 0.0021939417347311974, 0.0021824471186846495, 0.0020467175636440516, 0.0021828708704560995, 0.0023922254331409931, 0.0022535899188369513, 0.0024092872627079487, 0.002330851973965764, 0.0022218984086066484, 0.0022239219397306442, 0.002483392832800746, 0.0021680202335119247, 0.0029457851778715849, 0.0021699036005884409, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { -201, 1288, 1950, 4454, 6805, -1185, -1130, 14627, 1203, 9913, 522, -782, 4086, -3724, 2345, -1980, -305, -3305, 896, 1643, 2816, 3595, 4878, 493, -2787, -1860, 428, 2029, 1552, 2265, -888, 2836, 4535, 4293, 4328, 1917, 11418, 1653, 1192, -976, 924, 14082, -1122, 1691, 7975, 72, 1486, 4277, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00032578952959738672, 0.00022870852262713015, 0.00013898003089707345, 0.00013845447392668575, 0.00013989376020617783, 0.0001484381064074114, 0.00029017089400440454, 6.8003588239662349e-05, 0.00024786707945168018, 8.1299251178279519e-05, 0.0001798100711312145, 0.0005153558449819684, 0.00016353974933736026, 0.00017439965449739248, 0.00031379525898955762, 0.0001428201503586024, 0.00014523972640745342, 5.1251838158350438e-05, 0.00025106279645115137, 0.00033817536314018071, 0.00023382545623462647, 0.00014389303396455944, 0.00013455827138386667, 0.00022393222025129944, 0.00018099125009030104, 0.00025567802367731929, 0.00031505478546023369, 0.00025992485461756587, 0.00022055392037145793, 0.00027384652639739215, 0.00014522447600029409, 0.00022591464221477509, 0.00014615914551541209, 0.00017029840091709048, 0.00010252453648718074, 0.00012753535702358931, 7.7069984399713576e-05, 0.00016309705097228289, 0.00013982735981699079, 0.00026448175776749849, 0.00016929091361816972, 6.9146968598943204e-05, 0.00016107730334624648, 0.00011344652011757717, 0.0001015834859572351, 0.00018726458074524999, 0.00018495257245376706, 0.00017901539104059339, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 17,-19,-61,14,-127,7,-58,-3, 
  /* [1][0][][] */ -112,29,127,12,-114,-14,4,-18, 
  /* [2][0][][] */ 9,71,-37,25,-49,-127,-12,86, 
  /* [3][0][][] */ -82,40,-2,127,-2,-53,-77,-53, 
  /* [4][0][][] */ 11,-12,39,-121,-28,17,-127,18, 
  /* [5][0][][] */ 73,123,-61,-50,-31,-8,44,-127, 
  /* [6][0][][] */ 52,-42,47,99,-49,-127,-5,-89, 
  /* [7][0][][] */ 31,118,-49,-63,-67,-37,15,-127, 
  /* [8][0][][] */ -4,-26,55,-2,6,5,-53,-127, 
  /* [9][0][][] */ -87,-5,-113,28,-127,-83,-91,-21, 
  /* [10][0][][] */ 79,5,97,-39,-127,7,81,90, 
  /* [11][0][][] */ 127,-31,-83,12,59,-1,-76,-2, 
  /* [12][0][][] */ -27,-98,127,14,13,4,-76,63, 
  /* [13][0][][] */ 39,-66,74,-13,20,-127,60,-119, 
  /* [14][0][][] */ -106,42,127,-3,-40,-73,44,-44, 
  /* [15][0][][] */ 46,121,-36,-57,-54,13,48,-127, 
  /* [16][0][][] */ 26,94,-49,60,0,-38,-14,127, 
  /* [17][0][][] */ 25,80,-20,86,-51,76,-127,45, 
  /* [18][0][][] */ 72,-35,127,-39,80,-95,18,-30, 
  /* [19][0][][] */ 9,-9,21,127,22,-52,-43,-104, 
  /* [20][0][][] */ 8,20,-23,38,-14,51,-127,7, 
  /* [21][0][][] */ 9,-3,57,19,19,127,46,-61, 
  /* [22][0][][] */ 66,-127,-7,61,-94,68,17,14, 
  /* [23][0][][] */ -35,-113,-10,-109,4,-65,0,-127, 
  /* [24][0][][] */ 17,21,-19,-60,-36,-127,-46,52, 
  /* [25][0][][] */ 67,67,127,13,7,25,-44,-4, 
  /* [26][0][][] */ -115,41,127,-49,-98,-22,92,-8, 
  /* [27][0][][] */ -83,46,-35,-101,26,127,-24,91, 
  /* [28][0][][] */ 11,-103,68,53,42,3,-37,127, 
  /* [29][0][][] */ -118,60,69,-28,-127,0,88,-29, 
  /* [30][0][][] */ 90,-86,23,66,-127,-23,32,-82, 
  /* [31][0][][] */ 54,84,62,-41,-120,-18,7,127, 
  /* [32][0][][] */ -35,-24,99,-48,41,17,-126,-127, 
  /* [33][0][][] */ 57,35,107,-127,19,48,-34,63, 
  /* [34][0][][] */ -20,-119,98,-37,27,127,58,-98, 
  /* [35][0][][] */ 37,15,117,-1,1,127,18,-61, 
  /* [36][0][][] */ -22,35,-19,43,43,-127,1,19, 
  /* [37][0][][] */ 20,-18,59,24,-127,111,-35,-18, 
  /* [38][0][][] */ -127,-22,-93,-26,75,-38,-118,-33, 
  /* [39][0][][] */ 21,-1,38,-118,-32,52,-127,10, 
  /* [40][0][][] */ 98,-33,-72,-127,68,66,60,-23, 
  /* [41][0][][] */ 15,-19,-6,127,-110,3,-88,-61, 
  /* [42][0][][] */ -87,25,68,127,-58,-67,-59,7, 
  /* [43][0][][] */ 87,-111,103,46,-121,35,127,51, 
  /* [44][0][][] */ 11,-44,30,-66,-17,127,46,26, 
  /* [45][0][][] */ -32,33,-42,5,78,-47,-127,-38, 
  /* [46][0][][] */ -102,-96,-2,-20,18,127,-45,-120, 
  /* [47][0][][] */ -127,-99,-60,36,27,126,-28,-62, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0036778983194380999, 0.0025819328147917986, 0.0015689712017774582, 0.0015630380949005485, 0.0015792865306138992, 0.0016757452394813299, 0.0032757928129285574, 0.00076770508894696832, 0.002798217348754406, 0.00091780227376148105, 0.0020299090538173914, 0.005817947443574667, 0.0018462304724380374, 0.0019688298925757408, 0.0035424926318228245, 0.0016123231034725904, 0.0016396380960941315, 0.00057859148364514112, 0.0028342944569885731, 0.003817724296823144, 0.0026396987959742546, 0.0016244350699707866, 0.0015190532431006432, 0.0025280122645199299, 0.0020432437304407358, 0.0028863965999335051, 0.0035567115992307663, 0.002934339689090848, 0.0024898739065974951, 0.0030915040988475084, 0.0016394659178331494, 0.0025503921788185835, 0.0016500175697728992, 0.0019225301221013069, 0.0011574184754863381, 0.0014397702179849148, 0.00087005726527422667, 0.0018412327626720071, 0.0015785369323566556, 0.0029857833869755268, 0.0019111563451588154, 0.00078061292879283428, 0.00181843142490834, 0.0012807187158614397, 0.0011467947624623775, 0.0021140645258128643, 0.0020879637449979782, 0.0020209378562867641, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -2255, -424, -12493, 11083, 7437, -2797, 8850, 1593, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 8.8132670498453081e-05, 0.00012690838775597513, 7.8040749940555543e-05, 0.00011370802531018853, 0.00013133333413861692, 7.4399897130206227e-05, 0.00012453804083634168, 0.00014829671999905258, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 13,43,31,33,-6,-29,44,48,2,27,-9,-6,44,-35,47,-16,-57,-29,-127,-6,48,-37,15,42,8,-7,48,-4,-6,-53,9,28,-44,51,47,6,53,74,-57,-50,5,16,-96,-45,33,22,-20,-56, 
  /* [1][0][][] */ -14,-42,-1,74,-18,-6,-8,-8,18,3,-16,-53,-6,-1,20,11,47,27,51,-36,-2,30,29,-48,-4,-13,-34,-29,-40,13,-7,-9,-33,-25,-97,73,22,11,-127,-14,28,-18,72,30,99,-21,-33,49, 
  /* [2][0][][] */ -8,-2,33,-30,-34,-18,-4,117,-49,88,-42,-6,127,-14,40,-23,-58,-72,1,33,-11,-20,20,-3,12,51,6,38,20,7,70,36,-65,-21,23,59,3,71,58,-122,41,39,-49,-34,17,34,-13,-13, 
  /* [3][0][][] */ 22,-11,-127,-25,9,-7,61,-41,-32,-16,-10,17,-43,-62,41,13,10,46,14,28,-65,14,-70,-10,-36,-70,27,2,-74,-66,-66,25,79,36,-48,22,-64,8,21,-24,29,-60,-30,13,60,-48,36,-20, 
  /* [4][0][][] */ 5,51,-5,-10,30,-5,-81,-114,-33,17,-19,72,2,-24,4,64,45,56,-88,9,26,9,-28,-8,36,-3,2,2,-25,14,4,-39,22,-20,-127,29,-29,-4,49,46,-28,-39,82,48,10,-47,23,17, 
  /* [5][0][][] */ -53,-30,97,17,79,27,58,-6,-127,7,-104,-12,-84,-88,51,76,-18,31,23,1,49,18,21,11,-16,-3,7,-19,-39,-6,-24,-23,-23,40,68,27,-16,74,-25,-6,45,-38,-57,47,-8,16,33,21, 
  /* [6][0][][] */ 85,67,-17,25,28,-31,-106,-69,0,-2,-2,71,-23,-31,0,39,-40,38,18,-2,127,-16,63,111,5,-54,15,-24,-57,-17,-31,-64,48,-30,20,-10,-4,27,-42,39,-53,-51,-63,-38,-26,-52,51,-3, 
  /* [7][0][][] */ 7,50,35,-77,56,-48,-39,-12,13,7,34,26,-35,4,34,-4,-17,26,-20,50,-46,-5,-13,56,3,-31,7,39,-9,30,-33,-16,43,-5,-33,-37,-60,9,127,-5,14,-33,-21,-9,38,3,63,3, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.003745638532564044, 0.0053936061449348927, 0.0033167316578328609, 0.0048325909301638603, 0.0055816667154431343, 0.0031619956716895103, 0.0052928668446838856, 0.0063026105053722858, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -1301, -2605, 3287, -747, -185, -85, 2823, 12058, -5983, 14212, 10023, -1660, 5312, -1737, 5575, -741, 1070, -1499, 1590, -2019, -3249, -2421, -17143, -3048, 3921, 121, 1704, 2002, 9322, 8294, 7856, -2535, -7779, -98, -2557, -5290, 5067, 8523, -2907, 12019, 1464, -849, -4285, -2319, -7958, 12473, 117, 7048, };
const TfArray<48, float> quant10_scale = { 48, { 7.5642157753463835e-05, 0.00030365691054612398, 0.00017615615797694772, 0.00022194288612809032, 0.00015186425298452377, 0.00047462162910960615, 0.00025304747396148741, 0.00053139665396884084, 0.00025044579524546862, 0.00010697291872929782, 0.00015190518752206117, 0.00014229529188014567, 0.00016785116167739034, 0.00027865543961524963, 0.00017775649030227214, 0.00024192612909246236, 0.00053843838395550847, 0.000257682433584705, 8.4510844317264855e-05, 0.00024816751829348505, 0.00013853058044333011, 0.00019797989807557315, 8.8112421508412808e-05, 0.00029647440533153713, 0.00012645516835618764, 0.00035563911660574377, 8.1982601841446012e-05, 0.00022226745204534382, 0.00017689348896965384, 0.0001222135906573385, 0.00014693227421957999, 0.00017533372738398612, 0.00018731597810983658, 0.0003389183257240802, 0.000359034922439605, 0.00013962890079710633, 0.00011196611740160733, 8.6512183770537376e-05, 0.00033469582558609545, 0.00014458266377914697, 0.00022670172620564699, 0.00018944240582641214, 0.00016634631901979446, 0.00021199701586738229, 0.00027374140336178243, 9.4536546384915709e-05, 0.00015539511514361948, 0.00010943165398202837, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 89,75,45,42,-14,-73,38,28,-57,-7,-26,49,57,13,-3,25,48,-40,104,48,60,-23,12,13,-6,-68,55,5,-31,-71,37,51,27,-89,9,28,-38,36,-10,-127,-7,-98,-53,-13,10,-127,73,-127, 127,11,65,-96,57,58,41,-42,-99,-93,21,127,11,-50,-127,23,-8,123,71,41,38,88,105,34,127,-59,-26,-127,-125,-56,-127,127,33,-77,-79,127,26,-96,-83,-113,11,127,-69,26,-45,-85,78,28, 79,6,21,-77,-20,-53,38,22,-44,-7,-3,23,33,27,44,8,-50,8,71,43,-23,-30,-66,-6,-12,-63,-65,-38,-44,-90,0,18,54,-55,32,36,-70,-63,2,-80,2,-28,111,-16,3,-112,16,-50, 
  /* [0][1][][] */ 103,3,19,69,66,77,-2,-127,99,-127,-109,-97,8,48,-55,127,-127,106,70,52,-2,100,78,-39,-7,123,87,21,28,-52,-90,45,63,88,-70,47,-83,-7,-3,-75,-19,-59,10,-95,45,-21,50,-33, 4,127,-127,97,127,60,-127,14,105,-36,-12,91,-127,127,-25,-6,42,-127,-127,-9,127,42,127,-127,-84,86,-55,0,-8,-44,38,-26,127,-9,124,-74,108,-127,127,97,127,70,-103,0,110,41,-127,-24, 49,-3,6,-127,65,53,11,-81,127,-52,-127,-40,17,39,-50,109,81,-2,18,63,40,-127,39,127,-65,127,-67,-23,36,-26,-49,40,-9,65,127,53,-71,-30,-55,-17,-22,-27,127,127,127,-36,65,-12, 
  /* [0][2][][] */ 30,42,28,50,2,0,28,28,8,-24,-10,-24,41,-62,45,-53,-12,24,85,-55,106,-20,18,-60,-73,-64,127,85,-4,-99,-53,62,27,37,-10,-2,-68,25,1,-15,-20,-76,18,-16,7,8,36,-76, 48,9,8,2,-8,-127,-9,-70,-9,-52,14,-34,-9,-57,-10,22,2,-38,30,123,92,70,82,28,43,-47,-77,46,-127,-44,-63,17,10,127,-49,-2,-116,-122,22,-28,-92,83,-10,5,-40,-80,84,-45, 18,3,28,-61,15,-3,38,39,-9,-1,9,-11,39,-54,54,-23,-6,-34,56,-127,22,-62,-61,68,-60,-66,-118,25,-9,-127,15,31,33,-36,-7,37,-127,-68,-28,-17,-24,-12,-2,11,-8,31,-31,-70, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.003532912814989686, 0.014182480052113533, 0.0082274805754423141, 0.010365976952016354, 0.0070929122157394886, 0.022167490795254707, 0.011818735860288143, 0.024819204583764076, 0.011697223410010338, 0.004996235016733408, 0.0070948237553238869, 0.0066459882073104382, 0.007839590311050415, 0.013014771044254303, 0.008302224799990654, 0.011299306526780128, 0.025148091837763786, 0.012035214342176914, 0.0039471304044127464, 0.011590815149247646, 0.0064701549708843231, 0.0092467712238430977, 0.0041153440251946449, 0.013847017660737038, 0.0059061655774712563, 0.016610341146588326, 0.0038290473166853189, 0.01038113608956337, 0.0082619180902838707, 0.0057080602273344994, 0.0068625612184405327, 0.0081890681758522987, 0.0087487064301967621, 0.015829386189579964, 0.016768943518400192, 0.006521452683955431, 0.0052294456399977207, 0.0040406039915978909, 0.015632171183824539, 0.0067528211511671543, 0.010588241741061211, 0.0088480226695537567, 0.0077693057246506214, 0.0099014490842819214, 0.012785258702933788, 0.0044153868220746517, 0.0072578229010105133, 0.0051110717467963696, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { -1431, -1728, 2251, -585, -2298, 2157, 2190, 19810, 2348, 2091, 6364, 2460, 1492, 9322, 4839, -1921, 13934, 1822, 759, -2925, -208, -572, 1834, 9156, 727, 6730, 2411, -262, 7554, 253, 1683, -1330, -1719, -2725, -6361, 1566, 2658, 1913, 1980, 2710, 2211, 739, 4021, 2583, 14057, 4027, -1660, 742, };
const TfArray<48, float> quant12_scale = { 48, { 0.0002255293948110193, 0.00027721549849957228, 0.00028159405337646604, 0.00019000517204403877, 0.00022418498701881617, 0.00012111776595702395, 0.00025768435443751514, 6.3179824792314321e-05, 0.0001333547115791589, 0.00026552058989182115, 0.00012656029139179736, 0.00015250538126565516, 0.00025222366093657911, 9.3618473329115659e-05, 0.00015452090883627534, 0.00021031663345638663, 7.3489034548401833e-05, 0.00013112634769640863, 0.00030643760692328215, 0.00021356991783250123, 0.00013664146536029875, 0.00029581048875115812, 0.00019120410433970392, 0.00010159091470995918, 0.00021778322116006166, 0.00010007619857788086, 0.00025917936000041664, 0.00026650691870599985, 6.9786547101102769e-05, 0.00039451688644476235, 0.00014637336425948888, 0.00027599651366472244, 0.00027210041298530996, 0.00012266192061360925, 8.8814806076698005e-05, 0.00027279710047878325, 0.00016899044567253441, 0.00019522324146237224, 0.0002206163335358724, 0.00017737720918375999, 0.00028009989182464778, 0.00027742123347707093, 0.00016413189587183297, 0.00020051949832122773, 6.8331028160173446e-05, 0.00017177753034047782, 0.00011778554471675307, 0.00030245169182308018, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -16,-44,-46,103,14,-72,-82,-127, 
  /* [1][0][][] */ 127,-28,40,-28,22,-72,-3,26, 
  /* [2][0][][] */ -6,49,5,-127,20,93,-53,64, 
  /* [3][0][][] */ -27,127,-53,-80,-89,-4,25,-84, 
  /* [4][0][][] */ 3,-61,-90,-33,22,-80,-70,-127, 
  /* [5][0][][] */ -44,-88,88,56,18,127,39,-116, 
  /* [6][0][][] */ 1,5,-37,35,5,12,-127,-38, 
  /* [7][0][][] */ 25,-16,5,27,-38,54,127,66, 
  /* [8][0][][] */ -7,41,-81,-16,-38,-127,-64,61, 
  /* [9][0][][] */ 62,3,-46,-17,14,127,-43,102, 
  /* [10][0][][] */ -22,55,89,123,85,127,-15,-62, 
  /* [11][0][][] */ -17,-56,5,36,-127,75,-10,-30, 
  /* [12][0][][] */ -21,34,79,-54,58,-91,-127,-62, 
  /* [13][0][][] */ 48,33,-91,-127,-14,-65,-74,114, 
  /* [14][0][][] */ -38,-127,2,-71,6,-70,20,-117, 
  /* [15][0][][] */ 7,68,69,94,86,127,-12,-32, 
  /* [16][0][][] */ 43,18,-22,-127,64,105,-74,79, 
  /* [17][0][][] */ -100,101,-127,35,38,106,-79,40, 
  /* [18][0][][] */ -127,54,26,-18,-98,17,-27,7, 
  /* [19][0][][] */ 127,6,-35,-31,78,-63,69,-89, 
  /* [20][0][][] */ 127,-57,40,-31,-52,32,85,4, 
  /* [21][0][][] */ 13,-29,-40,47,-1,21,127,40, 
  /* [22][0][][] */ 96,40,-127,-96,20,121,73,120, 
  /* [23][0][][] */ -28,43,-50,-85,40,5,-127,3, 
  /* [24][0][][] */ 127,-68,-94,-26,101,-58,18,17, 
  /* [25][0][][] */ -39,-86,79,-46,73,127,-23,-100, 
  /* [26][0][][] */ 23,-59,44,40,127,-67,-47,-67, 
  /* [27][0][][] */ -23,-127,64,87,22,-6,-36,99, 
  /* [28][0][][] */ -18,62,-125,-48,121,-105,-27,127, 
  /* [29][0][][] */ -80,31,127,-93,13,-33,32,30, 
  /* [30][0][][] */ 118,-85,94,-30,-62,-127,72,-34, 
  /* [31][0][][] */ 21,26,49,-7,-33,-11,-127,12, 
  /* [32][0][][] */ 18,-17,22,127,-28,-88,-44,-89, 
  /* [33][0][][] */ 107,-89,-47,101,-127,90,-46,-35, 
  /* [34][0][][] */ 12,-89,11,-58,-115,127,39,-31, 
  /* [35][0][][] */ 22,127,83,20,17,20,-57,3, 
  /* [36][0][][] */ 22,106,-76,-127,-91,17,76,-85, 
  /* [37][0][][] */ 42,-5,42,16,45,127,63,22, 
  /* [38][0][][] */ -66,-92,96,53,23,-7,-59,127, 
  /* [39][0][][] */ 9,33,127,-54,-30,39,-31,28, 
  /* [40][0][][] */ 8,-1,19,-2,6,-28,127,5, 
  /* [41][0][][] */ -18,-8,-66,-127,-73,-83,-64,37, 
  /* [42][0][][] */ 34,-9,57,-38,-127,-59,-48,30, 
  /* [43][0][][] */ 80,-15,39,35,-79,-127,119,24, 
  /* [44][0][][] */ -74,-127,-17,-73,2,15,-1,-123, 
  /* [45][0][][] */ 19,111,68,69,51,127,-56,36, 
  /* [46][0][][] */ -115,-8,-2,72,108,53,-96,127, 
  /* [47][0][][] */ 15,75,-46,-42,-8,-39,25,-127, 
};
const TfArray<48, float> quant13_scale = { 48, { 0.0030904929153621197, 0.0037987621035426855, 0.0038587625604122877, 0.0026036945637315512, 0.0030720701906830072, 0.0016597108915448189, 0.0035311214160174131, 0.00086577091133221984, 0.0018273972673341632, 0.0036385033745318651, 0.0017342913197353482, 0.0020898242946714163, 0.003456291975453496, 0.0012828803155571222, 0.0021174435969442129, 0.0028820282313972712, 0.0010070409625768661, 0.0017968612955883145, 0.0041992007754743099, 0.0029266087803989649, 0.001872436492703855, 0.0040535745210945606, 0.0026201237924396992, 0.0013921289937570691, 0.0029843449592590332, 0.0013713723747059703, 0.0035516079515218735, 0.0036520194262266159, 0.00095630477881059051, 0.0054061762057244778, 0.0020057954825460911, 0.0037820581346750259, 0.0037286686711013317, 0.001680870889686048, 0.0012170543195679784, 0.003738215658813715, 0.0023157238028943539, 0.0026751991827040911, 0.0030231678392738104, 0.0024306499399244785, 0.0038382878992706537, 0.0038015814498066902, 0.0022491456475108862, 0.0027477752882987261, 0.00093635934172198176, 0.0023539159446954727, 0.0016140484949573874, 0.0041445810347795486, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { 15519, 4005, 14760, -5140, -15601, 8840, 4195, 13718, };
const TfArray<8, float> quant14_scale = { 8, { 7.8154800576157868e-05, 0.00010062536603072658, 7.6595366408582777e-05, 7.5513875344768167e-05, 0.0001010841951938346, 0.00010163100523641333, 6.4603555074427277e-05, 8.7659042037557811e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-12,-12,-10,-23,-82,-32,-9,57,-38,-53,-26,-19,79,-54,5,14,-9,7,16,29,-30,3,11,37,5,3,32,11,59,-42,-84,17,-60,12,-26,34,-37,-10,29,-59,-22,-25,-44,-78,-82,4,-24, 
  /* [1][0][][] */ -73,2,92,-54,63,40,50,27,-17,15,-2,102,22,-34,-127,-58,-104,-81,39,-20,8,94,-46,7,21,-105,37,94,41,-23,30,48,47,36,5,36,-72,-22,20,10,0,-34,-95,19,-13,-46,-93,36, 
  /* [2][0][][] */ 88,35,-30,-66,-52,-8,-46,-90,31,28,-75,-52,-12,58,-53,45,-5,73,3,11,57,47,-2,-1,-127,21,26,-54,-2,30,36,-86,12,-37,16,17,-48,-53,16,32,-113,-106,-31,-52,-48,-95,31,3, 
  /* [3][0][][] */ 14,-2,19,23,-103,-26,-10,46,-33,-57,-7,72,15,-16,-75,-42,-26,31,1,-58,-40,127,14,-57,22,46,48,-47,19,13,9,23,30,20,11,-8,47,52,23,-1,39,-20,21,-49,-17,6,22,34, 
  /* [4][0][][] */ -46,22,-117,16,-8,97,23,43,-16,127,39,67,24,-75,-27,28,-19,-3,-5,34,-15,42,-74,25,11,-5,51,-11,44,-66,120,96,54,46,12,-47,-88,23,2,-23,43,18,38,38,50,39,25,70, 
  /* [5][0][][] */ -26,3,34,-7,58,-65,-37,-32,-31,-62,9,-30,40,5,-13,1,24,-5,5,29,15,64,22,17,15,-1,-36,-8,-34,-1,-127,-9,-41,-10,26,-20,-5,-30,3,-15,-12,-1,-31,-9,30,33,-3,42, 
  /* [6][0][][] */ 8,58,-2,74,-15,41,-58,55,-79,-34,53,20,46,9,37,17,-1,-48,-43,40,-3,68,33,-34,-87,-9,-42,24,-94,-11,-94,4,5,-32,-42,-59,127,-4,-56,-56,51,32,42,-51,-78,-17,-57,-41, 
  /* [7][0][][] */ -48,20,-77,31,-17,-1,-4,-1,-57,-45,34,71,42,11,-70,-73,-58,82,0,-8,41,13,36,-34,-37,99,-55,-108,-45,-13,-109,-11,-16,-30,-56,-4,-32,-38,-49,-21,-25,41,55,-17,-54,-54,127,-53, 
};
const TfArray<8, float> quant15_scale = { 8, { 0.0033215789590030909, 0.0042765778489410877, 0.0032553030177950859, 0.0032093396876007318, 0.0042960783466696739, 0.004319317638874054, 0.0027456509415060282, 0.0037255091592669487, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 5772, 6510, 9333, 9030, 35155, -2119, -1301, -299, -1464, -10550, -2517, -1602, 14183, 7247, 4445, -1091, 7097, 5650, 726, -3019, 4374, -2147, 7301, -835, 4177, 8611, 495, -229, -257, 1908, 9122, 3587, 1124, -1575, 2037, -1020, 7615, 5259, -1632, -328, 5284, -6307, 4253, 862, -475, 1857, 5187, -2235, };
const TfArray<48, float> quant16_scale = { 48, { 0.00028033702983520925, 0.00014611076039727777, 8.4212857473175973e-05, 0.0001517102646175772, 5.6235607189591974e-05, 0.00041417288593947887, 0.00024618147290311754, 0.00030615730793215334, 0.00037800928112119436, 0.00026902306126430631, 0.00014004477998241782, 0.00033691574935801327, 8.1321064499206841e-05, 0.00015934146358631551, 0.00040637052734382451, 0.00012807386519853026, 0.00014474199269898236, 0.00017224714974872768, 0.00047867716057226062, 0.00029013442690484226, 0.00014084269059821963, 0.00017364471568726003, 0.00013503938680514693, 0.00016963246162049472, 0.00017860237858258188, 0.00019535164756234735, 0.00039666291559115052, 0.00026409744168631732, 0.00034279277315363288, 0.00027991863316856325, 0.00017929618479683995, 0.00033511422225274146, 0.0002820479276124388, 0.00089758960530161858, 0.00014033731713425368, 0.00018571356486063451, 0.00023360449995379895, 0.00017547507013659924, 0.00017883868713397533, 0.00029672440723516047, 0.00020175825920887291, 0.00018387485761195421, 0.00026008393615484238, 0.00051611370872706175, 0.0003494199481792748, 0.00039681480848230422, 0.00025111265131272376, 0.00023032313038129359, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -99,-19,44,-12,-127,17,-111,4,-5,127,55,12,-57,71,11,36,37,26,15,-21,-118,-22,25,57,-27,11,-8,-66,23,-123,85,36,-12,28,38,-34,17,-127,-18,127,-63,38,-9,-8,-11,6,9,-17, 16,-127,-8,22,-66,26,-115,-2,30,30,127,68,-65,-75,-94,-50,-10,-46,103,61,14,68,-62,29,-86,-4,-1,-127,7,-80,-29,-127,-10,19,-50,-127,-22,-1,21,92,127,-18,-12,127,9,-127,8,-29, -127,8,57,1,-99,24,-68,0,-2,92,-12,-7,-72,72,23,62,-34,-2,11,-39,-93,-31,61,25,12,-10,6,-45,-39,-127,47,-10,3,13,-54,-30,16,-102,22,95,-58,28,-9,5,7,11,12,46, 
  /* [0][1][][] */ 59,-42,21,-3,-85,4,63,-12,-54,65,31,41,-68,-38,-79,127,-49,8,45,127,5,45,-119,-15,-31,-98,-19,-66,127,20,36,118,-127,0,95,8,-4,37,-99,-113,51,-22,12,10,-127,42,6,-51, 115,-60,-127,-127,50,127,-5,127,-127,-94,-29,127,-65,-127,-127,-120,-28,-127,-78,62,127,127,-87,95,-127,65,-127,96,-57,-58,-127,-97,9,127,-127,117,-127,-64,127,-43,-54,127,-127,-77,103,76,-127,-67, 47,-25,100,-2,-52,-32,17,-22,-31,17,5,-21,-42,-80,-67,121,-127,-43,24,110,-22,52,-9,-127,29,-74,125,-1,-51,109,-50,95,103,-38,-57,24,-11,-13,1,-53,29,-22,-9,-9,1,30,-14,127, 
  /* [0][2][][] */ -107,-45,33,-25,-53,14,83,3,91,50,70,18,-56,75,36,-7,58,52,2,-13,-60,-29,43,34,-25,-8,-5,5,6,29,79,-4,-7,16,72,21,20,-43,-36,4,-37,16,5,-16,-11,-7,-8,-1, -69,-123,62,-57,-69,-13,127,2,91,35,93,-35,124,-108,-71,-24,-57,40,-127,19,-73,16,-127,-7,20,-127,-5,24,3,60,11,-85,-7,-40,-22,36,-12,55,54,-52,1,18,27,-46,27,-26,0,8, -76,-2,47,-4,-75,31,55,0,48,12,15,27,-127,51,44,6,-50,54,-2,-26,-45,-28,109,-62,-3,-16,9,27,-16,36,27,-47,-11,24,-31,20,21,-51,6,-34,-30,40,20,-2,-6,7,8,1, 
};
const TfArray<48, float> quant17_scale = { 48, { 0.011914324015378952, 0.0062097068876028061, 0.003579046344384551, 0.0064476863481104374, 0.0023900133091956377, 0.017602346837520599, 0.010462712496519089, 0.013011685572564602, 0.016065394505858421, 0.011433480307459831, 0.0059519028291106224, 0.014318918809294701, 0.0034561450593173504, 0.0067720119841396809, 0.017270747572183609, 0.0054431394673883915, 0.0061515346169471741, 0.0073205037042498589, 0.020343778654932976, 0.012330712750554085, 0.0059858141466975212, 0.0073799001984298229, 0.0057391738519072533, 0.0072093792259693146, 0.0075906007550656796, 0.0083024445921182632, 0.016858173534274101, 0.011224141344428062, 0.01456869300454855, 0.011896541342139244, 0.0076200878247618675, 0.014242353849112988, 0.011987036094069481, 0.038147557526826859, 0.005964335985481739, 0.007892826572060585, 0.0099281910806894302, 0.0074576903134584427, 0.0076006441377103329, 0.012610787525773048, 0.0085747260600328445, 0.0078146811574697495, 0.011053566820919514, 0.021934831514954567, 0.014850347302854061, 0.016864629462361336, 0.010672287084162235, 0.0097887329757213593, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 10789, -341, 1440, 1304, 2813, 741, 6345, -454, 10891, 8530, -807, -210, 1429, 1229, 191, 2430, 2585, 2726, -1720, -1298, 2399, 2301, 2674, 5, 3734, 2315, 4833, -673, 4984, -304, 6068, 7962, 4627, 715, 1161, 1648, 2953, 1484, 1239, 1705, -242, 3406, 1967, 4325, 5063, 2208, 140, 2095, };
const TfArray<48, float> quant18_scale = { 48, { 9.4398303190246224e-05, 0.00033126646303571761, 0.00030995317501947284, 0.00025179277872666717, 0.00025296880630776286, 0.00017688696971163154, 9.5966483058873564e-05, 0.00028273431234993041, 8.822498784866184e-05, 8.6566011304967105e-05, 0.00017872643365990371, 0.00018751551397144794, 0.00035238533746451139, 0.00026061941753141582, 0.0001153232587967068, 0.00026578098186291754, 0.00020147202303633094, 0.00025701479171402752, 0.00022050892584957182, 0.00010713312076404691, 0.00028388272039592266, 0.00014131942589301616, 0.00024101717281155288, 0.00046592048602178693, 0.00017278357699979097, 0.00029940053354948759, 0.00018679883214645088, 0.00041551093454472721, 0.00018309913866687566, 0.00014678723528049886, 0.0001273073285119608, 8.2661608757916838e-05, 0.00019385608902666718, 0.00012518763833213598, 0.00027969726943410933, 0.00039073676452971995, 0.00021808203018736094, 0.00026804549270309508, 0.0003933060506824404, 0.00013351476809475571, 0.00029049877775833011, 0.00020280349417589605, 0.00037266279105097055, 0.0001614629290997982, 0.00018217760953120887, 0.00013021052291151136, 0.00027222887729294598, 0.0003134180442430079, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 62,-84,38,3,54,-127,1,-78, 
  /* [1][0][][] */ -52,-51,-76,69,-127,55,-29,21, 
  /* [2][0][][] */ 59,-48,48,-19,127,-21,-5,76, 
  /* [3][0][][] */ -15,127,-8,111,5,10,-54,-51, 
  /* [4][0][][] */ -36,127,77,-42,39,15,-71,15, 
  /* [5][0][][] */ -83,22,-3,16,127,-26,85,-11, 
  /* [6][0][][] */ 111,-73,113,16,27,127,86,-18, 
  /* [7][0][][] */ -30,-55,57,58,83,17,-54,127, 
  /* [8][0][][] */ 20,-24,-39,-86,-20,127,-69,20, 
  /* [9][0][][] */ -127,22,-98,2,109,-38,-55,12, 
  /* [10][0][][] */ -13,-96,57,25,-25,-91,-127,-97, 
  /* [11][0][][] */ 42,85,-15,-5,-22,-79,27,127, 
  /* [12][0][][] */ 36,-40,-87,53,-93,127,40,74, 
  /* [13][0][][] */ -37,-32,-127,24,-79,81,18,45, 
  /* [14][0][][] */ -61,127,-76,81,84,42,-18,73, 
  /* [15][0][][] */ -89,-11,-12,-1,85,71,-64,-127, 
  /* [16][0][][] */ 90,-127,-109,-24,-47,87,-45,-5, 
  /* [17][0][][] */ 25,126,-111,-54,-81,42,70,-127, 
  /* [18][0][][] */ -76,-114,46,26,127,-70,-37,73, 
  /* [19][0][][] */ -61,112,-40,54,18,-124,-127,64, 
  /* [20][0][][] */ 78,-14,31,-59,2,-58,28,127, 
  /* [21][0][][] */ 66,-47,127,103,-43,112,84,-25, 
  /* [22][0][][] */ -21,91,13,3,127,-53,-108,-61, 
  /* [23][0][][] */ 29,-41,26,127,-2,-58,60,-31, 
  /* [24][0][][] */ -28,55,127,-74,-25,-21,10,-29, 
  /* [25][0][][] */ -48,-127,99,66,35,-1,-29,127, 
  /* [26][0][][] */ 63,-25,-127,-93,-94,55,28,104, 
  /* [27][0][][] */ 44,125,-103,-56,-48,23,31,-127, 
  /* [28][0][][] */ -23,50,-52,-91,-16,-44,-127,-41, 
  /* [29][0][][] */ -108,52,-127,-54,117,58,-40,-9, 
  /* [30][0][][] */ 86,-57,16,-26,-119,119,127,63, 
  /* [31][0][][] */ -74,95,-45,89,127,-95,-20,5, 
  /* [32][0][][] */ 9,87,60,-63,127,-46,-16,-91, 
  /* [33][0][][] */ -127,51,-121,11,50,30,-29,5, 
  /* [34][0][][] */ 58,-16,66,-89,-41,-127,61,101, 
  /* [35][0][][] */ -127,28,45,-24,-77,11,5,5, 
  /* [36][0][][] */ -2,-48,-42,42,-15,10,127,38, 
  /* [37][0][][] */ -28,-27,-77,-46,-24,-127,-68,-7, 
  /* [38][0][][] */ -101,24,26,19,-127,16,32,8, 
  /* [39][0][][] */ -29,-60,27,-24,-31,92,-127,-109, 
  /* [40][0][][] */ 73,-127,24,63,-60,-51,114,56, 
  /* [41][0][][] */ 26,127,87,43,38,35,-93,-34, 
  /* [42][0][][] */ 35,127,-32,-13,-32,20,-15,-51, 
  /* [43][0][][] */ -71,64,-84,-127,23,18,-59,65, 
  /* [44][0][][] */ -52,25,-26,17,40,127,-6,-5, 
  /* [45][0][][] */ -7,85,-96,-32,-79,-101,-14,127, 
  /* [46][0][][] */ 31,105,-98,-32,-65,30,6,-127, 
  /* [47][0][][] */ 20,10,-4,-59,-70,-127,-32,38, 
};
const TfArray<48, float> quant19_scale = { 48, { 0.0012599646579474211, 0.0044215205125510693, 0.0041370452381670475, 0.0033607594668865204, 0.003376456443220377, 0.0023609674535691738, 0.0012808956671506166, 0.0037737460806965828, 0.0011775674065575004, 0.0011554245138540864, 0.0023855194449424744, 0.0025028300005942583, 0.004703400656580925, 0.0034785715397447348, 0.0015392567729577422, 0.0035474644973874092, 0.0026891122106462717, 0.0034304594155400991, 0.0029432037845253944, 0.0014299403410404921, 0.0037890744861215353, 0.0018862358992919326, 0.0032169339247047901, 0.0062187910079956055, 0.0023061982356011868, 0.003996195737272501, 0.0024932643864303827, 0.0055459584109485149, 0.0024438833352178335, 0.0019592165481299162, 0.0016992120072245598, 0.001103311195038259, 0.0025874597486108541, 0.0016709198243916035, 0.0037332097999751568, 0.0052152895368635654, 0.0029108112212270498, 0.0035776898730546236, 0.0052495826967060566, 0.0017820646753534675, 0.0038773810956627131, 0.0027068837080150843, 0.00497405044734478, 0.0021550978999584913, 0.0024315833579748869, 0.0017379618948325515, 0.0036335268523544073, 0.0041832919232547283, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 5597, -2209, -2211, 3687, 1436, -17395, -3329, -10586, };
const TfArray<8, float> quant20_scale = { 8, { 0.00021272507729008794, 0.00012701914238277823, 0.00024906633188948035, 0.00014347487012855709, 0.00023754469293635339, 8.0665369750931859e-05, 0.00012134618737036362, 0.00013039029727224261, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -24,20,3,28,-19,11,0,29,-48,-5,-34,-3,-15,13,36,4,-46,-19,29,-17,-25,127,-20,-18,-22,-37,5,32,-33,35,9,-25,-10,20,33,37,21,4,31,-21,3,-33,-17,-12,-17,25,23,13, 
  /* [1][0][][] */ 8,56,5,46,29,37,46,116,-47,-46,80,-29,-39,-33,29,-21,-18,0,36,4,30,-127,-5,-69,6,11,-16,15,-8,9,-33,-57,-40,4,24,-9,17,65,72,-18,22,19,40,-27,-33,45,7,49, 
  /* [2][0][][] */ -3,24,-1,30,28,16,-31,33,23,10,63,17,5,-15,30,-55,20,27,-6,9,-17,127,7,-13,21,-42,-4,0,-21,31,-22,-60,-15,7,15,-42,31,-14,-41,-27,27,-12,-6,-50,-36,31,11,19, 
  /* [3][0][][] */ -40,47,-8,6,-18,32,60,-2,5,5,3,13,-18,34,41,15,-13,0,8,0,39,-81,-9,18,-15,4,-127,27,-33,-28,-13,5,-41,-16,9,26,32,-14,-40,-29,4,-14,12,16,17,-12,40,19, 
  /* [4][0][][] */ 23,4,-42,6,18,-5,21,-9,-57,13,1,27,9,-9,-15,19,-29,36,-20,-7,3,-127,-7,-1,35,28,36,-44,42,-5,4,12,-10,53,33,-6,-22,18,-5,8,-14,-66,-88,24,36,39,2,-12, 
  /* [5][0][][] */ -5,54,82,3,0,30,21,-104,69,-37,-15,-5,96,-64,1,17,19,-39,38,3,-25,127,21,8,88,6,84,46,94,60,-2,-34,-73,-45,102,38,-52,-50,2,-106,12,-18,61,68,-47,-42,-26,-32, 
  /* [6][0][][] */ 63,-5,-25,17,44,-21,46,-47,45,39,0,-32,-15,44,24,-76,22,-127,-27,-17,33,-16,-8,28,-45,-36,48,-17,62,-36,126,51,49,48,33,-51,-65,21,64,-30,-32,23,-78,67,39,8,42,-52, 
  /* [7][0][][] */ -12,50,51,58,-2,16,67,102,54,31,2,75,-59,-7,34,-14,90,-17,-36,-14,-3,-127,0,-100,-76,80,59,18,7,31,21,-22,21,-23,19,25,-21,106,-98,-33,11,-5,27,-12,-53,3,44,13, 
};
const TfArray<8, float> quant21_scale = { 8, { 0.0090408157557249069, 0.0053983135148882866, 0.010585319250822067, 0.0060976818203926086, 0.010095649398863316, 0.0034282782580703497, 0.0051572127267718315, 0.0055415872484445572, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 22590, 22143, 9544, 20454, 5454, 9522, 20824, 7856, 45314, -1669, -585, 19622, 14451, -4230, 8721, 224, 1648, 31306, 17941, -372, 4285, -8517, 452, 1577, 47036, 35114, 1904, 274, -1212, 13066, -1918, 1071, -15252, 18547, 31067, 27032, 21816, 22410, -279, -476, 7160, 37664, -919, -233, -406, -2232, 20185, 11309, };
const TfArray<48, float> quant22_scale = { 48, { 5.0305658078286797e-05, 7.6697710028383881e-05, 9.9945726105943322e-05, 6.6281463659834117e-05, 0.00013658004172611982, 9.9220662377774715e-05, 0.00014778118929825723, 0.00012491689994931221, 4.3070234823971987e-05, 8.5972555098123848e-05, 7.6698350312653929e-05, 5.6344342738157138e-05, 0.00017955327348317951, 5.722054629586637e-05, 8.7605963926762342e-05, 8.5125095210969448e-05, 4.0679886296857148e-05, 7.0478869020007551e-05, 6.0499980463646352e-05, 0.00011754292791010812, 7.0796704676467925e-05, 0.00026908560539595783, 0.00014456054486799985, 9.8713971965480596e-05, 3.5988596209790558e-05, 6.8781446316279471e-05, 7.5323376222513616e-05, 0.00010518099588807672, 5.8301960962126032e-05, 0.00010868991375900805, 0.00018543654005043209, 0.00021191134874243289, 6.9607012846972793e-05, 5.7932462368626148e-05, 7.7289536420721561e-05, 0.00012447733024600893, 0.00010272093641106039, 0.00014425510016735643, 0.00014003121759742498, 8.6734886281192303e-05, 0.00016314262757077813, 4.0798102418193594e-05, 8.9089429820887744e-05, 5.4137799452291802e-05, 0.00041516264900565147, 0.00012446963228285313, 7.6063064625486732e-05, 9.1230365796945989e-05, } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -52,-80,-44,-60,-37,33,-63,-55,-60,61,42,-87,-29,20,-93,67,87,-81,-54,110,35,59,-49,86,-81,-64,58,67,60,-51,91,63,51,-64,-82,-32,-127,-67,122,60,-35,-23,36,90,70,103,-44,-63, -82,-120,-78,-106,-127,28,-82,-100,-67,100,78,-108,-63,67,-127,97,98,-112,-98,-7,77,76,87,112,-81,-93,106,104,99,-78,97,76,80,-89,-102,-57,-112,-78,127,79,-84,-62,55,107,75,111,-88,-97, -35,-42,-35,-65,-82,30,-70,-44,-44,56,50,-53,-26,76,-70,37,47,-47,-30,-51,60,-127,-67,39,-33,-39,40,29,43,-28,60,39,39,-55,-50,-29,-64,-46,27,28,-36,-32,43,62,38,66,-40,-34, 
  /* [0][1][][] */ -70,-94,-75,-87,-67,-7,-92,-73,-96,90,67,-92,-64,61,-122,82,108,-90,-70,127,77,76,-62,101,-115,-84,68,108,76,-80,102,84,71,-103,-103,-65,-102,-90,106,102,-86,-63,71,85,127,127,-66,-87, -127,-127,-127,-127,-118,-127,-127,-127,-127,127,127,-127,-127,127,-86,127,127,-127,-127,-54,127,80,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-95,-127,118,127,-127,-127,127,127,124,107,-127,-127, -54,-34,-79,-92,-95,-111,-109,-71,-63,80,68,-77,-57,111,-61,54,91,-59,-50,-118,85,-125,-82,54,-42,-67,36,38,70,-55,78,62,63,-90,-64,-72,-55,-75,44,49,-69,-59,72,82,50,31,-53,-51, 
  /* [0][2][][] */ -25,-18,-35,-38,-48,-15,-57,-37,-49,60,29,-23,-20,3,-75,37,34,-25,-24,39,44,32,-16,31,-48,-31,13,34,32,-22,43,39,52,-58,-60,-48,-17,-38,-2,58,-94,-48,41,35,63,24,-36,-32, -56,-14,-71,-64,-75,-123,-70,-56,-62,86,44,-55,-42,59,-69,36,48,-30,-40,-58,76,13,37,24,-56,-63,34,52,58,-58,55,63,80,-92,-88,-79,-21,-49,4,68,-99,-70,72,65,62,-4,-72,-48, -27,23,-50,-47,-41,-110,-75,-40,-25,62,25,-46,-11,50,4,15,51,-13,-29,-71,42,-52,-31,19,-8,-41,2,19,34,-29,31,37,34,-63,-67,-56,5,-36,13,37,-63,-32,40,33,21,-2,-21,-26, 
};
const TfArray<48, float> quant23_scale = { 48, { 0.0021379904355853796, 0.0032596525270491838, 0.004247693344950676, 0.0028169620782136917, 0.0058046514168381691, 0.0042168782092630863, 0.0062807006761431694, 0.0053089680150151253, 0.001830484950914979, 0.0036538336426019669, 0.0032596797682344913, 0.0023946345318108797, 0.0076310141012072563, 0.002431873232126236, 0.00372325349599123, 0.0036178166046738625, 0.0017288951203227043, 0.0029953520279377699, 0.0025712491478770971, 0.0049955742433667183, 0.0030088599305599928, 0.011436138302087784, 0.0061438232660293579, 0.0041953437030315399, 0.0015295152552425861, 0.0029232113156467676, 0.0032012434676289558, 0.0044701923616230488, 0.0024778333026915789, 0.0046193213202059269, 0.0078810527920722961, 0.0090062320232391357, 0.0029582979623228312, 0.0024621295742690563, 0.0032848052214831114, 0.0052902861498296261, 0.0043656397610902786, 0.0061308415606617928, 0.0059513268060982227, 0.0036862324923276901, 0.0069335615262389183, 0.0017339192563667893, 0.0037863007746636868, 0.002300856402143836, 0.017644412815570831, 0.0052899592556059361, 0.0032326802611351013, 0.0038772905245423317, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 708, 2220, 1533, -163, -763, 183, 6537, 2652, 1308, -2731, 1449, -62, 4840, 64, 829, -1707, -68, 3841, 794, 1077, -761, 26338, 1354, -1221, 874, 4206, 1942, -1363, 152, 153, -2094, -1378, 2968, 667, 5566, 11969, 3373, 5067, -2624, -1511, -764, 1419, 1042, 490, -1676, -1934, 2713, 1032, };
const TfArray<48, float> quant24_scale = { 48, { 0.00030590314418077469, 0.0002936085220426321, 0.00029468617867678404, 0.00042873225174844265, 0.00028864620253443718, 0.00027343918918631971, 0.00013330158253666013, 0.00021997168369125575, 0.00035053378087468445, 0.0002003450645133853, 0.00028266414301469922, 0.00036466142046265304, 0.00014400637883227319, 0.00051835679914802313, 0.00047666567843407393, 0.00021708596614189446, 0.00058841967256739736, 0.00017674117407295853, 0.00029503030236810446, 0.00029945970163680613, 0.00031054360442794859, 6.1053491663187742e-05, 0.0002997117699123919, 0.00022526048996951431, 0.00029510326567105949, 0.0001941616355907172, 0.00029103978886269033, 0.00032127668964676559, 0.00039716411265544593, 0.00044980013626627624, 0.00022885022917762399, 0.00024124509945977479, 0.00024297530762851238, 0.00046621472574770451, 0.00016235644579865038, 8.5774292529094964e-05, 0.00025100147468037903, 0.00016827673243824393, 0.00022158292995300144, 0.00021956647105980664, 0.00036399991950020194, 0.00034894901909865439, 0.00029802476637996733, 0.00036879570689052343, 0.00025829533115029335, 0.00024523751926608384, 0.00022757382248528302, 0.000209345220355317, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -21,56,-60,53,28,127,39,29, 
  /* [1][0][][] */ 44,-127,-92,-33,-36,51,54,-33, 
  /* [2][0][][] */ -57,49,-50,-116,-46,-127,-39,-75, 
  /* [3][0][][] */ -13,127,63,28,0,-83,-25,28, 
  /* [4][0][][] */ -103,45,-127,82,13,-25,-41,-67, 
  /* [5][0][][] */ 85,-99,-127,33,12,-25,79,-47, 
  /* [6][0][][] */ -8,-93,-56,25,-127,-54,-46,75, 
  /* [7][0][][] */ -22,-43,-13,-42,47,1,-31,127, 
  /* [8][0][][] */ 10,32,-91,-94,42,-29,-127,-85, 
  /* [9][0][][] */ -127,60,-11,106,-11,68,101,-5, 
  /* [10][0][][] */ -24,-12,88,-127,-31,65,14,36, 
  /* [11][0][][] */ 107,-16,110,39,-38,50,85,127, 
  /* [12][0][][] */ 52,40,32,-51,71,116,90,-127, 
  /* [13][0][][] */ 32,51,-36,59,-9,-127,-37,53, 
  /* [14][0][][] */ 10,-127,-28,-29,9,67,31,-31, 
  /* [15][0][][] */ -109,-7,3,-78,61,127,-79,-26, 
  /* [16][0][][] */ 15,-42,118,15,-25,24,127,77, 
  /* [17][0][][] */ 61,20,57,24,-7,-82,-38,-127, 
  /* [18][0][][] */ -124,15,-81,-13,-17,-127,24,-92, 
  /* [19][0][][] */ 70,14,116,-22,-63,35,99,127, 
  /* [20][0][][] */ 18,127,50,-6,24,43,45,10, 
  /* [21][0][][] */ -38,30,27,-108,-64,127,-9,-11, 
  /* [22][0][][] */ 36,3,86,-10,-50,14,127,89, 
  /* [23][0][][] */ -72,120,53,42,-104,-98,-119,127, 
  /* [24][0][][] */ -18,-6,100,23,-114,127,-6,-96, 
  /* [25][0][][] */ -40,17,69,21,-127,47,-73,22, 
  /* [26][0][][] */ -49,-127,37,-42,17,41,-13,-15, 
  /* [27][0][][] */ -22,60,27,53,-22,127,-26,-10, 
  /* [28][0][][] */ 10,-127,62,17,63,123,33,43, 
  /* [29][0][][] */ 15,127,-24,32,-65,-59,-13,14, 
  /* [30][0][][] */ -54,75,105,89,-127,-61,-45,-108, 
  /* [31][0][][] */ 12,72,26,58,-49,-13,18,-127, 
  /* [32][0][][] */ -24,-35,-59,67,-127,-41,-54,4, 
  /* [33][0][][] */ 86,22,73,54,-28,61,56,127, 
  /* [34][0][][] */ 124,10,-127,-38,-53,-11,76,35, 
  /* [35][0][][] */ 127,102,104,-120,-57,-94,31,106, 
  /* [36][0][][] */ -48,-104,127,29,54,58,0,-36, 
  /* [37][0][][] */ -3,11,-24,0,-13,-54,-44,127, 
  /* [38][0][][] */ 127,3,50,9,-1,18,-60,32, 
  /* [39][0][][] */ 59,92,-112,-127,-107,86,47,-67, 
  /* [40][0][][] */ -52,127,-35,71,-52,-31,-59,-20, 
  /* [41][0][][] */ -127,38,-28,-51,59,43,0,-61, 
  /* [42][0][][] */ 46,-33,-5,-22,-24,127,15,84, 
  /* [43][0][][] */ -77,45,127,18,76,22,-41,6, 
  /* [44][0][][] */ 7,127,-3,31,-47,-60,-16,-4, 
  /* [45][0][][] */ -73,84,68,-127,-77,13,-65,-54, 
  /* [46][0][][] */ 39,-41,-16,24,28,8,-127,68, 
  /* [47][0][][] */ -99,-127,31,68,52,-87,15,87, 
};
const TfArray<48, float> quant25_scale = { 48, { 0.0030290083959698677, 0.0029072689358144999, 0.0029179395642131567, 0.0042452444322407246, 0.0028581325896084309, 0.0027075549587607384, 0.0013199328677728772, 0.0021781276445835829, 0.0034709344618022442, 0.0019837876316159964, 0.0027988993097096682, 0.0036108244676142931, 0.0014259301824495196, 0.0051326937973499298, 0.0047198743559420109, 0.0021495537366718054, 0.0058264462277293205, 0.0017500653630122542, 0.0029213470406830311, 0.0029652065131813288, 0.0030749577563256025, 0.00060454278718680143, 0.0029677022248506546, 0.0022304966114461422, 0.002922069514170289, 0.0019225602736696601, 0.0028818335849791765, 0.0031812349334359169, 0.0039326613768935204, 0.0044538555666804314, 0.0022660417016595602, 0.0023887739516794682, 0.0024059060961008072, 0.004616390448063612, 0.0016076299361884594, 0.00084932456957176328, 0.0024853800423443317, 0.0016662516864016652, 0.002194081898778677, 0.0021741152741014957, 0.0036042742431163788, 0.0034552423749119043, 0.0029509980231523514, 0.0036517614498734474, 0.0025576029438525438, 0.0024283062666654587, 0.0022534029558300972, 0.0020729058887809515, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 7232, -11960, -929, 6132, 1918, -5693, 3265, 7886, };
const TfArray<8, float> quant26_scale = { 8, { 0.00022857413568999618, 0.00016066695388872176, 0.00010387851943960413, 0.00016348542703781277, 0.00024915279936976731, 0.00012358090316411108, 0.00020138724357821047, 9.4775990874040872e-05, } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -26,-8,-9,-32,-68,-16,-4,-21,64,7,10,-3,10,15,-20,2,-33,13,-17,-14,-3,10,-23,1,19,-9,83,9,-16,-86,-14,10,-2,35,127,-11,-27,-41,26,-40,24,3,-3,-19,-19,0,-18,-87, 
  /* [1][0][][] */ 16,-32,-11,59,1,-9,20,38,65,75,41,-48,-51,71,6,1,-6,-31,19,-20,-63,40,-47,31,88,11,-30,35,24,2,127,22,-14,-38,-34,-3,-17,7,-24,-14,-1,-20,2,26,-5,37,30,20, 
  /* [2][0][][] */ -65,3,-74,119,-63,-67,27,-60,-77,41,54,-97,-25,-5,-48,10,122,34,-71,-49,-67,-22,-40,21,80,-32,126,-10,84,-17,-69,22,-3,-24,57,-1,-47,29,-1,-102,61,-69,-56,-127,-19,-70,-70,106, 
  /* [3][0][][] */ 25,-48,13,-40,37,-20,-10,-72,46,-62,1,-28,-86,-76,-19,11,10,-10,40,-41,-8,31,-81,4,73,-36,50,13,8,0,-3,-23,-39,35,22,-31,-51,23,1,-5,127,17,-50,37,-52,50,-10,-53, 
  /* [4][0][][] */ 24,8,16,16,10,35,-10,-7,45,23,6,-46,-1,6,-67,22,-2,20,24,-22,-24,27,5,42,35,6,-28,5,48,-10,-19,29,-7,-2,34,23,-127,2,54,14,14,-8,1,16,-36,49,-30,-96, 
  /* [5][0][][] */ -39,-97,31,115,-30,-3,-51,98,-95,80,50,29,-77,24,65,-39,-14,30,26,0,-5,32,41,49,-50,11,-25,40,-45,-97,40,26,-104,-47,-28,2,127,1,-22,15,-36,-15,86,98,21,39,44,46, 
  /* [6][0][][] */ 83,-2,-15,-13,81,-25,-29,-63,40,24,33,-28,-7,9,6,2,-1,-1,-11,-25,-33,17,13,23,55,-55,46,0,-24,103,-18,10,43,25,-127,-16,-89,-34,24,-65,-11,-5,-7,-92,-2,4,-20,-11, 
  /* [7][0][][] */ -37,-81,55,-52,11,127,49,-57,1,-99,-51,-4,2,-25,-60,-6,15,-59,111,70,45,-40,5,-7,-21,8,107,-1,49,20,14,-6,-33,-31,-54,110,-126,98,-39,-38,-55,51,5,-70,23,-14,74,-35, 
};
const TfArray<8, float> quant27_scale = { 8, { 0.0097144003957509995, 0.0068283453583717346, 0.0044148368760943413, 0.0069481306709349155, 0.010588993318378925, 0.0052521885372698307, 0.0085589578375220299, 0.0040279794484376907, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 9051, 4486, -671, 7070, -168, -1687, 5561, -1024, 1866, 4756, -47, -82, -1860, 12161, 4242, -1272, -6620, -358, -2541, -1283, 10833, 31, -16369, -747, -5454, 3046, 594, 269, -1529, -1305, -7238, -119, 15244, -1658, 1784, 1565, -1825, 638, -968, 2020, 16650, 143, 1639, -229, 583, -327, -3992, 7216, };
const TfArray<48, float> quant28_scale = { 48, { 0.00025933442520909011, 0.00027856166707351804, 0.00017760835180524737, 0.0003548735985532403, 0.00041160781984217465, 0.00045114796375855803, 0.0001116260900744237, 0.00024341462994925678, 7.6030824857298285e-05, 0.00022710677876602858, 0.0003260861849412322, 0.00047580702812410891, 0.00024047042825259268, 0.00014914822531864047, 0.00022424479539040476, 0.0003430290671531111, 5.7983557780971751e-05, 0.0018781491089612246, 0.00038595168734900653, 0.00016911228885874152, 0.0001057219342328608, 0.00052302534459158778, 0.00011549741611815989, 0.0001667308242758736, 0.00028816406847909093, 0.0002282926143379882, 0.00027248420519754291, 0.00023882197274360806, 0.00048620830057188869, 0.00022919027833268046, 0.0001789067464414984, 0.00052689365111291409, 6.863938324386254e-05, 0.00035891894367523491, 0.00019490452541504055, 0.00072575261583551764, 0.00014564620505552739, 0.00019741928554140031, 0.000819389708340168, 0.00035545599530451, 5.563909508055076e-05, 0.00033713577431626618, 0.00018812662165146321, 0.0001460409548599273, 0.0003045750199817121, 0.00024707184638828039, 0.00014092707715462893, 0.00039462567656300962, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -64,43,-44,-52,-7,-15,12,-11,-3,-15,5,41,-4,-103,-101,28,127,-1,61,46,-94,-59,103,-109,-6,-54,-7,99,-12,13,41,127,-13,-7,-19,7,-14,-42,-6,18,123,-83,-44,49,71,-105,-33,-5, -7,-127,33,-127,-2,-19,-79,127,64,-77,20,40,15,-127,-102,18,-31,11,-23,-78,-70,-1,72,127,12,-14,11,127,25,-5,11,-100,-87,28,-11,-19,127,-127,53,-9,1,-119,-51,31,95,71,30,-36, -21,-4,16,-24,-3,36,16,66,-5,15,-1,30,24,36,-86,30,80,12,-23,21,-123,47,69,19,-4,66,2,-51,-22,-1,13,-35,-42,6,-3,7,-28,125,-13,12,80,-57,21,-28,63,40,-44,-14, 
  /* [0][1][][] */ -35,-24,-127,-13,-29,25,1,5,32,-65,-5,-105,-29,-56,-127,127,105,4,127,93,-9,127,123,117,6,-64,-38,1,48,-35,43,-104,-1,-23,-60,5,-3,-102,46,19,93,127,-15,-12,-69,127,61,-34, -127,44,123,120,127,-118,-127,-8,-19,-127,-127,-127,127,-23,-6,43,23,-127,-93,-127,127,-12,-77,-93,127,-47,127,-61,127,127,-34,75,-127,-127,127,-127,90,-83,-127,-127,25,108,-93,14,-127,-70,127,127, -17,2,5,24,40,127,-19,55,67,11,51,-51,-12,-18,-74,-13,82,49,-2,59,-59,-113,127,-23,10,127,16,-4,42,28,127,28,13,14,56,9,-20,90,52,-9,-2,71,127,-11,-49,-54,58,-9, 
  /* [0][2][][] */ -27,2,-63,-8,-4,-13,20,-10,43,20,3,46,-6,-15,76,7,20,0,60,16,-59,-5,74,35,-1,-62,-13,-82,1,-12,-1,-34,-13,58,-12,-8,-68,4,-5,5,27,-10,-34,-61,-20,14,-60,-39, -10,-49,47,-4,-81,-20,-80,-91,127,69,46,52,-11,-47,24,15,87,100,-29,-13,-80,-1,28,-23,3,-60,-67,-91,-17,-33,92,28,-60,53,-73,-21,29,-111,33,41,-127,-14,-108,127,24,-1,47,-52, 17,-14,14,-5,-41,27,19,-91,11,-8,-19,24,5,22,100,-119,54,-23,-21,-10,-60,11,28,0,-1,24,-30,6,-7,-26,24,15,-22,52,-48,-5,-103,97,-19,25,3,-23,43,53,-17,-16,-70,-25, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.01102171279489994, 0.01183887105435133, 0.0075483545660972595, 0.015082127414643764, 0.017493331804871559, 0.019173787906765938, 0.0047441087663173676, 0.010345121845602989, 0.0032313100527971983, 0.0096520381048321724, 0.013858661986887455, 0.020221797749400139, 0.010219993069767952, 0.0063387993723154068, 0.0095304036512970924, 0.014578735455870628, 0.002464301185682416, 0.079821333289146423, 0.016402946785092354, 0.007187272422015667, 0.0044931820593774319, 0.022228576242923737, 0.0049086399376392365, 0.0070860600098967552, 0.012246972881257534, 0.0097024356946349144, 0.011580578982830048, 0.010149933397769928, 0.020663851872086525, 0.0097405863925814629, 0.0076035363599658012, 0.022392978891730309, 0.0029171737842261791, 0.01525405514985323, 0.008283441886305809, 0.030844485387206078, 0.0061899633146822453, 0.0083903195336461067, 0.034824062138795853, 0.01510687917470932, 0.0023646615445613861, 0.014328270219266415, 0.0079953810200095177, 0.0062067401595413685, 0.012944438494741917, 0.01050055306404829, 0.0059894006699323654, 0.016771590337157249, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3251, 1000, 3154, 7870, 269, 4502, 1477, 1382, 1738, 4105, 2597, 4366, 2443, 1289, 2881, -70, 187, -2233, 6461, 2012, 1299, 4782, 7909, 421, 2728, 2700, 1595, -81, -1251, 1049, 5741, 2060, 1065, 808, 692, -375, 623, 1684, 16, 1406, 1224, 4515, 1702, 533, 2821, 1062, -128, 9447, };
const TfArray<48, float> quant30_scale = { 48, { 0.00028392585227265954, 0.00055643834639340639, 0.00023810814309399575, 0.00014210626250132918, 0.0014903850387781858, 0.0001628525642445311, 0.00043099219328723848, 0.00041232127114199102, 0.00031390436924993992, 0.00018481683218851686, 0.00027451035566627979, 0.00013885588850826025, 0.00031514171860180795, 0.00027790619060397148, 0.00020241636957507581, 0.00032412121072411537, 0.00042756032780744135, 0.00034174491884186864, 0.00015618294128216803, 0.00049238948849961162, 0.00053500250214710832, 0.00017247686628252268, 0.00011137722322018817, 0.00040000191074796021, 0.00021972823014948517, 0.00035323799238540232, 0.00042232632404193282, 0.00028894457500427961, 0.00033933267695829272, 0.00086645141709595919, 0.00016730601782910526, 0.00038072362076491117, 0.00058150175027549267, 0.00033477527904324234, 0.00091806653654202819, 0.00031594955362379551, 0.00025104329688474536, 0.00023372891882900149, 0.00026489680749364197, 0.00047876054304651916, 0.00033965383772738278, 0.00018358342640567571, 0.00023020755907054991, 0.00038837309693917632, 0.0002025234280154109, 0.0004787326033692807, 0.00045278505422174931, 0.00010751451918622479, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -127,-15,34,-115,-124,121,-3,-60, 
  /* [1][0][][] */ 88,3,23,-27,2,57,-127,40, 
  /* [2][0][][] */ -40,44,-108,82,-56,127,21,48, 
  /* [3][0][][] */ 96,-29,-33,72,0,-66,13,127, 
  /* [4][0][][] */ -80,-6,-4,14,-21,-36,127,4, 
  /* [5][0][][] */ 50,127,31,46,-123,-59,5,-26, 
  /* [6][0][][] */ -6,-63,34,127,16,-96,-17,34, 
  /* [7][0][][] */ 127,1,97,-3,-78,28,73,116, 
  /* [8][0][][] */ -32,-127,48,47,76,-35,-25,1, 
  /* [9][0][][] */ -83,-104,20,-25,-21,0,-53,127, 
  /* [10][0][][] */ -33,-125,25,109,70,127,11,-21, 
  /* [11][0][][] */ -127,-111,25,-58,59,60,-38,126, 
  /* [12][0][][] */ 77,-19,87,-77,28,-127,76,0, 
  /* [13][0][][] */ 30,19,25,127,-7,13,32,-58, 
  /* [14][0][][] */ -47,-4,44,6,127,-22,-6,121, 
  /* [15][0][][] */ -77,127,38,85,53,106,-37,84, 
  /* [16][0][][] */ -2,-30,-58,-127,-55,55,15,56, 
  /* [17][0][][] */ 19,127,-2,63,-24,-43,-2,15, 
  /* [18][0][][] */ 14,37,-7,-127,-41,-93,20,-14, 
  /* [19][0][][] */ 30,-82,-127,-103,-83,113,17,-9, 
  /* [20][0][][] */ 29,5,15,-7,127,25,36,-35, 
  /* [21][0][][] */ -127,-64,-59,-93,51,31,46,-13, 
  /* [22][0][][] */ -64,-46,81,125,46,-45,-54,127, 
  /* [23][0][][] */ 23,42,-38,125,127,27,34,104, 
  /* [24][0][][] */ 127,-2,-119,-19,-4,-18,46,-42, 
  /* [25][0][][] */ 6,-10,-46,-21,71,-26,-127,-60, 
  /* [26][0][][] */ 127,9,112,-38,-89,44,57,119, 
  /* [27][0][][] */ 27,-64,-43,127,34,3,-20,-121, 
  /* [28][0][][] */ -62,127,80,68,63,-19,-26,8, 
  /* [29][0][][] */ -1,-1,54,4,-74,2,127,68, 
  /* [30][0][][] */ -52,-75,48,-71,-83,127,66,41, 
  /* [31][0][][] */ 114,17,88,-21,-100,77,83,127, 
  /* [32][0][][] */ -110,-15,-28,34,-21,22,127,23, 
  /* [33][0][][] */ -127,123,53,83,30,25,-84,6, 
  /* [34][0][][] */ 119,6,22,-16,5,49,-127,15, 
  /* [35][0][][] */ 3,-2,19,32,-44,29,13,-127, 
  /* [36][0][][] */ 21,-3,-70,-114,44,-23,26,127, 
  /* [37][0][][] */ 54,-42,-42,-56,-25,37,58,-127, 
  /* [38][0][][] */ 23,127,15,116,-74,-83,-17,-20, 
  /* [39][0][][] */ 107,-7,111,-14,-91,36,127,120, 
  /* [40][0][][] */ -71,-75,127,111,-14,-26,-91,28, 
  /* [41][0][][] */ 36,-11,16,17,21,-74,-17,127, 
  /* [42][0][][] */ 49,-89,-85,-83,-56,75,36,-127, 
  /* [43][0][][] */ 99,-2,121,-30,-89,-20,119,127, 
  /* [44][0][][] */ -111,-95,-78,127,97,-14,-82,33, 
  /* [45][0][][] */ 127,-12,82,-22,-37,28,-7,77, 
  /* [46][0][][] */ 57,-127,-5,94,126,9,68,7, 
  /* [47][0][][] */ 63,127,-17,111,-29,-75,26,-74, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0029113194905221462, 0.0057056089863181114, 0.0024415138177573681, 0.0014571294886991382, 0.01528211310505867, 0.00166985800024122, 0.0044193086214363575, 0.0042278608307242393, 0.003218713216483593, 0.0018950751982629299, 0.0028147748671472073, 0.0014238008297979832, 0.0032314008567482233, 0.0028495951555669308, 0.0020755373407155275, 0.0033234748989343643, 0.004384119063615799, 0.0035041847731918097, 0.0016014690045267344, 0.005048864521086216, 0.0054858098737895489, 0.0017685437342151999, 0.001142040011473, 0.0041015404276549816, 0.0022530497517436743, 0.0036220324691385031, 0.0043304506689310074, 0.0029627806507050991, 0.0034794502425938845, 0.0088844215497374535, 0.0017155228415504098, 0.0039038646500557661, 0.0059626037254929543, 0.0034327195025980473, 0.009413672611117363, 0.003239684272557497, 0.0025741483550518751, 0.0023966100998222828, 0.0027161994948983192, 0.004909115843474865, 0.0034827433992177248, 0.0018824281869456172, 0.0023605027236044407, 0.0039823008701205254, 0.0020766351372003555, 0.0049088294617831707, 0.0046427682973444462, 0.0011024326086044312, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 4513, 2720, 2757, 10644, 4531, 5375, 2480, -3052, };
const TfArray<8, float> quant32_scale = { 8, { 0.00012999761383980513, 0.00012086726201232523, 0.00015327472647186369, 0.00015105798956938088, 0.00013276534446049482, 0.00010266622120980173, 9.865695028565824e-05, 0.00025979685597121716, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -28,36,-30,-1,-46,-26,-79,25,8,21,37,38,36,4,-46,11,-45,43,12,-62,30,42,-127,3,-9,10,-31,45,-6,-10,23,22,15,-23,34,18,0,107,-67,-18,-12,21,-30,27,6,7,19,-4, 
  /* [1][0][][] */ -81,-100,-59,6,88,-24,-127,58,-22,-34,-13,-81,-19,77,8,-13,119,-123,-8,-23,-60,-1,-1,-20,27,-9,-33,-49,21,-19,-115,-27,25,-63,-82,-100,41,13,-97,-5,3,42,15,83,-12,4,2,45, 
  /* [2][0][][] */ 5,-73,12,56,113,20,97,-7,-36,-30,-7,-50,0,-28,22,34,-35,-94,43,-57,4,-67,-59,12,-72,62,71,-100,-39,-2,-60,-46,17,3,-71,-50,-4,127,76,-37,-14,10,-26,-74,43,34,49,-23, 
  /* [3][0][][] */ 11,1,24,-15,34,32,24,-96,25,18,-12,10,2,-117,-12,3,-25,7,-19,1,-7,52,-127,4,20,-101,37,31,46,-12,-29,55,1,12,-6,-36,-104,-49,12,-13,-6,-1,40,7,-15,5,1,-53, 
  /* [4][0][][] */ 31,-56,11,70,50,12,-31,-5,-38,-14,25,-31,73,38,-17,31,-42,-64,64,37,34,-49,127,25,-31,8,-51,-14,-11,16,-77,-40,81,-26,-45,-63,-46,-48,-24,0,-64,96,-2,-5,56,83,43,22, 
  /* [5][0][][] */ -63,-22,-37,53,-7,9,-4,-50,-63,-34,-6,-21,16,41,-77,15,127,-15,57,-81,30,-96,-8,0,88,-115,-105,-11,57,-49,35,-79,14,-58,-35,28,-78,-18,18,-33,-45,30,98,45,43,22,25,-38, 
  /* [6][0][][] */ -31,7,-36,35,-24,75,-72,8,-19,-1,-127,8,47,36,119,20,21,8,43,-14,39,-17,-49,-15,12,2,-72,17,2,-52,6,-24,35,-44,8,7,-2,-5,-54,-22,-33,44,-22,29,29,30,33,1, 
  /* [7][0][][] */ 32,-4,39,-17,3,6,13,-11,14,5,-9,-2,-10,-7,-3,-13,11,-3,-24,-20,-20,14,127,14,6,-13,-1,9,7,-10,-21,13,-1,21,1,-18,-9,14,8,28,5,-3,9,-3,-16,-2,-24,17, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0055248984135687351, 0.0051368586719036102, 0.0065141757950186729, 0.0064199646003544331, 0.0056425267830491066, 0.0043633142486214638, 0.0041929204016923904, 0.011041366495192051, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 4245, 68, 393, -34, 8225, 3252, -67, 4069, 4135, -267, -505, 1422, 546, -102, -768, 417, 12091, 428, 153, 34768, -470, 15106, 1148, 12, -44, -8506, 9034, -181, 354, -363, 1469, 8042, 543, -624, 864, 553, 8341, -1624, 3161, 744, 365, -754, 20148, -7400, 991, -334, 309, 677, };
const TfArray<48, float> quant34_scale = { 48, { 6.0280046454863623e-05, 0.00018952607933897525, 0.0010152400936931372, 0.00082523532910272479, 0.00012354021600913256, 0.00015602988423779607, 8.3164530224166811e-05, 0.00032286049099639058, 0.00015117785369511694, 0.00043845761683769524, 5.6715052778599784e-05, 0.00067647971445694566, 0.0008636247948743403, 0.00014537523384205997, 0.00012919704022351652, 0.0086641917005181313, 0.00015236911713145673, 0.00020779557235073298, 0.00036377066862769425, 9.0134461061097682e-05, 0.00063344108639284968, 9.6097042842302471e-05, 0.0002843282709363848, 0.0001097227941500023, 0.00015484378673136234, 0.00073460309067741036, 0.00012201332719996572, 0.00032366899540647864, 0.00093462941003963351, 0.00047702263691462576, 0.00014155187818687409, 9.7097043180838227e-05, 0.0010159402154386044, 0.00043510421528480947, 0.00019162039097864181, 0.00024077165289781988, 0.00014272778935264796, 6.8728477344848216e-05, 8.9436500275041908e-05, 0.00021956395357847214, 0.0003510282258503139, 0.0003453573735896498, 6.1578044551424682e-05, 0.0001568835141370073, 0.00084902043454349041, 0.00059027655515819788, 0.005147214513272047, 0.0004774833214469254, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 106,-38,-72,-98,22,-100,66,-59,69,21,96,44,-99,62,55,-119,78,-97,0,-47,-127,-54,34,111,-2,69,-11,61,-127,-18,89,-82,-49,-59,46,82,-127,50,110,77,-46,-127,-73,44,-69,-29,4,-82, 87,-57,77,127,86,34,121,-126,-80,98,59,65,-3,60,59,115,80,-96,-104,-57,93,-96,49,2,116,127,-39,78,9,50,83,-49,44,113,127,127,-96,45,86,-33,85,29,-48,106,127,112,-6,-12, 25,-26,-3,-43,35,52,21,-88,-16,44,-84,28,88,-8,-62,-3,32,-35,91,-19,39,5,-84,-90,26,10,-11,24,36,71,34,8,-7,-47,31,34,-19,11,14,-66,-56,114,6,83,-61,-70,-2,72, 
  /* [0][1][][] */ 118,70,-127,23,-80,-127,72,-71,99,-71,127,-96,90,93,127,121,-44,113,-8,-91,121,-78,46,127,-12,-5,-32,19,-58,86,69,-127,-127,-68,-23,34,-17,104,127,127,-53,-79,-127,49,-7,-22,-127,-127, 127,127,115,-15,-127,11,127,-127,-127,-127,87,-127,37,127,101,-127,-37,127,127,-127,-66,-127,71,-36,63,10,-127,71,12,127,127,-102,115,127,-30,11,-27,127,109,-50,127,-4,-51,127,-14,127,120,40, 26,50,-3,15,-32,76,25,-84,-7,-93,-86,-74,-127,1,-71,-1,37,33,-102,-57,-50,-10,-127,-105,-39,5,-70,20,42,89,30,7,6,-63,-10,2,-3,36,19,-86,-62,99,-11,104,5,-79,3,90, 
  /* [0][2][][] */ 40,-40,-28,-8,46,-24,8,-22,73,25,29,41,5,54,-10,-17,-127,-29,-9,-18,19,-40,9,46,85,-18,-18,-95,24,52,-7,-80,-25,-39,-70,-3,72,24,32,73,-101,-54,-123,35,-2,0,88,-65, 19,-63,6,-6,41,3,31,-52,-83,68,-1,56,-22,66,-4,9,-95,-24,-17,-53,-29,-71,28,-8,127,-14,-50,-127,21,72,2,-58,29,81,-59,14,76,47,28,-29,-61,3,-55,92,-8,-4,-100,56, -4,-28,20,3,12,20,8,-18,-8,50,-34,24,14,-12,-19,-2,25,-6,15,-37,12,2,-41,-51,-10,-8,-18,-41,18,62,-6,11,-2,-40,-39,0,65,22,-2,-47,-101,58,-25,49,2,9,2,10, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0025619019288569689, 0.008054858073592186, 0.043147705495357513, 0.035072501748800278, 0.0052504590712487698, 0.0066312700510025024, 0.0035344925709068775, 0.013721570372581482, 0.0064250584691762924, 0.018634447827935219, 0.0024103897158056498, 0.028750387951731682, 0.036704052239656448, 0.0061784475110471249, 0.0054908739402890205, 0.36822813749313354, 0.0064756874926388264, 0.0088313119485974312, 0.01546025276184082, 0.0038307146169245243, 0.026921246200799942, 0.0040841242298483849, 0.012083951383829117, 0.0046632187440991402, 0.0065808608196675777, 0.031220631673932076, 0.0051855663768947124, 0.01375593151897192, 0.039721749722957611, 0.020273461937904358, 0.0060159545391798019, 0.0041266242042183876, 0.043177459388971329, 0.018491929396986961, 0.0081438664346933365, 0.010232795029878616, 0.0060659307055175304, 0.002920960308983922, 0.0038010510616004467, 0.0093314675614237785, 0.01491869892925024, 0.014677688479423523, 0.0026170667260885239, 0.0066675492562353611, 0.036083366721868515, 0.025086753070354462, 0.21875661611557007, 0.020293040201067924, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { -958, -8146, 9541, 3429, 10240, 3030, 3177, 359, -1524, -7262, 666, 4583, 19468, -11612, 138, 11981, -7117, -775, 1692, 6807, 8469, 2998, 1011, 484, 11634, 25180, 9796, -11087, 1909, -894, -5, -3278, 18494, 7914, 10975, -1505, -10593, 337, -3811, 287, -12233, -9326, -1473, 2460, 7371, -11298, 11310, -1533, };
const TfArray<48, float> quant36_scale = { 48, { 0.00030977919232100248, 0.00029090428142808378, 9.1336325567681342e-05, 0.00029769865795969963, 0.00029137745150364935, 0.00070244743255898356, 0.00099712877999991179, 0.00059866713127121329, 0.00065994937904179096, 0.00037691416218876839, 0.0015531358076259494, 0.00026594815426506102, 7.3582472396083176e-05, 0.00035661441506817937, 0.00063151685753837228, 3.1316369131673127e-05, 0.00026880329824052751, 0.00042548822239041328, 0.00041843103826977313, 0.00022238599194679409, 0.00014998552796896547, 0.0014342208160087466, 0.0004193331697024405, 0.00082822231343016028, 0.00021663012739736587, 7.929642015369609e-05, 0.00041766423964872956, 0.00030906716710887849, 0.0009584774961695075, 0.00045065069571137428, 0.0010644813301041722, 0.0014218499418348074, 0.00012081725435564294, 0.00028509061667136848, 0.00031175473122857511, 0.00080749671906232834, 0.00043846940388903022, 0.00038913139724172652, 0.0010118868667632341, 0.00034580923966132104, 0.00032805147930048406, 0.00026962652918882668, 0.00033985255868174136, 0.00039358076173812151, 0.00013967302220407873, 0.00027614942518994212, 3.302510958747007e-05, 0.00061712722526863217, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,48,8,-19,96,-25,127,-3, 
  /* [1][0][][] */ 127,81,73,18,-7,-41,2,118, 
  /* [2][0][][] */ -61,16,-3,127,13,-19,-30,53, 
  /* [3][0][][] */ 51,-37,-127,-6,-3,-43,21,126, 
  /* [4][0][][] */ -117,85,-127,-17,18,21,-39,-41, 
  /* [5][0][][] */ 127,-18,-4,-48,-2,-30,7,-126, 
  /* [6][0][][] */ 5,-9,-7,-3,-127,-26,56,4, 
  /* [7][0][][] */ -6,-62,-3,0,-24,1,-127,-1, 
  /* [8][0][][] */ -13,25,34,-6,127,15,-63,-18, 
  /* [9][0][][] */ 127,-39,26,-3,1,-32,48,110, 
  /* [10][0][][] */ 127,7,-6,-39,-3,12,-1,-124, 
  /* [11][0][][] */ -53,0,-3,127,-3,-43,-37,32, 
  /* [12][0][][] */ -127,4,-78,-25,14,104,-61,-122, 
  /* [13][0][][] */ 123,9,127,17,-10,20,21,44, 
  /* [14][0][][] */ -127,-5,13,15,0,-14,7,123, 
  /* [15][0][][] */ -127,9,5,120,-3,-4,-24,123, 
  /* [16][0][][] */ 60,-72,127,64,-14,-106,31,71, 
  /* [17][0][][] */ 19,-51,-77,127,1,19,-9,115, 
  /* [18][0][][] */ 20,-31,-115,40,-19,-1,34,127, 
  /* [19][0][][] */ 24,18,-13,127,-6,2,-69,-48, 
  /* [20][0][][] */ 17,53,108,-117,10,-69,11,-127, 
  /* [21][0][][] */ 4,-1,-8,1,-127,-13,53,1, 
  /* [22][0][][] */ 1,56,-3,-11,2,127,-13,0, 
  /* [23][0][][] */ 119,24,-8,95,-4,1,-46,-127, 
  /* [24][0][][] */ -127,20,-92,-38,18,-43,-47,-66, 
  /* [25][0][][] */ -44,-8,-66,-45,2,-127,7,-50, 
  /* [26][0][][] */ -102,-25,-127,11,11,3,-18,-37, 
  /* [27][0][][] */ 103,7,127,20,-5,43,19,42, 
  /* [28][0][][] */ 6,-60,-20,39,29,-127,5,14, 
  /* [29][0][][] */ -5,-8,25,-127,-17,-5,20,-2, 
  /* [30][0][][] */ -42,5,127,-6,0,5,-6,-118, 
  /* [31][0][][] */ 1,13,3,1,127,24,-55,-2, 
  /* [32][0][][] */ -127,-20,-108,-9,-1,-33,-27,-63, 
  /* [33][0][][] */ 11,-51,3,-30,37,-127,15,-21, 
  /* [34][0][][] */ -56,-117,-127,60,0,-55,-14,-23, 
  /* [35][0][][] */ 54,8,-114,-3,4,-2,10,127, 
  /* [36][0][][] */ 66,37,84,33,6,127,12,29, 
  /* [37][0][][] */ -10,17,-5,127,8,-20,-14,9, 
  /* [38][0][][] */ 2,23,9,-1,127,26,-36,0, 
  /* [39][0][][] */ -9,9,-12,23,-33,127,-109,-7, 
  /* [40][0][][] */ 127,-18,121,20,-23,30,16,60, 
  /* [41][0][][] */ 115,2,127,25,-7,1,35,47, 
  /* [42][0][][] */ 58,-59,-15,-39,29,127,21,-29, 
  /* [43][0][][] */ -8,-62,-6,3,-45,-19,-127,2, 
  /* [44][0][][] */ -24,-127,38,94,17,40,13,-118, 
  /* [45][0][][] */ 119,11,127,-4,-7,33,26,46, 
  /* [46][0][][] */ -86,14,5,127,2,6,-39,71, 
  /* [47][0][][] */ -4,49,-10,-3,-2,127,-18,2, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0031906128861010075, 0.0029962081462144852, 0.00094073091167956591, 0.0030661877244710922, 0.003001081757247448, 0.0072349528782069683, 0.010270062834024429, 0.0061660534702241421, 0.006797238253057003, 0.0038820786867290735, 0.01599673368036747, 0.0027391691692173481, 0.00075787270907312632, 0.0036729986313730478, 0.0065043936483561993, 0.00032254718826152384, 0.0027685761451721191, 0.0043823737651109695, 0.0043096872977912426, 0.0022904947400093079, 0.0015447963960468769, 0.014771952293813229, 0.0043189791031181812, 0.0085303885862231255, 0.0022312114015221596, 0.0008167242631316185, 0.0043017896823585033, 0.0031832791864871979, 0.009871968999505043, 0.0046415380202233791, 0.010963769629597664, 0.014644536189734936, 0.0012443737359717488, 0.0029363296926021576, 0.0032109601888805628, 0.0083169220015406609, 0.0045160753652453423, 0.0040079117752611637, 0.010422065854072571, 0.0035617093089967966, 0.0033788108266890049, 0.0027770551387220621, 0.0035003575030714273, 0.0040537384338676929, 0.0014385812683030963, 0.0028442384209483862, 0.00034014659468084574, 0.0063561857677996159, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 1475, 532, -564, -9047, -64, -902, -227, 4172, };
const TfArray<8, float> quant38_scale = { 8, { 0.00021908651979174465, 0.00026244026958011091, 0.00034594666794873774, 0.00018510935478843749, 0.00024454205413348973, 0.00012707557471003383, 0.00033180479658767581, 0.00019174038607161492, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -12,-13,-21,13,-9,-127,10,38, 
  /* [1][0][][] */ -62,22,-127,121,9,63,-18,36, 
  /* [2][0][][] */ 6,-10,25,-2,-10,-127,11,25, 
  /* [3][0][][] */ 24,53,53,127,16,-40,-44,-14, 
  /* [4][0][][] */ 16,60,21,-16,-127,-12,22,-3, 
  /* [5][0][][] */ 64,-27,127,-103,19,-58,-5,-46, 
  /* [6][0][][] */ 26,127,44,-39,38,-10,-66,-22, 
  /* [7][0][][] */ -22,-25,-42,-16,-12,-127,21,43, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0093111768364906311, 0.011153711006045341, 0.014702733606100082, 0.0078671472147107124, 0.010393037460744381, 0.0054007116705179214, 0.014101703651249409, 0.0081489663571119308, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { 6488, 200, 273, 1509, 13908, 583, 633, 1958, };
const TfArray<8, float> quant40_scale = { 8, { 0.00010189008025918156, 0.00047198648098856211, 0.00017328177636954933, 0.00054041238036006689, 0.00018800357065629214, 0.00027469865744933486, 0.00057644967455416918, 9.4351642474066466e-05, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -19,-6,5,-1,-5,27,1,-4, 15,-1,5,-6,6,127,12,127, 6,0,6,-8,-4,17,2,4, 
  /* [0][1][][] */ 7,-127,-6,4,-18,-6,-105,-6, -127,98,-78,127,-127,-8,127,-38, 13,-2,-3,-64,-8,1,47,-26, 
  /* [0][2][][] */ 19,-4,2,-3,-5,-23,9,-8, 59,-2,127,-21,8,-114,5,7, 9,-1,-6,-8,-5,-20,-4,-4, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0043303282000124454, 0.020059425383806229, 0.0073644756339490414, 0.022967526689171791, 0.0079901516437530518, 0.01167469285428524, 0.024499110877513885, 0.0040099448524415493, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 49196, -1301, 39299, 20174, 14995, 569104, 14703, 37949, };
const TfArray<8, float> quant42_scale = { 8, { 6.4494386606384069e-05, 4.2742722143884748e-05, 9.226262045558542e-05, 2.6263101972290315e-05, 0.00012096860154997557, 5.9530580074351747e-06, 8.0639529187465087e-06, 8.0771962529979646e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-3,12, 8,-24,30, 12,-24,21, 
  /* [0][1][][] */ 39,29,27, 65,18,58, 24,-33,38, 
  /* [0][2][][] */ -21,-92,-13, -30,-127,-1, -8,-56,17, 
  /* [1][0][][] */ 32,76,25, 7,9,-2, -30,-69,-26, 
  /* [1][1][][] */ 54,123,40, 3,0,-3, -54,-127,-39, 
  /* [1][2][][] */ 30,45,12, 5,-1,0, -32,-53,-3, 
  /* [2][0][][] */ 44,92,11, 54,127,13, 17,43,-1, 
  /* [2][1][][] */ -46,-83,-28, -80,-93,-38, -30,-6,-20, 
  /* [2][2][][] */ 1,11,7, 5,16,0, 1,11,-6, 
  /* [3][0][][] */ 46,-29,-14, 79,-34,-37, 31,-16,-11, 
  /* [3][1][][] */ 81,-53,-34, 127,-52,-71, 59,-27,-27, 
  /* [3][2][][] */ 21,-19,-2, 43,-26,-14, 17,-10,0, 
  /* [4][0][][] */ -12,-23,-5, 27,45,9, -16,-29,-4, 
  /* [4][1][][] */ -28,-60,-9, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 22,25,-3, -11,-13,-2, 
  /* [5][0][][] */ -35,-65,-39, -55,-91,-58, -43,-33,-30, 
  /* [5][1][][] */ -59,-106,-50, -83,-127,-66, -47,-35,-31, 
  /* [5][2][][] */ 4,10,-8, 2,5,-4, 2,16,6, 
  /* [6][0][][] */ -98,-2,39, 5,24,-11, 70,21,-18, 
  /* [6][1][][] */ -127,-32,47, 17,24,-25, 113,20,-29, 
  /* [6][2][][] */ -48,-9,21, 19,-4,1, 38,-9,34, 
  /* [7][0][][] */ -5,16,-2, -15,23,-7, -6,21,-8, 
  /* [7][1][][] */ 18,84,-6, 23,127,-22, -2,60,-27, 
  /* [7][2][][] */ -27,-50,-20, -42,-52,-32, -19,4,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.01644606702029705, 0.010899393819272518, 0.023526966571807861, 0.0066970908083021641, 0.030846990644931793, 0.0015180297195911407, 0.0020563078578561544, 0.020596848800778389, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant46_scale = { 1, { 0.097757354378700256, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<1, float> quant47_scale = { 1, { 0.097090810537338257, } };
const TfArray<1, int> quant47_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.097524799406528473, } };
const TfArray<1, int> quant51_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.079395249485969543, } };
const TfArray<1, int> quant54_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<1, float> quant55_scale = { 1, { 0.10099118202924728, } };
const TfArray<1, int> quant55_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.074921391904354095, } };
const TfArray<1, int> quant59_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.032600898295640945, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant63_scale = { 1, { 0.072975218296051025, } };
const TfArray<1, int> quant63_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<1, float> quant64_scale = { 1, { 0.021410705521702766, } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.039582297205924988, } };
const TfArray<1, int> quant66_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<1, float> quant67_scale = { 1, { 0.088580355048179626, } };
const TfArray<1, int> quant67_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<1, float> quant68_scale = { 1, { 0.020040214061737061, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.048512913286685944, } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.046669472008943558, } };
const TfArray<1, int> quant70_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_54_33_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_54_33_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_54_33_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_54_33_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_54_33_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
