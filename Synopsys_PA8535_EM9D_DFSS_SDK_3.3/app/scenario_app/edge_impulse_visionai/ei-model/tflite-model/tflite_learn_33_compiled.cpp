/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 10.12.2024 09:14:30

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238592;
#else
constexpr int kTensorArenaSize = 237568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 25867, -28453, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00017973390640690923, 0.00016299918934237212, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 71,-48,-64,126,-94,-4,-44,48,109,-13,-55,-36,-28,55,-38,14,127,-47,-33,-60,100,50,96,-77,-59,-53,-18,70,20,-89,15,78, 
  /* [1][0][][] */ 54,85,87,-74,-74,88,-11,21,-37,-15,48,121,127,52,33,0,-44,-20,-63,-108,-81,48,35,124,88,79,-55,-4,110,-109,-118,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0037103572394698858, 0.0033648924436420202, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -378, 518, 567, 170, -646, 677, -287, 532, -507, -171, 583, 525, 535, 527, -578, -502, -405, 1248, -408, 186, -446, 625, 508, 574, 547, 531, 106, -337, 2, -515, 79, -246, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.586575596476905e-05, 4.7717028792249039e-05, 4.5248732931213453e-05, 4.4079373765271157e-05, 4.2637570004444569e-05, 4.2691692215157673e-05, 4.4584929128177464e-05, 4.7995941713452339e-05, 4.8046047595562413e-05, 4.4050084397895262e-05, 4.6851408114889637e-05, 4.6796805690973997e-05, 4.673380681197159e-05, 4.708307096734643e-05, 4.5765387767460197e-05, 4.21979020757135e-05, 4.0373757656197995e-05, 5.1652594265760854e-05, 4.3840784201165661e-05, 4.3607473344309255e-05, 4.0891871321946383e-05, 4.3614378228085116e-05, 4.7768618969712406e-05, 4.5031410991214216e-05, 4.8129935748875141e-05, 4.6578243200201541e-05, 4.4288819481153041e-05, 4.4441741920309141e-05, 4.966290362062864e-05, 4.3316485971445218e-05, 5.8785666624316946e-05, 4.3346088204998523e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -47,-55,92,-1,88,-18,-97,-109,53,-107,-118,-17,46,-1,-40,49,-68,-34,-76,-70,-87,-113,-6,100,-127,2,71,-59,94,-8,-31,-87,76,-71,-103,56,-118,-89,-105,20,67,-95,-113,92,43,-127,100,-29, 
  /* [1][0][][] */ -37,48,-60,8,-26,86,55,19,91,-88,-89,81,74,-38,37,72,106,-28,40,127,-35,2,47,34,32,28,-26,109,15,18,104,-51,70,111,-2,35,60,74,-12,-49,-65,18,-7,-84,-24,37,-25,-45, 
  /* [2][0][][] */ 66,54,-53,106,-10,-52,110,108,-86,100,-22,95,103,-30,98,-104,-58,-15,42,69,-87,-5,127,32,-24,95,121,15,-65,95,96,109,-57,-10,-84,-97,-78,114,109,-13,-122,-65,29,8,-75,121,-17,-70, 
  /* [3][0][][] */ 78,0,45,-16,-69,51,-106,45,62,27,71,26,111,116,80,4,117,104,-46,30,127,-85,-58,-112,-21,-119,-86,117,70,-104,93,11,-54,-34,0,-11,-90,-23,55,51,-21,-91,-96,10,82,40,-34,-77, 
  /* [4][0][][] */ 40,97,-11,47,-41,-34,16,6,52,85,-24,71,17,-39,-25,-79,-32,-14,-80,3,105,-110,78,16,-24,-17,54,-71,-63,25,-88,-69,62,112,3,-123,-64,-23,-127,39,-59,-79,-92,-113,25,110,28,50, 
  /* [5][0][][] */ 121,-79,96,102,57,-117,45,74,127,-110,5,-101,35,87,55,47,59,77,-81,119,48,60,27,-29,-127,-57,0,-99,50,50,16,-90,-27,14,-77,20,-112,-26,45,38,-115,-42,60,106,-26,21,35,-50, 
  /* [6][0][][] */ 37,-41,114,78,-86,-63,7,66,-1,-84,13,-90,90,63,119,-111,37,19,-6,106,-78,-124,116,71,-60,-78,2,-63,-32,-111,72,-79,-90,-127,-44,-101,-12,61,-114,127,86,59,26,-12,-118,107,-73,-46, 
  /* [7][0][][] */ 127,80,-26,-31,-58,119,-8,10,123,16,-83,-2,63,-96,57,80,55,23,4,121,62,42,5,90,-65,107,52,61,-70,115,-18,47,35,34,70,103,-91,96,-6,-16,89,-63,94,75,59,0,103,-100, 
  /* [8][0][][] */ -6,18,-52,-97,46,17,-93,-31,-7,25,28,113,-8,-35,-94,-78,-69,79,-69,3,18,-34,66,96,-116,76,29,67,-71,5,-104,100,78,-41,36,-14,102,-13,-21,54,77,87,-121,-127,-20,-30,-30,96, 
  /* [9][0][][] */ -2,3,117,47,83,-117,-48,-127,41,49,-14,62,-29,-82,-110,-32,7,-4,-104,-72,2,102,-116,-112,116,-13,-17,25,-8,-68,-94,102,61,-3,27,-24,-82,13,-37,-50,48,-74,54,-101,81,20,-111,55, 
  /* [10][0][][] */ -42,98,102,-54,-3,112,126,39,51,43,36,-88,110,67,-19,20,-33,93,-92,-47,-6,36,68,-61,32,66,-100,-105,-42,93,-83,-67,97,109,124,81,-30,22,-30,49,-40,127,-94,-27,-85,-55,2,-50, 
  /* [11][0][][] */ 127,27,-5,113,127,53,71,40,122,102,-64,90,4,-97,40,-56,-54,-90,68,52,42,82,35,-100,-102,-82,-6,75,83,6,33,-7,-76,-61,59,53,-52,89,-27,-45,-30,114,-59,15,-31,-56,-84,-80, 
  /* [12][0][][] */ 31,82,-44,12,98,16,-16,45,-62,70,-1,-6,-33,-1,61,-69,-95,-20,-41,-66,38,-1,29,105,-64,-36,113,-92,97,27,-26,127,-73,-59,-37,25,7,-58,-15,56,111,52,-95,-28,-10,-79,-33,124, 
  /* [13][0][][] */ 124,-44,111,105,103,121,94,74,83,-90,23,-45,100,59,78,-38,-112,-59,-63,40,77,-19,127,-38,-61,50,19,25,-80,-75,86,49,51,112,-13,44,-72,-15,28,80,-65,87,-38,22,-32,31,3,-21, 
  /* [14][0][][] */ -63,-99,77,62,69,-37,-22,-126,-87,-47,58,70,-40,-91,-97,-90,-65,-63,2,18,-52,24,-12,52,-124,-79,-40,20,-127,-126,-88,27,98,-34,-43,-3,85,110,26,-120,-19,-122,32,79,57,-122,57,-94, 
  /* [15][0][][] */ -3,-40,-36,72,92,-100,31,-113,50,-11,-94,27,105,-3,-108,-127,97,-1,-110,11,43,12,65,108,85,63,30,98,13,51,47,-119,-4,1,-80,-16,-79,105,116,-86,13,113,-68,-44,20,-88,-58,-95, 
  /* [16][0][][] */ -91,-10,111,-76,41,122,-66,39,51,48,-126,110,-19,-38,-69,-76,123,82,81,67,120,87,-48,58,-39,57,-87,69,-110,7,56,6,-127,82,65,66,-46,55,-57,-85,32,-60,74,104,66,117,118,-18, 
  /* [17][0][][] */ 61,-69,44,94,-11,-87,-28,-63,62,-58,92,67,118,72,-78,58,43,64,109,127,-62,7,35,-25,35,77,-50,49,123,-25,-9,84,1,0,49,23,-23,112,-51,-3,-71,-8,7,9,28,36,101,-69, 
  /* [18][0][][] */ -108,97,107,-79,-16,-122,-114,-2,-13,70,-121,-46,-45,38,56,-67,19,-30,53,-31,99,-56,14,-91,27,-108,-26,110,27,28,-8,38,40,-36,-121,-120,-41,26,-41,59,-48,-8,-59,-19,-127,13,19,-11, 
  /* [19][0][][] */ 31,32,83,45,69,-83,115,103,111,-62,44,18,-88,53,-57,69,83,-96,127,65,-19,98,-42,30,90,-74,39,-62,-78,-118,-52,49,95,-77,50,12,13,-59,-43,-94,62,-113,-86,26,-78,39,96,-81, 
  /* [20][0][][] */ -19,70,73,101,-102,97,14,59,10,9,-104,23,-13,101,39,-88,-56,-44,-79,-41,21,-57,-93,-86,87,-88,-124,50,26,7,-54,121,107,44,-24,55,42,-44,-18,-127,-97,-45,-105,-123,-37,-71,-82,114, 
  /* [21][0][][] */ 116,95,86,-97,115,-69,94,29,13,-57,-61,25,16,20,-40,-83,-107,-23,39,-2,124,-39,89,-75,61,-76,-19,83,21,18,10,-10,20,33,-84,-105,127,118,-122,-21,-6,19,43,0,-92,-87,-74,107, 
  /* [22][0][][] */ 47,-37,-60,-83,97,-44,114,67,-83,96,-62,-119,120,-127,-96,-73,37,88,-109,-48,96,-68,40,38,92,1,-95,103,-54,-60,-65,-92,58,69,21,13,13,-3,-55,-100,-5,-1,15,98,63,-114,91,-15, 
  /* [23][0][][] */ 82,-76,15,69,110,-109,23,-94,70,-72,100,52,28,-127,32,-32,91,-23,-105,115,106,-76,117,-28,-17,-3,99,27,76,62,79,-27,-28,53,26,42,109,8,-114,20,-117,12,24,-103,-62,-93,120,35, 
  /* [24][0][][] */ -55,-28,-89,-54,-70,-114,-49,-76,76,127,89,22,121,44,-21,-115,-92,54,26,-35,106,-74,-43,-31,43,-20,90,59,106,70,2,-44,11,19,51,29,-41,-67,58,-4,-83,-81,118,10,29,-41,45,76, 
  /* [25][0][][] */ -68,-41,-69,0,103,-64,-86,64,56,-100,-28,0,81,-18,-96,-14,-73,70,36,-96,78,90,-2,-51,13,-42,-87,43,79,-75,37,127,103,-100,48,77,107,-46,-22,-5,-90,108,-89,10,107,42,68,42, 
  /* [26][0][][] */ 54,-123,-20,-5,-101,-1,-3,-10,-108,-123,109,98,-78,-43,12,-13,127,34,-76,-53,18,82,107,19,51,69,10,53,22,4,-93,-2,-28,-63,-97,-103,-60,89,-42,112,-88,111,62,35,-71,87,-37,116, 
  /* [27][0][][] */ 6,4,-69,-110,-127,-75,-74,-22,40,98,33,-98,-33,61,80,-33,66,-19,59,-89,-100,7,-35,-29,-111,44,-117,-6,62,25,-33,-14,59,67,-98,-93,-97,-72,-119,87,-99,13,25,12,97,23,67,102, 
  /* [28][0][][] */ 67,-4,80,42,-105,-60,-112,-70,-62,-100,46,39,-79,-88,5,84,86,92,-72,69,-25,22,-109,-87,-127,73,-82,-58,-91,-70,-6,-18,-100,10,48,61,16,-108,-39,28,67,39,-86,37,-101,-8,-13,43, 
  /* [29][0][][] */ 43,47,52,-63,-100,11,-127,0,102,-24,-99,-87,105,-95,-60,-51,-108,101,33,-77,-88,-35,52,5,-41,7,-54,-35,-114,-16,115,-13,48,-4,-82,-56,-19,102,-14,93,59,105,-58,87,-5,109,-55,-31, 
  /* [30][0][][] */ 18,-53,-46,29,-78,17,-26,-10,93,-14,48,-11,-72,43,45,7,4,25,85,-72,31,-72,-78,14,-84,48,-50,92,6,-88,-43,4,-64,-51,-84,-34,14,-9,-3,20,75,-59,14,127,86,-33,83,49, 
  /* [31][0][][] */ 83,-103,38,107,52,64,-65,-108,-34,-23,-88,-66,109,-127,-53,115,-61,-95,39,53,68,37,-34,112,52,-123,35,43,-67,-82,49,114,18,21,-98,-10,103,-36,-68,-119,65,-75,-33,32,4,-55,-39,28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022955245804041624, 0.0023881783708930016, 0.0022646433208137751, 0.0022061183117330074, 0.0021339578088372946, 0.0021366665605455637, 0.0022314207162708044, 0.0024021377321332693, 0.0024046453181654215, 0.0022046524100005627, 0.0023448551073670387, 0.0023421223741024733, 0.0023389693815261126, 0.0023564496077597141, 0.0022905012592673302, 0.0021119529847055674, 0.0020206568296998739, 0.0025851486716419458, 0.0021941771265119314, 0.0021825002040714025, 0.0020465876441448927, 0.0021828457247465849, 0.002390760462731123, 0.0022537666372954845, 0.0024088439531624317, 0.0023311835248023272, 0.0022166008129715919, 0.002224254421889782, 0.0024855670053511858, 0.002167936647310853, 0.002942149993032217, 0.0021694181486964226, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -201, 1292, 1956, 4467, 6838, -1183, -1130, 14649, 1205, 9948, 524, -785, 4100, -3725, 2351, -1980, -306, -3319, 900, 1647, 2827, 3597, 4893, 495, -2792, -1860, 429, 2030, 1555, 2272, -887, 2844, 4543, 4303, 4338, 1919, 11450, 1656, 1196, -981, 926, 14110, -1125, 1697, 8005, 72, 1487, 4282, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.0003246129781473428, 0.00022806457127444446, 0.00013864303764421493, 0.00013805989874526858, 0.00013922106882091612, 0.00014848573482595384, 0.00028969006962142885, 6.7901084548793733e-05, 0.00024756617494858801, 8.10160709079355e-05, 0.0001792732800822705, 0.00051283830543980002, 0.00016298092668876052, 0.00017415019101463258, 0.00031289760954678059, 0.00014278186426963657, 0.00014491667388938367, 5.1038357923971489e-05, 0.00025005344650708139, 0.00033725713728927076, 0.0002329000853933394, 0.00014379330968949944, 0.00013415390276350081, 0.00022327533224597573, 0.00018060633738059551, 0.00025568713317625225, 0.00031415137345902622, 0.00025951693532988429, 0.00022005941718816757, 0.00027295062318444252, 0.00014505565923172981, 0.00022537507175002247, 0.00014588475460186601, 0.00016985615366138518, 0.00010226623999187723, 0.00012736716598737985, 7.6851378253195435e-05, 0.00016288357437588274, 0.00013946573017165065, 0.00026337336748838425, 0.000169017119333148, 6.9013483880553395e-05, 0.00016065059753600508, 0.00011307165550533682, 0.00010119882790604606, 0.0001867227692855522, 0.0001845872902777046, 0.00017873849719762802, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 17,-19,-61,14,-127,7,-58,-3, 
  /* [1][0][][] */ -112,29,127,12,-114,-14,4,-18, 
  /* [2][0][][] */ 9,71,-37,25,-49,-127,-12,86, 
  /* [3][0][][] */ -82,40,-2,127,-2,-53,-77,-53, 
  /* [4][0][][] */ 11,-12,39,-121,-28,17,-127,18, 
  /* [5][0][][] */ 73,123,-61,-50,-32,-8,44,-127, 
  /* [6][0][][] */ 51,-42,47,99,-49,-127,-5,-89, 
  /* [7][0][][] */ 31,118,-49,-63,-67,-37,15,-127, 
  /* [8][0][][] */ -4,-26,55,-2,6,5,-53,-127, 
  /* [9][0][][] */ -87,-5,-113,28,-127,-83,-91,-21, 
  /* [10][0][][] */ 79,5,97,-39,-127,7,81,90, 
  /* [11][0][][] */ 127,-31,-83,12,59,-1,-76,-2, 
  /* [12][0][][] */ -27,-98,127,14,13,4,-76,63, 
  /* [13][0][][] */ 39,-66,74,-13,20,-127,60,-119, 
  /* [14][0][][] */ -106,42,127,-3,-40,-73,44,-44, 
  /* [15][0][][] */ 46,121,-36,-57,-54,13,48,-127, 
  /* [16][0][][] */ 26,94,-49,60,0,-38,-14,127, 
  /* [17][0][][] */ 25,80,-20,86,-51,76,-127,45, 
  /* [18][0][][] */ 72,-35,127,-39,79,-95,18,-30, 
  /* [19][0][][] */ 9,-9,21,127,22,-52,-43,-104, 
  /* [20][0][][] */ 8,20,-23,38,-14,51,-127,7, 
  /* [21][0][][] */ 9,-3,57,19,19,127,46,-61, 
  /* [22][0][][] */ 66,-127,-7,61,-94,68,17,14, 
  /* [23][0][][] */ -35,-113,-10,-109,4,-65,0,-127, 
  /* [24][0][][] */ 17,21,-19,-60,-36,-127,-46,52, 
  /* [25][0][][] */ 67,67,127,13,7,25,-44,-4, 
  /* [26][0][][] */ -115,41,127,-49,-98,-22,92,-8, 
  /* [27][0][][] */ -83,45,-35,-101,26,127,-24,91, 
  /* [28][0][][] */ 11,-103,68,53,42,3,-37,127, 
  /* [29][0][][] */ -118,60,69,-28,-127,0,88,-29, 
  /* [30][0][][] */ 90,-86,23,66,-127,-23,32,-82, 
  /* [31][0][][] */ 54,85,62,-41,-120,-18,7,127, 
  /* [32][0][][] */ -35,-24,99,-48,41,17,-126,-127, 
  /* [33][0][][] */ 56,35,107,-127,19,48,-34,63, 
  /* [34][0][][] */ -21,-119,98,-37,27,127,58,-98, 
  /* [35][0][][] */ 37,15,117,-1,1,127,18,-61, 
  /* [36][0][][] */ -23,35,-19,43,43,-127,1,19, 
  /* [37][0][][] */ 20,-18,59,24,-127,111,-35,-19, 
  /* [38][0][][] */ -127,-22,-93,-26,75,-39,-118,-33, 
  /* [39][0][][] */ 21,-1,38,-118,-32,52,-127,10, 
  /* [40][0][][] */ 98,-33,-72,-127,68,66,60,-23, 
  /* [41][0][][] */ 15,-19,-6,127,-110,3,-88,-61, 
  /* [42][0][][] */ -87,25,68,127,-58,-67,-59,7, 
  /* [43][0][][] */ 87,-111,103,46,-121,35,127,51, 
  /* [44][0][][] */ 11,-44,30,-66,-17,127,46,26, 
  /* [45][0][][] */ -32,33,-42,5,78,-47,-127,-38, 
  /* [46][0][][] */ -102,-96,-2,-20,18,127,-45,-120, 
  /* [47][0][][] */ -127,-99,-60,36,27,126,-28,-62, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0036742736119776964, 0.0025814482942223549, 0.0015692916931584477, 0.0015626911772415042, 0.0015758344670757651, 0.0016807005740702152, 0.0032789832912385464, 0.00076856807572767138, 0.0028021857142448425, 0.00091701577184721828, 0.002029182855039835, 0.0058047841303050518, 0.0018447707407176495, 0.0019711949862539768, 0.0035416681785136461, 0.0016161388484761119, 0.0016403025947511196, 0.00057769991690292954, 0.0028303388971835375, 0.0038173920474946499, 0.0026361811906099319, 0.0016275872476398945, 0.0015184794319793582, 0.002527239266782999, 0.0020442716777324677, 0.0028941063210368156, 0.0035558594390749931, 0.0029374556615948677, 0.0024908385239541531, 0.0030895108357071877, 0.0016418758314102888, 0.0025510061532258987, 0.0016512601869180799, 0.0019225910073146224, 0.001157545018941164, 0.001441660919226706, 0.0008698758902028203, 0.0018436687532812357, 0.0015786036383360624, 0.0029811065178364515, 0.0019130940781906247, 0.00078115920769050717, 0.0018183939391747117, 0.0012798508396372199, 0.0011454630875959992, 0.0021135031711310148, 0.0020893318578600883, 0.0020231297239661217, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -2263, -425, -12486, 11078, 7437, -2800, 8858, 1593, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 8.8316599430982023e-05, 0.00012696054182015359, 7.7953867730684578e-05, 0.00011374759196769446, 0.00013115686306264251, 7.421008194796741e-05, 0.00012440494901966304, 0.0001483781379647553, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 13,43,31,33,-6,-29,44,48,2,27,-9,-6,44,-35,47,-16,-57,-28,-127,-6,48,-37,15,42,8,-7,48,-4,-6,-53,9,28,-44,51,47,6,53,74,-57,-50,5,16,-96,-45,33,22,-20,-56, 
  /* [1][0][][] */ -14,-42,-1,74,-18,-6,-8,-8,18,3,-16,-53,-6,-1,20,11,47,27,51,-36,-2,30,29,-48,-4,-13,-34,-29,-40,13,-7,-9,-33,-25,-97,73,22,11,-127,-14,28,-18,72,30,99,-21,-33,49, 
  /* [2][0][][] */ -8,-2,33,-30,-34,-18,-4,117,-49,88,-42,-6,127,-14,40,-23,-58,-72,1,33,-11,-20,20,-3,12,51,6,38,20,7,70,37,-65,-21,23,59,3,71,58,-122,41,39,-49,-34,17,33,-13,-13, 
  /* [3][0][][] */ 22,-11,-127,-25,9,-7,61,-41,-32,-16,-10,17,-43,-62,41,13,10,46,14,28,-65,14,-70,-10,-36,-70,27,2,-74,-66,-66,25,79,36,-48,22,-64,8,21,-24,29,-60,-30,13,60,-48,36,-20, 
  /* [4][0][][] */ 5,51,-5,-10,30,-5,-81,-114,-33,17,-19,73,2,-24,4,64,45,57,-88,9,26,9,-28,-8,36,-3,2,2,-25,14,4,-39,22,-20,-127,29,-29,-4,49,46,-28,-39,82,48,10,-47,23,17, 
  /* [5][0][][] */ -53,-30,97,17,79,27,58,-6,-127,7,-104,-12,-85,-88,51,76,-18,31,23,1,49,18,21,11,-16,-3,7,-19,-39,-6,-24,-23,-23,40,68,27,-16,74,-25,-6,45,-38,-57,47,-8,16,33,21, 
  /* [6][0][][] */ 85,67,-17,25,28,-31,-106,-69,0,-2,-2,71,-23,-31,0,39,-40,38,18,-2,127,-16,63,112,5,-54,15,-24,-57,-17,-31,-64,48,-30,20,-10,-4,27,-42,39,-53,-51,-63,-38,-26,-52,51,-3, 
  /* [7][0][][] */ 7,50,35,-77,56,-48,-39,-12,13,6,34,26,-35,4,35,-4,-17,26,-20,50,-46,-5,-13,56,3,-31,7,39,-9,30,-33,-16,43,-5,-33,-37,-59,9,127,-5,14,-33,-20,-9,38,3,63,3, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0037534553557634354, 0.0053958231583237648, 0.0033130391966551542, 0.0048342724330723286, 0.0055741667747497559, 0.0031539283227175474, 0.0052872104570269585, 0.0063060708343982697, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1296, -2596, 3260, -740, -194, -83, 2813, 12016, -5981, 14173, 9996, -1660, 5291, -1732, 5547, -741, 1071, -1510, 1587, -2014, -3238, -2413, -16979, -3014, 3921, 119, 1700, 2014, 9284, 8262, 7830, -2525, -7749, -96, -2545, -5285, 5056, 8495, -2894, 12002, 1472, -854, -4296, -2328, -7933, 12404, 116, 7019, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 7.573481707368046e-05, 0.00030454460647888482, 0.00017694711277727038, 0.00022251735208556056, 0.0001520246296422556, 0.00047613758943043649, 0.00025385135086253285, 0.00053299131104722619, 0.00025126096443273127, 0.00010704625310609117, 0.00015241077926475555, 0.00014304260548669845, 0.00016846615471877158, 0.00027895803214050829, 0.00017818160995375365, 0.00024266683612950146, 0.00053995242342352867, 0.00025821963208727539, 8.466321014566347e-05, 0.00024883751757442951, 0.00013884589134249836, 0.0001983946276595816, 8.8915439846459776e-05, 0.00029765878571197391, 0.00012672469893004745, 0.00035676898551173508, 8.2404338172636926e-05, 0.00022225848806556314, 0.00017735458095557988, 0.00012295629130676389, 0.00014738421305082738, 0.00017595083045307547, 0.00018797654774971306, 0.00033993370016105473, 0.00036066814209334552, 0.00013991448213346303, 0.00011261635518167168, 8.6782376456540078e-05, 0.0003346707671880722, 0.00014484857092611492, 0.00022727179748471826, 0.0001899239287013188, 0.00016689259791746736, 0.0002126305626006797, 0.00027478346601128578, 9.4990369689185172e-05, 0.00015552433615084738, 0.00011006784188793972, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 89,75,45,42,-14,-72,38,28,-57,-7,-26,49,57,13,-3,25,48,-40,104,48,60,-23,11,13,-5,-68,55,5,-31,-71,37,51,27,-89,9,28,-38,36,-10,-127,-7,-98,-53,-13,10,-127,73,-127, 127,11,65,-96,57,58,41,-42,-99,-93,21,127,11,-50,-127,23,-8,123,71,41,38,88,105,34,127,-59,-26,-127,-125,-55,-127,127,33,-77,-79,127,26,-96,-83,-113,11,127,-68,26,-45,-85,78,27, 80,6,21,-77,-20,-53,38,22,-44,-7,-3,23,33,27,44,8,-50,8,71,43,-23,-30,-65,-6,-12,-63,-65,-39,-44,-89,0,18,54,-55,32,36,-70,-63,2,-80,2,-28,111,-16,3,-112,16,-50, 
  /* [0][1][][] */ 103,3,19,69,66,77,-2,-127,99,-127,-109,-97,8,48,-55,127,-127,106,70,52,-2,100,77,-39,-7,123,87,21,29,-52,-90,45,63,88,-72,47,-83,-7,-4,-75,-19,-59,11,-95,45,-21,50,-32, 4,127,-127,97,127,60,-127,14,105,-36,-12,91,-127,127,-25,-6,42,-127,-127,-9,127,42,127,-127,-84,86,-55,0,-8,-44,38,-26,127,-9,124,-74,108,-127,127,97,127,70,-102,0,110,41,-127,-24, 49,-3,6,-127,65,53,11,-81,127,-52,-127,-40,17,39,-50,109,81,-2,18,63,40,-127,38,127,-65,127,-67,-23,36,-26,-49,40,-10,65,127,53,-71,-30,-55,-17,-22,-27,127,127,127,-36,65,-13, 
  /* [0][2][][] */ 30,42,28,50,2,0,28,28,8,-24,-11,-24,41,-62,45,-53,-12,24,85,-55,106,-20,17,-60,-73,-64,127,85,-4,-100,-52,62,27,36,-10,-2,-67,25,1,-15,-20,-76,18,-16,7,8,36,-76, 48,9,8,2,-8,-127,-9,-70,-9,-52,14,-34,-9,-57,-10,22,2,-38,30,123,92,70,82,28,43,-47,-77,46,-127,-44,-62,17,10,127,-49,-2,-116,-122,22,-28,-92,83,-10,5,-40,-80,84,-45, 18,3,28,-61,15,-3,38,39,-8,-1,9,-11,39,-54,54,-23,-6,-34,56,-127,22,-62,-60,68,-60,-66,-118,25,-9,-127,15,31,33,-36,-7,37,-127,-68,-28,-17,-24,-12,-2,11,-8,31,-31,-69, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.003526004496961832, 0.01417875848710537, 0.0082381702959537506, 0.010359794832766056, 0.0070778476074337959, 0.02216765470802784, 0.011818619444966316, 0.024814605712890625, 0.011698018759489059, 0.0049837785772979259, 0.0070958258584141731, 0.0066596693359315395, 0.00784332025796175, 0.012987516820430756, 0.0082956450060009956, 0.011297899298369884, 0.025138698518276215, 0.012021995149552822, 0.0039416858926415443, 0.011585189029574394, 0.0064642820507287979, 0.0092367073521018028, 0.0041396580636501312, 0.013858173042535782, 0.0058999527245759964, 0.016610180959105492, 0.0038365190848708153, 0.010347742587327957, 0.0082571404054760933, 0.0057245064526796341, 0.0068618026562035084, 0.0081917857751250267, 0.0087516698986291885, 0.015826376155018806, 0.016791714355349541, 0.0065140328370034695, 0.0052431072108447552, 0.0040403483435511589, 0.015581348910927773, 0.0067437505349516869, 0.010581148788332939, 0.00884233508259058, 0.0077700596302747726, 0.0098994933068752289, 0.012793160974979401, 0.004422490019351244, 0.0072407848201692104, 0.0051244553178548813, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -1434, -1734, 2273, -580, -2308, 2158, 2200, 19902, 2353, 2102, 6376, 2463, 1499, 9347, 4857, -1924, 14002, 1819, 765, -2935, -207, -573, 1829, 9189, 734, 6755, 2430, -262, 7568, 252, 1692, -1333, -1722, -2732, -6387, 1566, 2666, 1919, 1980, 2721, 2216, 741, 4033, 2591, 14129, 4036, -1664, 748, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00022459505998995155, 0.00027605568175204098, 0.00027922887238673866, 0.00018939605797640979, 0.00022275374794844538, 0.00012075130507582799, 0.00025664156419225037, 6.2881037592887878e-05, 0.00013294993550516665, 0.00026390669518150389, 0.00012633659935090691, 0.0001521415397292003, 0.00025143017410300672, 9.3386086518876255e-05, 0.00015389117470476776, 0.00021004212612751871, 7.3117902502417564e-05, 0.00013084527745377272, 0.00030436666565947235, 0.00021272884623613209, 0.00013612782640848309, 0.00029493009787984192, 0.00019109147251583636, 0.00010123845277121291, 0.00021676009055227041, 9.9681281426455826e-05, 0.00025729750632308424, 0.00026619047275744379, 6.9656860432587564e-05, 0.00039403807022608817, 0.00014566116442438215, 0.00027537386631593108, 0.00027163123013451695, 0.00012232021254021674, 8.8475448137614876e-05, 0.00027269491693004966, 0.00016856117872521281, 0.00019446510123088956, 0.00022063107462599874, 0.00017675299022812396, 0.00027908760239370167, 0.00027673403383232653, 0.00016364213661290705, 0.00019993542809970677, 6.8003377236891538e-05, 0.00017135633970610797, 0.00011748426913982257, 0.00030113998218439519, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -16,-44,-46,104,14,-72,-82,-127, 
  /* [1][0][][] */ 127,-28,40,-28,22,-72,-3,26, 
  /* [2][0][][] */ -6,49,5,-127,20,93,-53,64, 
  /* [3][0][][] */ -27,127,-53,-80,-89,-4,25,-84, 
  /* [4][0][][] */ 3,-61,-90,-33,22,-80,-71,-127, 
  /* [5][0][][] */ -44,-88,88,56,18,127,39,-116, 
  /* [6][0][][] */ 1,5,-37,35,5,13,-127,-38, 
  /* [7][0][][] */ 25,-16,5,27,-38,54,127,66, 
  /* [8][0][][] */ -7,41,-81,-16,-38,-127,-64,61, 
  /* [9][0][][] */ 62,3,-46,-17,14,127,-42,102, 
  /* [10][0][][] */ -22,55,89,123,85,127,-15,-62, 
  /* [11][0][][] */ -17,-56,5,36,-127,75,-10,-30, 
  /* [12][0][][] */ -21,34,79,-54,58,-91,-127,-62, 
  /* [13][0][][] */ 48,33,-91,-127,-14,-65,-74,114, 
  /* [14][0][][] */ -38,-127,2,-71,6,-70,20,-117, 
  /* [15][0][][] */ 6,68,69,94,86,127,-12,-32, 
  /* [16][0][][] */ 43,18,-22,-127,64,105,-74,79, 
  /* [17][0][][] */ -100,101,-127,35,38,106,-78,40, 
  /* [18][0][][] */ -127,54,26,-18,-98,17,-27,7, 
  /* [19][0][][] */ 127,6,-35,-31,78,-63,69,-89, 
  /* [20][0][][] */ 127,-57,41,-31,-52,32,85,4, 
  /* [21][0][][] */ 13,-29,-40,47,-1,21,127,40, 
  /* [22][0][][] */ 96,41,-127,-97,20,122,72,120, 
  /* [23][0][][] */ -28,43,-50,-85,40,5,-127,2, 
  /* [24][0][][] */ 127,-68,-94,-26,102,-58,18,17, 
  /* [25][0][][] */ -39,-86,79,-46,73,127,-23,-100, 
  /* [26][0][][] */ 23,-59,44,41,127,-67,-48,-67, 
  /* [27][0][][] */ -23,-127,63,87,22,-6,-35,99, 
  /* [28][0][][] */ -18,62,-125,-48,121,-105,-27,127, 
  /* [29][0][][] */ -80,31,127,-93,13,-33,32,30, 
  /* [30][0][][] */ 118,-86,94,-30,-62,-127,72,-34, 
  /* [31][0][][] */ 20,26,49,-7,-33,-11,-127,12, 
  /* [32][0][][] */ 18,-17,22,127,-28,-88,-44,-89, 
  /* [33][0][][] */ 107,-90,-47,101,-127,90,-46,-35, 
  /* [34][0][][] */ 12,-89,11,-58,-115,127,39,-31, 
  /* [35][0][][] */ 22,127,83,20,17,20,-57,3, 
  /* [36][0][][] */ 22,106,-76,-127,-91,17,76,-85, 
  /* [37][0][][] */ 42,-5,42,16,45,127,63,22, 
  /* [38][0][][] */ -66,-93,96,53,23,-7,-59,127, 
  /* [39][0][][] */ 9,33,127,-54,-30,39,-31,27, 
  /* [40][0][][] */ 8,-1,19,-2,6,-28,127,5, 
  /* [41][0][][] */ -18,-8,-66,-127,-73,-83,-64,37, 
  /* [42][0][][] */ 34,-9,57,-38,-127,-59,-49,30, 
  /* [43][0][][] */ 79,-15,39,35,-78,-127,119,24, 
  /* [44][0][][] */ -74,-127,-17,-73,2,15,-1,-123, 
  /* [45][0][][] */ 19,111,68,70,51,127,-56,36, 
  /* [46][0][][] */ -115,-8,-2,72,109,53,-96,127, 
  /* [47][0][][] */ 15,75,-45,-42,-8,-39,25,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0030881757847964764, 0.0037957581225782633, 0.0038393891882151365, 0.0026041904930025339, 0.0030628577806055546, 0.0016603270778432488, 0.0035288142971694469, 0.00086461252067238092, 0.001828057924285531, 0.0036287095863372087, 0.001737124752253294, 0.0020919418893754482, 0.0034571581054478884, 0.0012840561103075743, 0.002115999348461628, 0.0028880734462291002, 0.0010053691221401095, 0.0017991189379245043, 0.004185033030807972, 0.0029250157531350851, 0.0018717538332566619, 0.0040552807040512562, 0.002627502428367734, 0.0013920259661972523, 0.0029804452788084745, 0.0013706148602068424, 0.0035378334578126669, 0.0036601114552468061, 0.00095777993556112051, 0.0054180123843252659, 0.0020028369035571814, 0.0037863829638808966, 0.0037349218036979437, 0.0016818995354697108, 0.0012165349908173084, 0.0037495475262403488, 0.002317711478099227, 0.0026738897431641817, 0.0030336710624396801, 0.0024303486570715904, 0.0038374466821551323, 0.0038050853181630373, 0.0022500748746097088, 0.0027491066139191389, 0.00093504454707726836, 0.0023561448324471712, 0.0016154054319486022, 0.0041406662203371525, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 15505, 4008, 14758, -5147, -15606, 8846, 4198, 13719, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 7.8274839324876666e-05, 0.00010077468323288485, 7.6638061727862805e-05, 7.5498093792703003e-05, 0.00010117456986336038, 0.00010154461051570252, 6.4585554355289787e-05, 8.7388318206649274e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-12,-12,-10,-23,-82,-32,-9,57,-38,-53,-26,-19,79,-54,5,14,-9,7,16,29,-30,3,11,37,5,3,32,11,59,-42,-84,17,-60,12,-26,34,-37,-10,29,-59,-22,-24,-44,-78,-82,4,-24, 
  /* [1][0][][] */ -73,2,92,-54,63,40,50,27,-17,15,-2,102,22,-34,-127,-58,-103,-81,39,-20,8,94,-46,7,21,-105,37,94,41,-24,30,48,47,36,5,36,-72,-22,20,10,0,-34,-95,19,-13,-46,-93,36, 
  /* [2][0][][] */ 88,35,-30,-66,-52,-8,-46,-90,31,28,-75,-52,-12,58,-53,45,-5,73,3,11,57,47,-2,-1,-127,21,26,-54,-2,31,36,-86,12,-37,16,17,-48,-53,16,32,-113,-106,-31,-52,-48,-95,31,3, 
  /* [3][0][][] */ 14,-2,19,23,-103,-26,-10,46,-33,-57,-7,72,15,-16,-75,-42,-26,31,1,-58,-40,127,14,-57,22,46,48,-47,19,13,9,23,30,20,11,-8,47,52,23,-1,39,-20,21,-49,-17,6,22,34, 
  /* [4][0][][] */ -46,22,-117,16,-8,96,23,43,-16,127,39,67,24,-75,-27,28,-19,-3,-5,34,-15,42,-74,25,11,-5,51,-11,44,-66,120,96,54,46,12,-47,-88,23,2,-23,43,18,38,38,50,39,25,71, 
  /* [5][0][][] */ -26,3,34,-7,58,-65,-37,-32,-31,-62,9,-30,40,5,-13,1,24,-5,5,29,15,64,21,17,15,-1,-36,-8,-34,-1,-127,-9,-41,-10,26,-20,-5,-30,3,-15,-12,-1,-31,-9,30,33,-3,42, 
  /* [6][0][][] */ 8,58,-2,74,-15,41,-58,55,-79,-34,53,20,46,9,37,17,-1,-48,-43,40,-3,68,33,-34,-87,-9,-42,24,-94,-11,-94,4,5,-32,-42,-59,127,-4,-56,-56,51,32,42,-51,-78,-17,-57,-41, 
  /* [7][0][][] */ -48,20,-77,31,-17,-1,-4,-1,-57,-45,34,71,42,11,-70,-73,-58,82,0,-8,41,13,36,-34,-37,100,-55,-108,-45,-13,-109,-11,-16,-30,-56,-5,-32,-38,-49,-21,-25,41,55,-18,-54,-54,127,-53, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0033266807440668344, 0.0042829238809645176, 0.0032571176998317242, 0.0032086689025163651, 0.0042999191209673882, 0.0043156458996236324, 0.0027448860928416252, 0.0037140036001801491, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 5775, 6496, 9327, 9023, 35107, -2119, -1295, -296, -1467, -10549, -2514, -1601, 14198, 7224, 4439, -1069, 7094, 5648, 730, -3023, 4370, -2148, 7313, -835, 4171, 8604, 501, -221, -257, 1907, 9107, 3587, 1134, -1575, 2049, -1024, 7617, 5260, -1628, -322, 5279, -6303, 4267, 871, -474, 1854, 5187, -2242, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00028043467318639159, 0.00014611828373745084, 8.4252213127911091e-05, 0.00015185291704256088, 5.6335822591790929e-05, 0.00041388958925381303, 0.00024565347121097147, 0.00030657355091534555, 0.00037783844163641334, 0.00026894058100879192, 0.0001401127374265343, 0.00033632109989412129, 8.117926336126402e-05, 0.00015953159891068935, 0.00040725979488343, 0.00012790305481757969, 0.00014479408855549991, 0.00017213339742738754, 0.00047704708413220942, 0.0002898608217947185, 0.0001409631222486496, 0.00017370133718941361, 0.00013526385009754449, 0.00016957956540863961, 0.00017859756189864129, 0.00019563778187148273, 0.00039720110362395644, 0.00026269990485161543, 0.00034325310843996704, 0.00028029995155520737, 0.00017945970466826111, 0.00033481582067906857, 0.00028141701477579772, 0.00090032571461051702, 0.00014040568203199655, 0.00018575457215774804, 0.00023317254090216011, 0.00017503697017673403, 0.00017872023454401642, 0.00029629076016135514, 0.00020189695351291448, 0.000183906449819915, 0.00025996135082095861, 0.00051642948528751731, 0.00034930146648548543, 0.00039659059257246554, 0.00025128075503744185, 0.00023034520563669503, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -99,-19,44,-12,-127,17,-111,4,-5,127,55,12,-57,71,11,36,37,26,15,-21,-118,-22,25,57,-27,11,-8,-66,23,-123,85,36,-12,28,38,-34,17,-127,-18,127,-63,38,-9,-8,-11,6,9,-17, 16,-127,-8,22,-66,26,-116,-2,30,30,127,68,-65,-75,-94,-51,-10,-46,103,61,14,67,-62,29,-86,-4,-1,-127,7,-80,-29,-127,-10,19,-50,-127,-22,-1,21,92,127,-18,-12,127,9,-127,8,-29, -127,8,57,1,-99,24,-68,0,-2,92,-12,-7,-72,72,23,62,-34,-2,11,-39,-93,-31,61,26,13,-10,6,-45,-39,-127,47,-10,2,13,-54,-30,16,-102,22,95,-58,28,-9,4,7,11,12,46, 
  /* [0][1][][] */ 59,-42,22,-3,-84,4,63,-12,-54,64,31,41,-68,-38,-79,127,-49,8,45,127,4,45,-119,-15,-31,-98,-18,-66,127,20,36,118,-127,0,95,8,-4,37,-99,-113,51,-22,12,10,-127,42,6,-51, 115,-59,-127,-127,50,127,-5,127,-127,-94,-29,127,-65,-127,-127,-120,-28,-127,-78,63,127,127,-87,95,-127,65,-127,96,-57,-58,-127,-97,9,127,-127,117,-127,-65,127,-43,-54,127,-127,-77,103,76,-127,-67, 47,-24,100,-2,-52,-32,17,-22,-31,17,5,-21,-42,-80,-67,121,-127,-43,23,111,-22,52,-9,-127,29,-74,125,-1,-51,109,-50,95,103,-38,-57,24,-11,-13,1,-53,29,-22,-9,-9,1,30,-14,127, 
  /* [0][2][][] */ -107,-45,33,-24,-53,14,83,3,91,50,70,18,-56,75,36,-7,58,52,2,-14,-60,-29,42,34,-25,-8,-5,5,6,29,79,-4,-8,16,72,21,20,-44,-36,4,-37,16,5,-16,-11,-7,-8,-1, -69,-123,62,-57,-69,-13,127,2,91,35,93,-35,124,-107,-71,-24,-57,40,-127,19,-73,15,-127,-7,20,-127,-5,24,3,60,12,-85,-7,-40,-22,36,-12,55,54,-52,1,18,27,-46,27,-26,0,8, -76,-2,47,-4,-75,31,55,0,48,12,15,27,-127,51,44,6,-50,54,-2,-26,-45,-28,109,-62,-3,-16,9,27,-16,36,27,-47,-10,24,-31,20,21,-51,6,-34,-30,40,20,-2,-6,7,8,1, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.011918473988771439, 0.0062100267969071865, 0.0035807189997285604, 0.0064537487924098969, 0.0023942724801599979, 0.01759030669927597, 0.010440272279083729, 0.013029376044869423, 0.016058133915066719, 0.011429973877966404, 0.0059547913260757923, 0.014293646439909935, 0.0034501184709370136, 0.0067800926044583321, 0.017308540642261505, 0.0054358798079192638, 0.0061537483707070351, 0.0073156692087650299, 0.020274501293897629, 0.012319085188210011, 0.0059909326955676079, 0.0073823067359626293, 0.0057487133890390396, 0.0072071314789354801, 0.0075903963297605515, 0.0083146058022975922, 0.016881046816706657, 0.011164745315909386, 0.014588257297873497, 0.011912747286260128, 0.0076270373538136482, 0.014229672029614449, 0.011960223317146301, 0.038263842463493347, 0.005967241246253252, 0.0078945690765976906, 0.0099098328500986099, 0.00743907131254673, 0.0075956098735332489, 0.012592356652021408, 0.0085806204006075859, 0.007816024124622345, 0.011048357002437115, 0.021948253735899925, 0.01484531257301569, 0.01685510016977787, 0.010679432190954685, 0.009789670817553997, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 10790, -342, 1440, 1303, 2812, 741, 6361, -461, 10892, 8536, -807, -208, 1429, 1228, 189, 2435, 2588, 2730, -1718, -1300, 2406, 2301, 2676, 4, 3734, 2321, 4859, -667, 4988, -307, 6065, 7966, 4600, 721, 1165, 1650, 2938, 1486, 1244, 1705, -241, 3397, 1966, 4339, 5068, 2228, 142, 2094, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 9.4370225269813091e-05, 0.00033071805955842137, 0.00030949147185310721, 0.00025193259352818131, 0.00025328219635412097, 0.00017677007417660207, 9.5850613433867693e-05, 0.00028225366258993745, 8.8204353232868016e-05, 8.6524501966778189e-05, 0.00017856188060250133, 0.00018747930880635977, 0.00035192471113987267, 0.00026073065237142146, 0.00011531302880030125, 0.00026523746782913804, 0.00020131601195316762, 0.00025673443451523781, 0.00022042966156732291, 0.00010710897186072543, 0.00028341470169834793, 0.00014130669296719134, 0.0002409715234534815, 0.00046442315215244889, 0.00017269515956286341, 0.00029865940450690687, 0.0001861569908214733, 0.00041656813118606806, 0.00018286738486494869, 0.00014652327809017152, 0.00012738151417579502, 8.2606238720472902e-05, 0.00019481407070998102, 0.00012510240776464343, 0.00027926458278670907, 0.00039006120641715825, 0.00021875706443097442, 0.00026792482822202146, 0.00039166313945315778, 0.00013354806287679821, 0.0002903569838963449, 0.00020331924315541983, 0.00037289608735591173, 0.00016096507897600532, 0.00018194242147728801, 0.00012979032180737704, 0.00027240079361945391, 0.00031342729926109314, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 62,-84,37,3,54,-127,1,-78, 
  /* [1][0][][] */ -52,-51,-76,69,-127,55,-29,21, 
  /* [2][0][][] */ 59,-48,48,-19,127,-21,-5,76, 
  /* [3][0][][] */ -15,127,-8,111,5,10,-54,-51, 
  /* [4][0][][] */ -36,127,77,-42,40,15,-71,15, 
  /* [5][0][][] */ -83,22,-3,16,127,-26,85,-11, 
  /* [6][0][][] */ 110,-73,113,16,27,127,86,-19, 
  /* [7][0][][] */ -31,-55,58,58,83,17,-54,127, 
  /* [8][0][][] */ 20,-24,-39,-86,-20,127,-69,20, 
  /* [9][0][][] */ -127,22,-98,2,109,-38,-55,12, 
  /* [10][0][][] */ -13,-96,57,25,-25,-91,-127,-97, 
  /* [11][0][][] */ 42,85,-15,-5,-22,-79,27,127, 
  /* [12][0][][] */ 36,-40,-87,53,-93,127,40,75, 
  /* [13][0][][] */ -37,-32,-127,23,-79,82,18,45, 
  /* [14][0][][] */ -61,127,-76,81,84,42,-18,73, 
  /* [15][0][][] */ -89,-11,-12,-1,85,71,-64,-127, 
  /* [16][0][][] */ 90,-127,-109,-24,-47,87,-45,-5, 
  /* [17][0][][] */ 25,126,-111,-54,-81,42,70,-127, 
  /* [18][0][][] */ -76,-114,45,26,127,-70,-37,73, 
  /* [19][0][][] */ -61,112,-40,54,18,-124,-127,64, 
  /* [20][0][][] */ 78,-14,30,-59,2,-58,28,127, 
  /* [21][0][][] */ 66,-47,127,103,-43,112,84,-25, 
  /* [22][0][][] */ -21,91,13,4,127,-53,-108,-61, 
  /* [23][0][][] */ 29,-41,25,127,-2,-58,60,-31, 
  /* [24][0][][] */ -28,55,127,-74,-25,-21,10,-30, 
  /* [25][0][][] */ -48,-127,99,66,35,-1,-29,127, 
  /* [26][0][][] */ 63,-25,-127,-94,-95,55,28,104, 
  /* [27][0][][] */ 44,124,-103,-56,-48,23,31,-127, 
  /* [28][0][][] */ -23,50,-52,-91,-16,-44,-127,-41, 
  /* [29][0][][] */ -107,53,-127,-54,117,58,-40,-8, 
  /* [30][0][][] */ 86,-57,16,-26,-119,119,127,63, 
  /* [31][0][][] */ -74,95,-45,89,127,-95,-20,5, 
  /* [32][0][][] */ 9,87,59,-63,127,-46,-16,-91, 
  /* [33][0][][] */ -127,51,-121,11,50,30,-29,5, 
  /* [34][0][][] */ 58,-16,66,-89,-41,-127,61,101, 
  /* [35][0][][] */ -127,28,45,-24,-77,11,5,5, 
  /* [36][0][][] */ -2,-48,-42,42,-15,10,127,38, 
  /* [37][0][][] */ -28,-27,-77,-46,-24,-127,-68,-7, 
  /* [38][0][][] */ -102,24,26,19,-127,16,32,8, 
  /* [39][0][][] */ -29,-60,27,-24,-31,92,-127,-109, 
  /* [40][0][][] */ 73,-127,24,63,-60,-51,114,56, 
  /* [41][0][][] */ 26,127,87,43,38,35,-93,-34, 
  /* [42][0][][] */ 35,127,-32,-13,-32,20,-14,-51, 
  /* [43][0][][] */ -71,64,-84,-127,23,18,-59,65, 
  /* [44][0][][] */ -52,25,-26,17,40,127,-6,-5, 
  /* [45][0][][] */ -7,85,-96,-32,-79,-101,-15,127, 
  /* [46][0][][] */ 31,106,-98,-32,-65,30,6,-127, 
  /* [47][0][][] */ 20,10,-4,-59,-70,-127,-32,38, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.001260044053196907, 0.0044157924130558968, 0.0041323723271489143, 0.0033638384193181992, 0.0033818583469837904, 0.0023602580185979605, 0.001279810443520546, 0.0037686892319470644, 0.0011777165345847607, 0.001155286910943687, 0.0023841825313866138, 0.0025032493285834789, 0.0046989466063678265, 0.0034813110250979662, 0.00153967528603971, 0.0035414868034422398, 0.0026879988145083189, 0.0034279532264918089, 0.0029432068113237619, 0.0014301335904747248, 0.0037841915618628263, 0.0018867461476475, 0.0032174845691770315, 0.0062010409310460091, 0.0023058492224663496, 0.0039877411909401417, 0.0024855935480445623, 0.0055620744824409485, 0.0024416702799499035, 0.0019563988316804171, 0.0017008153954520822, 0.0011029697488993406, 0.0026011839509010315, 0.0016703843139111996, 0.00372877879999578, 0.0052081504836678505, 0.0029208741616457701, 0.0035773687995970249, 0.0052295397035777569, 0.0017831518780440092, 0.0038768858648836613, 0.0027147461660206318, 0.0049789594486355782, 0.0021492275409400463, 0.0024293200112879276, 0.0017329780384898186, 0.0036371324677020311, 0.0041849240660667419, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5599, -2201, -2212, 3696, 1439, -17388, -3328, -10606, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00021250412100926042, 0.00012722962128464133, 0.00024883882724680007, 0.0001435380254406482, 0.00023759588657412678, 8.0615762271918356e-05, 0.00012138433521613479, 0.00013048986147623509, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -24,20,3,28,-19,11,0,29,-48,-5,-34,-2,-15,13,36,4,-46,-19,29,-17,-25,127,-20,-18,-22,-37,5,32,-33,35,9,-25,-10,20,33,37,21,4,31,-21,3,-33,-17,-12,-17,25,23,13, 
  /* [1][0][][] */ 8,56,5,46,29,37,46,115,-47,-46,80,-29,-39,-33,29,-21,-18,0,36,4,30,-127,-5,-69,6,11,-16,15,-8,9,-33,-57,-40,4,24,-9,17,65,72,-18,22,19,40,-27,-33,45,7,49, 
  /* [2][0][][] */ -3,24,-1,30,28,16,-31,33,23,10,62,17,5,-15,30,-55,20,27,-6,9,-18,127,7,-13,21,-42,-4,0,-21,31,-22,-60,-15,7,15,-42,31,-14,-41,-27,27,-12,-6,-50,-36,31,11,19, 
  /* [3][0][][] */ -40,47,-8,6,-18,32,60,-2,5,5,3,13,-18,34,41,15,-13,0,8,0,39,-81,-9,18,-15,4,-127,27,-33,-28,-13,5,-41,-16,9,26,32,-14,-40,-29,4,-14,12,16,17,-12,40,19, 
  /* [4][0][][] */ 23,4,-42,6,18,-5,21,-9,-57,13,1,27,9,-9,-15,19,-29,36,-20,-6,3,-127,-7,-1,35,28,36,-44,42,-5,4,12,-10,53,33,-6,-21,18,-5,8,-14,-66,-88,24,36,39,2,-12, 
  /* [5][0][][] */ -6,54,82,3,0,30,21,-104,69,-37,-15,-5,96,-64,1,17,19,-39,38,3,-25,127,20,8,88,6,84,46,95,60,-2,-34,-73,-45,102,38,-51,-51,2,-106,12,-18,61,68,-47,-42,-26,-32, 
  /* [6][0][][] */ 63,-5,-25,17,44,-21,46,-47,45,39,0,-32,-15,45,24,-76,22,-127,-27,-17,33,-16,-8,28,-45,-36,48,-17,62,-36,126,51,49,48,33,-51,-65,21,64,-30,-32,23,-78,67,39,8,42,-52, 
  /* [7][0][][] */ -12,50,51,59,-2,16,67,102,54,31,2,76,-59,-7,34,-14,90,-17,-36,-14,-3,-127,0,-100,-76,80,59,18,7,31,21,-22,22,-23,19,25,-21,106,-98,-33,11,-5,27,-12,-53,3,44,13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0090314252302050591, 0.0054072588682174683, 0.010575650259852409, 0.0061003658920526505, 0.010097824968397617, 0.0034261697437614202, 0.0051588341593742371, 0.0055458187125623226, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 22613, 22177, 9514, 20561, 5439, 9527, 20805, 7851, 45301, -1676, -557, 19698, 14412, -4261, 8681, 220, 1608, 31375, 17969, -357, 4282, -8544, 453, 1593, 46904, 35083, 1905, 246, -1229, 13091, -1923, 1071, -15260, 18538, 31057, 27027, 21805, 22409, -269, -490, 7144, 37765, -936, -298, -415, -2225, 20199, 11288, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.0237311370437965e-05, 7.6585791248362511e-05, 0.00010017411113949493, 6.5898922912310809e-05, 0.00013684859732165933, 9.9129560112487525e-05, 0.00014776200987398624, 0.00012485154729802161, 4.3110037950100377e-05, 8.5593637777492404e-05, 7.6636933954432607e-05, 5.6190991017501801e-05, 0.00018028823251370341, 5.7122302678180858e-05, 8.78000573720783e-05, 8.5389568994287401e-05, 4.0794428059598431e-05, 7.0294736360665411e-05, 6.0269620007602498e-05, 0.00011757836909964681, 7.0712834713049233e-05, 0.00026888828142546117, 0.00014438778453040868, 9.8536474979482591e-05, 3.6131525121163577e-05, 6.884757021907717e-05, 7.5332711276132613e-05, 0.00010493730223970488, 5.8363209973322228e-05, 0.00010817759903147817, 0.0001853337453212589, 0.00021242443472146988, 6.9582973083015531e-05, 5.7947356253862381e-05, 7.7347220212686807e-05, 0.00012468603381421417, 0.00010261179704684764, 0.00014429635484702885, 0.0001406528172083199, 8.7002423242665827e-05, 0.00016324158059433103, 4.0694634662941098e-05, 8.9212830062024295e-05, 5.4187341447686777e-05, 0.00041226181201636791, 0.00012431960203684866, 7.6086274930275977e-05, 9.1053028882015496e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -52,-81,-44,-61,-37,33,-63,-55,-60,61,42,-88,-29,21,-92,67,87,-81,-53,110,35,59,-49,86,-81,-64,58,67,60,-51,91,63,51,-64,-82,-32,-127,-67,122,61,-35,-23,36,90,70,103,-44,-63, -82,-120,-78,-107,-127,28,-82,-101,-67,100,79,-109,-62,68,-127,97,97,-112,-99,-7,77,76,88,112,-81,-93,106,104,99,-78,97,76,81,-89,-102,-57,-112,-78,127,78,-84,-63,55,107,76,111,-88,-97, -35,-42,-35,-65,-82,30,-70,-44,-44,56,50,-53,-26,77,-69,37,46,-47,-30,-51,60,-127,-67,39,-33,-39,40,30,43,-28,60,39,39,-55,-49,-29,-64,-45,27,28,-36,-32,43,62,39,66,-40,-33, 
  /* [0][1][][] */ -70,-94,-74,-88,-67,-7,-92,-73,-96,91,67,-93,-64,61,-122,82,109,-90,-70,127,78,76,-62,101,-115,-84,68,108,76,-80,102,84,71,-103,-103,-65,-102,-90,105,102,-86,-63,71,85,127,127,-66,-87, -127,-127,-127,-127,-118,-127,-127,-127,-127,127,127,-127,-127,127,-85,127,127,-127,-127,-54,127,80,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-95,-127,117,127,-127,-127,127,127,124,107,-127,-127, -54,-34,-79,-93,-95,-111,-109,-71,-63,80,68,-77,-57,111,-60,54,91,-60,-50,-118,85,-125,-82,54,-42,-67,36,38,71,-55,78,62,63,-90,-64,-72,-55,-75,44,49,-69,-59,72,82,50,31,-53,-51, 
  /* [0][2][][] */ -25,-18,-35,-38,-48,-15,-57,-37,-49,60,29,-23,-20,3,-76,37,35,-25,-25,39,44,32,-16,31,-48,-31,13,34,32,-22,43,39,52,-58,-60,-48,-17,-38,-2,58,-94,-48,41,35,63,24,-36,-32, -56,-14,-71,-64,-75,-124,-70,-56,-62,87,44,-55,-42,59,-69,36,48,-30,-40,-59,76,13,37,24,-56,-63,34,52,58,-58,56,63,80,-92,-88,-79,-21,-49,5,67,-99,-71,72,65,63,-4,-72,-48, -28,23,-50,-47,-40,-110,-75,-40,-25,62,25,-46,-11,50,5,15,51,-13,-29,-71,42,-52,-32,20,-8,-41,2,19,34,-28,31,37,34,-63,-67,-56,5,-36,13,37,-63,-33,40,33,22,-2,-21,-26, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0021350856404751539, 0.0032548960298299789, 0.0042573995888233185, 0.002800704212859273, 0.0058160652406513691, 0.0042130062356591225, 0.0062798853032290936, 0.0053061908110976219, 0.0018321765819564462, 0.0036377294454723597, 0.0032570697367191315, 0.0023881171364337206, 0.0076622497290372849, 0.0024276978801935911, 0.003731502452865243, 0.003629056503996253, 0.0017337631434202194, 0.0029875263571739197, 0.0025614588521420956, 0.0049970806576311588, 0.0030052955262362957, 0.011427751742303371, 0.0061364807188510895, 0.0041877999901771545, 0.0015355898067355156, 0.0029260215815156698, 0.003201640211045742, 0.00445983512327075, 0.0024804363492876291, 0.0045975479297339916, 0.0078766839578747749, 0.0090280380100011826, 0.002957276301458478, 0.0024627626407891512, 0.003287256695330143, 0.0052991565316915512, 0.0043610013090074062, 0.0061325952410697937, 0.0059777447022497654, 0.0036976030096411705, 0.0069377669133245945, 0.0017295219004154205, 0.0037915450520813465, 0.002302961889654398, 0.017521126195788383, 0.0052835829555988312, 0.0032336667645722628, 0.0038697537966072559, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 705, 2224, 1536, -164, -764, 183, 6540, 2653, 1309, -2718, 1452, -62, 4826, 65, 828, -1710, -69, 3845, 787, 1090, -759, 26264, 1364, -1227, 873, 4209, 1942, -1358, 152, 148, -2093, -1380, 2970, 666, 5579, 11981, 3377, 5070, -2622, -1509, -764, 1424, 1039, 495, -1672, -1936, 2710, 1032, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00030645332299172878, 0.00029335080762393773, 0.00029429362621158361, 0.00042901062988676131, 0.00028852120158262551, 0.00027297940687276423, 0.00013322652375791222, 0.00021992034453433007, 0.00035085514537058771, 0.00020121420675422996, 0.00028233419288881123, 0.00036473223008215427, 0.00014429111615754664, 0.0005186120979487896, 0.0004771103267557919, 0.00021692014706786722, 0.00058838195400312543, 0.00017666071653366089, 0.00029570175684057176, 0.00029774254653602839, 0.00031090152333490551, 6.1212638684082776e-05, 0.00029867273406125605, 0.000224692965275608, 0.00029519436066038907, 0.0001939828071044758, 0.0002911254414357245, 0.00032149840262718499, 0.00039743079105392098, 0.00045106129255145788, 0.00022910596453584731, 0.00024126884818542749, 0.00024282198864966631, 0.00046604219824075699, 0.00016199912352021784, 8.5685031081084162e-05, 0.00025082528009079397, 0.00016815941489767283, 0.00022167050337884575, 0.00021987108630128205, 0.00036426068982109427, 0.00034841988235712051, 0.00029856557375751436, 0.00036814605118706822, 0.00025865942006930709, 0.00024502992164343596, 0.00022775560501031578, 0.00020928159938193858, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -21,56,-59,53,29,127,39,29, 
  /* [1][0][][] */ 44,-127,-92,-33,-36,51,54,-33, 
  /* [2][0][][] */ -57,49,-50,-116,-46,-127,-39,-75, 
  /* [3][0][][] */ -13,127,63,28,0,-83,-25,28, 
  /* [4][0][][] */ -103,45,-127,82,13,-25,-42,-67, 
  /* [5][0][][] */ 85,-99,-127,33,12,-25,79,-47, 
  /* [6][0][][] */ -8,-93,-56,24,-127,-54,-46,75, 
  /* [7][0][][] */ -22,-43,-12,-42,47,1,-31,127, 
  /* [8][0][][] */ 10,32,-91,-94,42,-29,-127,-85, 
  /* [9][0][][] */ -127,60,-11,106,-11,67,101,-5, 
  /* [10][0][][] */ -24,-12,88,-127,-31,65,14,36, 
  /* [11][0][][] */ 107,-16,110,39,-38,50,85,127, 
  /* [12][0][][] */ 51,40,32,-51,70,116,90,-127, 
  /* [13][0][][] */ 32,51,-36,59,-9,-127,-37,52, 
  /* [14][0][][] */ 10,-127,-28,-29,9,67,31,-31, 
  /* [15][0][][] */ -109,-7,3,-78,61,127,-79,-26, 
  /* [16][0][][] */ 15,-42,118,15,-25,24,127,77, 
  /* [17][0][][] */ 61,20,57,24,-7,-82,-38,-127, 
  /* [18][0][][] */ -124,14,-81,-13,-16,-127,24,-92, 
  /* [19][0][][] */ 69,14,116,-23,-63,35,99,127, 
  /* [20][0][][] */ 18,127,50,-6,24,43,45,10, 
  /* [21][0][][] */ -38,30,27,-107,-64,127,-9,-12, 
  /* [22][0][][] */ 36,3,87,-10,-49,14,127,89, 
  /* [23][0][][] */ -72,120,53,42,-104,-98,-119,127, 
  /* [24][0][][] */ -18,-6,100,23,-113,127,-6,-96, 
  /* [25][0][][] */ -40,17,69,21,-127,47,-72,22, 
  /* [26][0][][] */ -49,-127,37,-42,17,41,-13,-15, 
  /* [27][0][][] */ -22,60,27,53,-22,127,-26,-10, 
  /* [28][0][][] */ 10,-127,62,17,63,123,33,43, 
  /* [29][0][][] */ 15,127,-24,32,-65,-59,-13,14, 
  /* [30][0][][] */ -54,75,105,89,-127,-61,-45,-108, 
  /* [31][0][][] */ 12,72,26,58,-49,-13,18,-127, 
  /* [32][0][][] */ -24,-35,-59,67,-127,-41,-54,4, 
  /* [33][0][][] */ 86,22,73,54,-28,61,56,127, 
  /* [34][0][][] */ 124,10,-127,-38,-53,-11,76,35, 
  /* [35][0][][] */ 127,102,104,-120,-57,-94,31,106, 
  /* [36][0][][] */ -48,-104,127,29,55,58,0,-36, 
  /* [37][0][][] */ -3,11,-24,0,-13,-54,-44,127, 
  /* [38][0][][] */ 127,3,50,9,-1,18,-61,32, 
  /* [39][0][][] */ 59,92,-112,-127,-107,86,47,-67, 
  /* [40][0][][] */ -53,127,-35,71,-52,-31,-60,-20, 
  /* [41][0][][] */ -127,38,-28,-51,60,43,0,-62, 
  /* [42][0][][] */ 46,-33,-5,-22,-24,127,15,84, 
  /* [43][0][][] */ -77,45,127,18,76,22,-41,5, 
  /* [44][0][][] */ 7,127,-3,31,-47,-60,-16,-4, 
  /* [45][0][][] */ -73,84,68,-127,-77,13,-65,-54, 
  /* [46][0][][] */ 39,-41,-15,24,28,8,-127,68, 
  /* [47][0][][] */ -99,-127,30,68,52,-87,15,87, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0030343360267579556, 0.0029046020936220884, 0.0029139372054487467, 0.004247832577675581, 0.0028567819390445948, 0.0027028953190892935, 0.0013191374018788338, 0.0021775329951196909, 0.0034739789552986622, 0.0019923148211091757, 0.0027955214027315378, 0.0036113825626671314, 0.0014286930672824383, 0.0051350179128348827, 0.0047240899875760078, 0.002147826598957181, 0.0058258417993783951, 0.0017491994658485055, 0.0029278798028826714, 0.0029480867087841034, 0.0030783796682953835, 0.00060609460342675447, 0.0029572967905551195, 0.0022247890010476112, 0.0029228557832539082, 0.0019207134610041976, 0.0028825676999986172, 0.0031833043321967125, 0.0039351461455225945, 0.0044661662541329861, 0.0022684840951114893, 0.0023889143485575914, 0.0024042928125709295, 0.0046144993975758553, 0.0016040282789617777, 0.0008484071004204452, 0.0024835371877998114, 0.0016650240868330002, 0.0021948621142655611, 0.002177045214921236, 0.0036067133769392967, 0.0034498663153499365, 0.0029562357813119888, 0.0036451842170208693, 0.0025611065793782473, 0.0024261546786874533, 0.0022551135625690222, 0.002072193892672658, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 7244, -11954, -930, 6122, 1909, -5703, 3269, 7885, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00022898064344190061, 0.0001607721351319924, 0.00010370191739639267, 0.00016371208766940981, 0.00024909767671488225, 0.00012377135863061994, 0.00020175501413177699, 9.4816299679223448e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -26,-8,-9,-32,-68,-16,-4,-21,64,7,10,-3,10,15,-20,2,-33,13,-17,-14,-3,10,-23,1,19,-9,83,9,-16,-86,-14,10,-2,35,127,-11,-27,-41,26,-40,24,3,-3,-19,-19,0,-19,-87, 
  /* [1][0][][] */ 16,-32,-11,59,1,-9,20,38,65,75,41,-48,-51,71,6,1,-6,-31,19,-20,-63,40,-47,31,88,11,-30,35,24,2,127,22,-14,-38,-34,-3,-17,7,-24,-14,-1,-21,2,26,-5,37,30,20, 
  /* [2][0][][] */ -65,3,-74,119,-63,-67,27,-60,-77,41,54,-97,-25,-5,-48,10,122,34,-71,-49,-67,-22,-40,21,80,-32,126,-10,84,-17,-69,22,-3,-24,57,-1,-47,29,-1,-102,61,-68,-56,-127,-19,-70,-70,106, 
  /* [3][0][][] */ 25,-48,13,-40,37,-20,-10,-72,46,-62,1,-28,-86,-76,-19,11,10,-10,40,-41,-8,31,-81,4,73,-36,50,13,8,0,-3,-23,-39,35,22,-31,-51,23,1,-5,127,17,-50,37,-52,50,-10,-53, 
  /* [4][0][][] */ 24,8,16,16,10,35,-9,-7,45,23,6,-46,-1,6,-67,22,-2,20,24,-22,-24,27,5,42,35,6,-28,5,48,-10,-19,29,-6,-2,34,22,-127,2,54,14,14,-8,1,16,-36,49,-30,-95, 
  /* [5][0][][] */ -39,-97,31,115,-30,-3,-51,99,-95,80,50,29,-77,24,66,-39,-14,30,26,0,-5,32,41,49,-50,11,-25,40,-45,-97,40,26,-104,-47,-28,2,127,2,-22,15,-36,-15,86,98,21,39,44,46, 
  /* [6][0][][] */ 83,-2,-15,-13,81,-25,-29,-63,40,24,33,-28,-7,8,6,2,-1,-1,-11,-25,-33,17,13,23,55,-55,46,0,-24,103,-18,10,43,25,-127,-16,-89,-34,24,-65,-10,-5,-7,-92,-2,4,-20,-11, 
  /* [7][0][][] */ -37,-81,55,-52,11,127,49,-57,1,-99,-51,-4,2,-25,-60,-6,15,-59,111,70,45,-40,5,-7,-21,8,107,-1,48,20,14,-5,-33,-32,-55,110,-126,98,-39,-38,-55,51,4,-70,23,-15,74,-35, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0097316773608326912, 0.0068328157067298889, 0.0044073313474655151, 0.0069577633403241634, 0.010586651042103767, 0.0052602826617658138, 0.0085745882242918015, 0.0040296926163136959, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 9126, 4487, -657, 7059, -173, -1682, 5591, -1023, 1849, 4757, -50, -89, -1858, 12136, 4237, -1275, -6617, -362, -2550, -1274, 10874, 24, -16359, -759, -5443, 3064, 592, 261, -1528, -1307, -7250, -113, 15287, -1656, 1789, 1561, -1802, 644, -963, 2033, 16660, 128, 1641, -229, 578, -310, -3997, 7219, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0002591547672636807, 0.00027853524079546332, 0.00017757843306753784, 0.0003551095724105835, 0.00041116253123618662, 0.00045043713180348277, 0.00011168487253598869, 0.00024326291168108582, 7.6045922469347715e-05, 0.00022716503008268774, 0.0003266655548941344, 0.00047566203284077346, 0.00024065643083304167, 0.00014949402248021215, 0.00022341753356158733, 0.00034350962960161269, 5.8014440583065152e-05, 0.0018528887303546071, 0.00038590573240071535, 0.00016922796203289181, 0.0001056543187587522, 0.00052267685532569885, 0.00011553108197404072, 0.00016644661081954837, 0.00028835533885285258, 0.00022863557387609035, 0.00027172043337486684, 0.00023936553043313324, 0.00048705251538194716, 0.00022897811140865088, 0.00017887906869873405, 0.0005254457937553525, 6.8473156716208905e-05, 0.00035843974910676479, 0.0001950231526279822, 0.00072679080767557025, 0.00014597429253626615, 0.00019753264496102929, 0.00081962288822978735, 0.00035435857716947794, 5.5654847528785467e-05, 0.00033784241531975567, 0.00018808302411343902, 0.00014607699995394796, 0.00030357204377651215, 0.00024634719011373818, 0.00014098329120315611, 0.00039440658292733133, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -64,43,-44,-52,-7,-15,12,-11,-3,-15,5,41,-4,-102,-101,28,127,-1,61,46,-94,-59,103,-109,-6,-54,-7,99,-12,13,41,127,-14,-7,-19,7,-14,-42,-6,18,123,-83,-44,49,71,-105,-33,-5, -7,-127,33,-127,-2,-19,-79,127,64,-77,20,40,15,-127,-103,18,-31,11,-23,-78,-70,-1,72,127,12,-14,11,127,25,-5,11,-100,-87,28,-11,-19,127,-127,53,-9,1,-119,-51,31,95,71,30,-36, -21,-4,16,-24,-3,36,16,66,-5,15,-1,30,24,36,-85,30,80,12,-23,21,-123,47,69,19,-4,66,2,-51,-22,-1,13,-35,-43,6,-3,7,-28,125,-13,12,80,-56,21,-28,63,40,-44,-14, 
  /* [0][1][][] */ -35,-24,-127,-13,-29,25,0,5,32,-65,-5,-105,-29,-56,-127,127,105,4,127,93,-8,127,123,117,6,-64,-38,1,48,-35,43,-104,-1,-23,-60,5,-3,-102,46,19,93,127,-15,-12,-69,127,61,-34, -127,44,123,120,127,-118,-127,-8,-19,-127,-127,-127,127,-23,-6,43,23,-127,-93,-127,127,-12,-77,-93,127,-47,127,-61,127,127,-34,75,-127,-127,127,-127,90,-83,-127,-127,25,108,-93,14,-127,-71,127,127, -17,2,5,24,40,127,-19,55,67,11,51,-51,-13,-17,-74,-13,82,49,-2,59,-59,-113,127,-22,10,127,16,-4,42,28,127,28,13,14,56,9,-20,90,52,-9,-2,71,127,-11,-49,-54,58,-9, 
  /* [0][2][][] */ -27,2,-63,-8,-4,-13,20,-10,43,20,3,46,-6,-15,75,7,20,0,60,16,-59,-5,74,35,-1,-62,-13,-81,1,-12,-1,-34,-13,58,-12,-8,-69,4,-5,5,27,-10,-34,-61,-20,14,-60,-39, -10,-48,47,-4,-81,-20,-80,-91,127,69,46,53,-11,-47,23,15,87,100,-29,-13,-80,-1,27,-23,3,-60,-67,-91,-16,-33,92,28,-60,53,-73,-21,28,-111,33,41,-127,-14,-108,127,24,-1,47,-52, 17,-14,14,-4,-41,27,19,-91,11,-8,-19,24,4,22,100,-119,54,-23,-21,-10,-61,10,28,0,-1,24,-30,6,-7,-26,24,15,-22,52,-48,-5,-103,97,-19,25,3,-23,43,53,-17,-16,-70,-25, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011014077812433243, 0.011837746948003769, 0.0075470833107829094, 0.015092156827449799, 0.017474407330155373, 0.019143577665090561, 0.0047466070391237736, 0.010338673368096352, 0.0032319517340511084, 0.0096545135602355003, 0.013883286155760288, 0.020215636119246483, 0.010227898135781288, 0.0063534956425428391, 0.0094952452927827835, 0.014599159359931946, 0.0024656136520206928, 0.078747771680355072, 0.016400992870330811, 0.0071921879425644875, 0.0044903084635734558, 0.022213766351342201, 0.0049100709147751331, 0.0070739807561039925, 0.012255101464688778, 0.0097170118242502213, 0.011548117734491825, 0.010173034854233265, 0.020699732005596161, 0.0097315693274140358, 0.0076023605652153492, 0.022331446409225464, 0.0029101092368364334, 0.015233688987791538, 0.0082884840667247772, 0.03088860958814621, 0.0062039070762693882, 0.0083951372653245926, 0.034833971410989761, 0.015060239471495152, 0.002365330932661891, 0.01435830257833004, 0.0079935286194086075, 0.0062082721851766109, 0.012901811860501766, 0.010469755157828331, 0.0059917899779975414, 0.016762278974056244, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3258, 1001, 3152, 7867, 270, 4499, 1482, 1381, 1741, 4106, 2616, 4349, 2449, 1292, 2878, -70, 187, -2220, 6489, 2012, 1306, 4783, 7927, 422, 2727, 2697, 1596, -82, -1256, 1056, 5741, 2059, 1064, 809, 691, -378, 625, 1688, 15, 1410, 1228, 4519, 1704, 537, 2814, 1059, -124, 9464, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00028345559258013964, 0.00055641285143792629, 0.00023814101587049663, 0.00014216236013453454, 0.0014883952680975199, 0.00016289175255224109, 0.00043011768138967454, 0.0004122626269236207, 0.00031363425659947097, 0.00018471166549716145, 0.00027285641408525407, 0.00013908463006373495, 0.00031462928745895624, 0.00027759713702835143, 0.00020253224647603929, 0.00032400622148998082, 0.00042717950418591499, 0.00034318683901801705, 0.00015553008415736258, 0.00049220334040001035, 0.00053320871666073799, 0.00017244665650650859, 0.00011117292888229713, 0.00040027647628448904, 0.0002196730492869392, 0.00035367152304388583, 0.00042176464921794832, 0.00028840941376984119, 0.00033868764876388013, 0.00086200382793322206, 0.00016729542403481901, 0.00038050400326028466, 0.00058198487386107445, 0.00033422952401451766, 0.00091885891743004322, 0.0003155978920403868, 0.00025049448595382273, 0.00023338691971730441, 0.00026503496337682009, 0.00047758533037267625, 0.00033887370955199003, 0.00018338578229304403, 0.00022987066768109798, 0.00038658664561808109, 0.0002028807793976739, 0.00047959320363588631, 0.00045128288911655545, 0.00010735533578554168, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -127,-15,34,-115,-124,121,-3,-60, 
  /* [1][0][][] */ 88,3,23,-27,2,57,-127,40, 
  /* [2][0][][] */ -40,44,-108,82,-56,127,21,47, 
  /* [3][0][][] */ 96,-29,-33,72,0,-66,13,127, 
  /* [4][0][][] */ -80,-6,-4,13,-21,-36,127,4, 
  /* [5][0][][] */ 50,127,31,46,-123,-59,5,-26, 
  /* [6][0][][] */ -6,-63,34,127,16,-96,-18,34, 
  /* [7][0][][] */ 127,1,97,-3,-78,28,73,116, 
  /* [8][0][][] */ -32,-127,48,47,76,-35,-25,1, 
  /* [9][0][][] */ -83,-104,20,-25,-21,0,-53,127, 
  /* [10][0][][] */ -33,-125,25,109,71,127,11,-20, 
  /* [11][0][][] */ -127,-111,24,-58,59,60,-38,126, 
  /* [12][0][][] */ 77,-19,87,-77,28,-127,75,0, 
  /* [13][0][][] */ 30,19,25,127,-7,13,32,-58, 
  /* [14][0][][] */ -47,-4,44,6,127,-22,-6,121, 
  /* [15][0][][] */ -77,127,38,85,53,105,-37,84, 
  /* [16][0][][] */ -2,-30,-58,-127,-55,55,15,56, 
  /* [17][0][][] */ 19,127,-2,63,-24,-43,-2,15, 
  /* [18][0][][] */ 15,37,-7,-127,-41,-93,20,-14, 
  /* [19][0][][] */ 30,-82,-127,-103,-83,113,17,-9, 
  /* [20][0][][] */ 29,5,15,-7,127,25,36,-35, 
  /* [21][0][][] */ -127,-64,-59,-93,51,31,46,-13, 
  /* [22][0][][] */ -64,-46,82,126,46,-45,-54,127, 
  /* [23][0][][] */ 23,42,-38,124,127,27,34,104, 
  /* [24][0][][] */ 127,-2,-119,-19,-4,-18,46,-42, 
  /* [25][0][][] */ 6,-10,-46,-21,71,-26,-127,-60, 
  /* [26][0][][] */ 127,9,112,-38,-90,44,57,119, 
  /* [27][0][][] */ 27,-64,-42,127,34,3,-20,-120, 
  /* [28][0][][] */ -62,127,80,68,63,-19,-26,8, 
  /* [29][0][][] */ -1,-1,54,4,-74,2,127,68, 
  /* [30][0][][] */ -52,-75,48,-71,-83,127,66,41, 
  /* [31][0][][] */ 114,17,88,-21,-100,78,83,127, 
  /* [32][0][][] */ -110,-15,-28,34,-21,22,127,23, 
  /* [33][0][][] */ -127,123,53,83,30,25,-84,6, 
  /* [34][0][][] */ 119,6,22,-16,5,49,-127,15, 
  /* [35][0][][] */ 3,-2,19,32,-44,29,13,-127, 
  /* [36][0][][] */ 21,-3,-70,-114,44,-23,26,127, 
  /* [37][0][][] */ 54,-42,-42,-56,-25,37,58,-127, 
  /* [38][0][][] */ 23,127,15,116,-74,-83,-17,-20, 
  /* [39][0][][] */ 107,-7,111,-14,-91,36,127,120, 
  /* [40][0][][] */ -71,-75,127,111,-14,-26,-91,28, 
  /* [41][0][][] */ 36,-11,16,17,21,-74,-17,127, 
  /* [42][0][][] */ 49,-89,-85,-83,-56,75,36,-127, 
  /* [43][0][][] */ 99,-2,121,-30,-89,-20,119,127, 
  /* [44][0][][] */ -111,-94,-78,127,97,-14,-82,33, 
  /* [45][0][][] */ 127,-12,82,-22,-37,28,-7,77, 
  /* [46][0][][] */ 57,-127,-5,94,126,9,68,7, 
  /* [47][0][][] */ 64,127,-17,111,-29,-75,26,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0029086938593536615, 0.0057096583768725395, 0.0024436959065496922, 0.0014588062185794115, 0.015273242257535458, 0.0016715219244360924, 0.0044136741198599339, 0.0042304536327719688, 0.003218373516574502, 0.0018954280531033874, 0.0027999298181384802, 0.0014272239059209824, 0.0032285840716212988, 0.0028485767543315887, 0.0020782947540283203, 0.0033248059917241335, 0.0043835239484906197, 0.0035216289106756449, 0.0015959796728566289, 0.0050507690757513046, 0.0054715480655431747, 0.0017695700516924262, 0.0011408065911382437, 0.0041074571199715137, 0.0022541859652847052, 0.0036292178556323051, 0.0043279589153826237, 0.0029595275409519672, 0.0034754602238535881, 0.0088454950600862503, 0.0017167102778330445, 0.0039045608136802912, 0.0059720668941736221, 0.0034297129604965448, 0.0094289164990186691, 0.0032385236117988825, 0.0025704617146402597, 0.0023949116002768278, 0.0027196696028113365, 0.0049007656052708626, 0.0034773694351315498, 0.0018818223616108298, 0.0023588293697685003, 0.0039669782854616642, 0.0020818712655454874, 0.0049213697202503681, 0.0046308618038892746, 0.0011016321368515491, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4528, 2722, 2744, 10642, 4543, 5396, 2475, -3054, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00013006814697291702, 0.00012116623111069202, 0.0001531895250082016, 0.00015105142665561289, 0.00013295463577378541, 0.00010230355110252276, 9.8520598839968443e-05, 0.00025965058011934161, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -28,36,-30,-1,-46,-26,-79,25,8,21,36,38,36,4,-46,11,-45,43,12,-62,30,42,-127,3,-9,10,-31,45,-6,-10,23,22,15,-23,34,18,0,107,-67,-18,-13,21,-30,27,6,7,19,-3, 
  /* [1][0][][] */ -81,-100,-59,6,88,-25,-127,58,-22,-34,-13,-81,-19,77,8,-13,119,-123,-8,-23,-60,-1,-1,-20,27,-9,-33,-49,21,-19,-115,-27,25,-63,-82,-100,41,13,-97,-5,3,42,15,83,-12,4,1,45, 
  /* [2][0][][] */ 5,-73,12,56,113,20,97,-7,-36,-30,-7,-50,0,-28,22,34,-35,-94,43,-57,4,-67,-59,12,-72,62,71,-100,-39,-2,-60,-46,17,3,-71,-50,-4,127,76,-37,-14,10,-26,-74,43,34,49,-23, 
  /* [3][0][][] */ 11,1,24,-15,34,32,24,-95,25,18,-12,10,2,-117,-12,3,-25,7,-19,1,-7,52,-127,4,20,-101,37,31,46,-12,-29,55,1,12,-6,-36,-104,-49,12,-13,-6,-1,40,7,-15,5,1,-53, 
  /* [4][0][][] */ 31,-56,11,70,50,12,-31,-5,-38,-14,25,-31,73,38,-17,31,-42,-64,64,37,34,-49,127,25,-31,8,-51,-14,-11,16,-77,-40,81,-26,-46,-64,-46,-48,-24,0,-64,96,-2,-5,56,83,44,22, 
  /* [5][0][][] */ -63,-22,-37,53,-7,9,-4,-50,-63,-34,-6,-21,16,41,-77,15,127,-15,57,-81,29,-96,-9,-1,88,-115,-105,-11,57,-49,35,-79,14,-59,-35,28,-78,-18,18,-33,-45,30,98,45,43,22,25,-38, 
  /* [6][0][][] */ -31,7,-36,35,-23,75,-72,8,-19,-1,-127,8,47,36,119,20,21,8,43,-14,39,-17,-49,-15,12,2,-72,17,2,-52,6,-24,35,-44,9,7,-2,-5,-54,-22,-33,44,-22,29,29,29,33,0, 
  /* [7][0][][] */ 32,-4,39,-17,3,6,13,-11,14,5,-9,-2,-10,-7,-3,-13,11,-3,-24,-20,-20,14,127,14,5,-13,-1,9,7,-10,-21,13,-1,21,1,-18,-9,14,8,28,5,-3,9,-3,-16,-2,-24,17, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.005527895875275135, 0.0051495647057890892, 0.006510554812848568, 0.0064196856692433357, 0.0056505720131099224, 0.0043479008600115776, 0.0041871252469718456, 0.011035148985683918, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 4195, 72, 389, -47, 8195, 3284, -58, 4101, 4138, -278, -585, 1402, 527, -104, -780, 416, 12085, 439, 141, 34736, -454, 15151, 1151, 71, -44, -8500, 9035, -198, 354, -369, 1471, 8043, 558, -618, 863, 557, 8333, -1633, 3147, 749, 370, -752, 20106, -7378, 989, -336, 304, 688, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.0319529438856989e-05, 0.00018963310867547989, 0.0010153880575671792, 0.00082481687422841787, 0.0001237480464624241, 0.00015549645468126982, 8.3335493400227278e-05, 0.00032087945146486163, 0.00015138601884245872, 0.0004383876221254468, 5.6584154663141817e-05, 0.00067129905801266432, 0.00086278270464390516, 0.0001453357981517911, 0.00012903522292617708, 0.0086831329390406609, 0.00015239375352393836, 0.00020761258201673627, 0.0003645780379883945, 9.0093104518018663e-05, 0.0006333443452604115, 9.59110984695144e-05, 0.00028403775650076568, 0.00010960552754113451, 0.00015497364802286029, 0.00073401123518124223, 0.00012190842971904203, 0.00032343517523258924, 0.00094204844208434224, 0.00047315965639427304, 0.00014161021681502461, 9.6923511591739953e-05, 0.001016142894513905, 0.00043730373727157712, 0.00019170640734955668, 0.00024083863536361605, 0.00014285897486843169, 6.8833825935143977e-05, 8.9566208771429956e-05, 0.00021922461746726185, 0.0003502947511151433, 0.00034562629298307002, 6.1710226873401552e-05, 0.00015728909056633711, 0.00084906013216823339, 0.000589617935474962, 0.0051297927275300026, 0.0004789558588527143, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 106,-38,-72,-98,22,-100,66,-59,68,20,96,45,-98,62,55,-119,78,-97,0,-47,-127,-54,34,111,-2,69,-11,61,-127,-17,89,-82,-49,-59,46,82,-127,49,110,77,-46,-127,-73,44,-70,-29,5,-82, 87,-57,77,127,86,34,121,-126,-79,98,59,65,-3,60,59,115,80,-96,-104,-57,93,-96,49,2,116,127,-39,79,9,50,82,-49,44,113,127,127,-96,45,86,-33,85,29,-48,105,127,112,-6,-12, 25,-26,-3,-42,35,52,21,-88,-16,44,-84,29,88,-8,-62,-3,32,-35,91,-19,39,5,-84,-90,26,10,-10,24,36,71,34,8,-7,-47,31,34,-19,11,14,-66,-56,113,6,83,-61,-70,-2,72, 
  /* [0][1][][] */ 119,70,-127,23,-80,-127,71,-72,99,-71,127,-96,90,93,127,121,-44,113,-8,-91,120,-78,46,127,-12,-5,-32,20,-58,86,69,-127,-127,-68,-23,34,-17,104,127,127,-53,-79,-127,49,-7,-22,-127,-127, 127,127,115,-15,-127,10,127,-127,-127,-127,87,-127,37,127,101,-127,-37,127,127,-127,-66,-127,71,-37,63,10,-127,71,12,127,127,-102,115,127,-30,11,-27,127,109,-50,127,-4,-51,127,-14,127,120,40, 26,50,-3,15,-32,75,25,-84,-8,-93,-85,-74,-127,1,-71,-1,37,33,-102,-56,-50,-10,-127,-105,-39,5,-70,21,42,89,29,7,6,-63,-10,2,-3,36,19,-86,-62,99,-10,104,5,-79,3,90, 
  /* [0][2][][] */ 41,-40,-28,-8,46,-24,8,-22,73,25,29,41,5,55,-10,-17,-127,-29,-9,-18,19,-40,9,46,85,-18,-18,-95,24,51,-7,-80,-25,-39,-70,-3,71,24,32,72,-101,-54,-123,35,-2,0,89,-65, 19,-63,6,-6,41,3,31,-52,-83,68,-1,56,-22,66,-4,9,-95,-24,-17,-53,-29,-71,28,-8,127,-14,-50,-127,21,73,2,-58,29,81,-59,14,76,47,27,-29,-61,3,-55,92,-8,-4,-100,56, -3,-28,20,3,12,20,8,-18,-8,51,-34,24,14,-12,-19,-2,25,-6,15,-37,12,2,-41,-51,-10,-8,-18,-41,18,62,-6,11,-2,-40,-39,0,64,21,-2,-47,-101,58,-24,49,2,8,2,10, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0025635799393057823, 0.008059406653046608, 0.043153990060091019, 0.035054717212915421, 0.005259291734546423, 0.0066085993312299252, 0.0035417585168033838, 0.013637376949191093, 0.0064339055679738522, 0.018631473183631897, 0.0024048264604061842, 0.028530208393931389, 0.036668263375759125, 0.006176771130412817, 0.0054839965887367725, 0.36903312802314758, 0.0064767342992126942, 0.0088235344737768173, 0.015494566410779953, 0.0038289569783955812, 0.02691713348031044, 0.0040762214921414852, 0.012071603909134865, 0.0046582347713410854, 0.0065863798372447491, 0.031195476651191711, 0.0051811081357300282, 0.013745995238423347, 0.040037058293819427, 0.020109284669160843, 0.0060184341855347157, 0.0041192490607500076, 0.043186072260141373, 0.018585408106446266, 0.0081475218757987022, 0.010235642082989216, 0.006071506068110466, 0.0029254374094307423, 0.0038065637927502394, 0.0093170460313558578, 0.014887526631355286, 0.014689117670059204, 0.0026226844638586044, 0.0066847861744463444, 0.036085054278373718, 0.025058761239051819, 0.21801619231700897, 0.020355623215436935, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -966, -8134, 9534, 3416, 10226, 3037, 3173, 362, -1523, -7250, 660, 4586, 19414, -11607, 133, 12126, -7109, -779, 1707, 6780, 8461, 2996, 1008, 496, 11610, 25160, 9793, -11064, 1919, -889, -4, -3274, 18492, 7901, 10976, -1503, -10579, 341, -3814, 282, -12207, -9313, -1470, 2458, 7350, -11300, 11251, -1533, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00031005337950773537, 0.00029101234395056963, 9.1399437224026769e-05, 0.00029864211683161557, 0.00029174570227041841, 0.00070102419704198837, 0.00099699862767010927, 0.00059911172138527036, 0.00065933336736634374, 0.00037743058055639267, 0.0015522236935794353, 0.00026614728267304599, 7.3825962317641824e-05, 0.00035664107417687774, 0.00063015217892825603, 3.0987397622084245e-05, 0.00026884055114351213, 0.00042621421744115651, 0.00041754363337531686, 0.00022333124070428312, 0.00015016300312709063, 0.0014342132490128279, 0.00041960729868151248, 0.00083010731032118201, 0.00021716297487728298, 7.9354409535881132e-05, 0.00041769086965359747, 0.00030919472919777036, 0.00095811981009319425, 0.00045226569636724889, 0.0010651795892044902, 0.0014220526209101081, 0.00012079084990546107, 0.00028527792892418802, 0.00031141846557147801, 0.00080777518451213837, 0.00043868937063962221, 0.00038917118217796087, 0.001012589200399816, 0.00034570941352285445, 0.00032866880064830184, 0.00026978552341461182, 0.00033955412800423801, 0.00039405998541042209, 0.00013994044275023043, 0.00027602858608588576, 3.3205589716089889e-05, 0.0006166631355881691, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 16,47,8,-19,96,-25,127,-3, 
  /* [1][0][][] */ 127,81,73,18,-7,-41,3,118, 
  /* [2][0][][] */ -61,16,-3,127,13,-19,-30,53, 
  /* [3][0][][] */ 51,-37,-127,-7,-3,-43,21,126, 
  /* [4][0][][] */ -117,85,-127,-17,18,21,-39,-41, 
  /* [5][0][][] */ 127,-18,-4,-48,-2,-30,7,-126, 
  /* [6][0][][] */ 5,-9,-7,-3,-127,-26,56,4, 
  /* [7][0][][] */ -6,-62,-3,0,-24,1,-127,-1, 
  /* [8][0][][] */ -13,25,34,-6,127,15,-63,-18, 
  /* [9][0][][] */ 127,-39,26,-3,1,-32,48,110, 
  /* [10][0][][] */ 127,7,-6,-39,-3,11,-1,-124, 
  /* [11][0][][] */ -53,0,-3,127,-3,-43,-37,32, 
  /* [12][0][][] */ -127,4,-78,-25,14,104,-61,-122, 
  /* [13][0][][] */ 123,9,127,17,-10,20,21,44, 
  /* [14][0][][] */ -127,-5,13,15,0,-14,7,123, 
  /* [15][0][][] */ -127,9,4,120,-3,-4,-24,123, 
  /* [16][0][][] */ 60,-72,127,64,-14,-106,31,72, 
  /* [17][0][][] */ 19,-51,-77,127,1,20,-9,115, 
  /* [18][0][][] */ 20,-31,-115,41,-19,-1,34,127, 
  /* [19][0][][] */ 24,18,-13,127,-6,2,-69,-48, 
  /* [20][0][][] */ 17,53,108,-117,10,-68,11,-127, 
  /* [21][0][][] */ 4,-1,-8,1,-127,-13,53,1, 
  /* [22][0][][] */ 1,56,-3,-11,2,127,-12,0, 
  /* [23][0][][] */ 118,24,-8,94,-4,1,-46,-127, 
  /* [24][0][][] */ -127,20,-92,-38,18,-43,-47,-66, 
  /* [25][0][][] */ -44,-8,-66,-45,2,-127,7,-50, 
  /* [26][0][][] */ -102,-25,-127,11,11,3,-18,-37, 
  /* [27][0][][] */ 103,7,127,20,-5,43,19,41, 
  /* [28][0][][] */ 6,-60,-20,39,29,-127,5,14, 
  /* [29][0][][] */ -5,-8,25,-127,-17,-5,20,-2, 
  /* [30][0][][] */ -42,5,127,-6,0,5,-6,-118, 
  /* [31][0][][] */ 1,13,3,1,127,24,-55,-2, 
  /* [32][0][][] */ -127,-20,-108,-9,-2,-33,-27,-63, 
  /* [33][0][][] */ 11,-51,4,-30,37,-127,15,-21, 
  /* [34][0][][] */ -56,-117,-127,60,0,-55,-14,-23, 
  /* [35][0][][] */ 54,8,-114,-3,4,-2,10,127, 
  /* [36][0][][] */ 66,37,84,33,6,127,12,29, 
  /* [37][0][][] */ -10,17,-5,127,8,-20,-14,9, 
  /* [38][0][][] */ 2,24,9,-1,127,26,-36,1, 
  /* [39][0][][] */ -9,9,-12,23,-33,127,-109,-7, 
  /* [40][0][][] */ 127,-19,121,20,-23,30,15,60, 
  /* [41][0][][] */ 115,2,127,25,-8,1,34,47, 
  /* [42][0][][] */ 58,-60,-15,-39,29,127,21,-29, 
  /* [43][0][][] */ -8,-62,-6,3,-45,-19,-127,2, 
  /* [44][0][][] */ -24,-127,38,94,16,40,12,-118, 
  /* [45][0][][] */ 119,11,127,-4,-7,33,26,46, 
  /* [46][0][][] */ -86,14,5,127,2,6,-39,71, 
  /* [47][0][][] */ -4,49,-10,-3,-2,127,-18,2, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0031916988082230091, 0.0029956898652017117, 0.00094086857279762626, 0.0030742310918867588, 0.0030032391659915447, 0.007216364610940218, 0.010263134725391865, 0.006167274434119463, 0.0067871976643800735, 0.0038852819707244635, 0.015978638082742691, 0.002739728195592761, 0.00075996672967448831, 0.0036712740547955036, 0.006486805621534586, 0.00031898519955575466, 0.0027674529701471329, 0.0043874620459973812, 0.0042982068844139576, 0.0022989786230027676, 0.0015457825502380729, 0.01476383488625288, 0.0043194503523409367, 0.0085451500490307808, 0.0022354822140187025, 0.00081687670899555087, 0.0042997226119041443, 0.0031828598584979773, 0.0098629146814346313, 0.0046556368470191956, 0.010964990593492985, 0.01463865302503109, 0.0012434247182682157, 0.0029366596136242151, 0.0032057510688900948, 0.0083152623847126961, 0.0045158816501498222, 0.0040061399340629578, 0.010423623956739902, 0.00355874327942729, 0.0033833265770226717, 0.0027771804016083479, 0.0034953805152326822, 0.0040564653463661671, 0.0014405511319637299, 0.0028414465487003326, 0.00034181933733634651, 0.0063479491509497166, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1478, 541, -567, -9053, -64, -888, -233, 4170, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021900661522522569, 0.00026237071142531931, 0.00034595304168760777, 0.00018533907132223248, 0.00024504566681571305, 0.00012689891445916146, 0.0003322116972412914, 0.00019170789164490998, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -12,-13,-21,13,-9,-127,10,38, 
  /* [1][0][][] */ -63,22,-127,121,9,63,-18,36, 
  /* [2][0][][] */ 6,-10,25,-2,-10,-127,10,25, 
  /* [3][0][][] */ 24,53,53,127,16,-40,-44,-14, 
  /* [4][0][][] */ 16,60,21,-16,-127,-12,22,-3, 
  /* [5][0][][] */ 64,-27,127,-103,19,-58,-5,-46, 
  /* [6][0][][] */ 26,127,44,-39,38,-10,-66,-22, 
  /* [7][0][][] */ -22,-25,-42,-16,-12,-127,21,43, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0093077812343835831, 0.011150754988193512, 0.014703003689646721, 0.0078769102692604065, 0.010414441116154194, 0.0053932038135826588, 0.014118996448814869, 0.0081475852057337761, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 6506, 208, 234, 1511, 13908, 609, 627, 1986, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00010189387103309855, 0.00047139465459622443, 0.00017344311345368624, 0.00054224376799538732, 0.00018785041174851358, 0.00027447359752841294, 0.00057757779723033309, 9.4551651272922754e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -19,-6,5,-1,-5,27,1,-5, 15,-1,5,-6,6,127,12,127, 7,0,6,-8,-4,17,2,4, 
  /* [0][1][][] */ 7,-127,-6,4,-18,-6,-105,-6, -127,98,-78,127,-127,-8,127,-38, 13,-2,-3,-64,-8,1,47,-26, 
  /* [0][2][][] */ 19,-4,2,-3,-5,-23,9,-8, 59,-3,127,-21,8,-114,5,7, 9,-1,-6,-8,-5,-20,-4,-4, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0043304893188178539, 0.020034272223711014, 0.0073713320307433605, 0.023045359179377556, 0.0079836426302790642, 0.011665127240121365, 0.02454705536365509, 0.0040184450335800648, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 49409, -1301, 39305, 20177, 14993, 567531, 14805, 37882, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 6.4360036049038172e-05, 4.2791190935531631e-05, 9.2272101028356701e-05, 2.6240495571983047e-05, 0.00012086017522960901, 5.971865448373137e-06, 8.0798354247235693e-06, 8.0788129707798362e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-3,12, 8,-24,30, 12,-24,21, 
  /* [0][1][][] */ 39,29,26, 65,18,58, 24,-33,38, 
  /* [0][2][][] */ -21,-92,-13, -30,-127,-1, -8,-56,17, 
  /* [1][0][][] */ 32,76,25, 7,9,-2, -30,-69,-26, 
  /* [1][1][][] */ 54,123,40, 3,0,-3, -54,-127,-39, 
  /* [1][2][][] */ 30,45,12, 5,-1,0, -32,-53,-3, 
  /* [2][0][][] */ 44,92,11, 54,127,13, 17,43,-1, 
  /* [2][1][][] */ -46,-83,-28, -80,-93,-38, -30,-6,-21, 
  /* [2][2][][] */ 1,11,7, 5,16,0, 1,11,-6, 
  /* [3][0][][] */ 46,-29,-14, 79,-34,-37, 31,-16,-11, 
  /* [3][1][][] */ 81,-53,-34, 127,-52,-71, 59,-27,-27, 
  /* [3][2][][] */ 21,-19,-2, 43,-26,-14, 17,-10,0, 
  /* [4][0][][] */ -12,-23,-5, 27,45,9, -16,-29,-4, 
  /* [4][1][][] */ -28,-60,-9, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 22,25,-3, -11,-13,-2, 
  /* [5][0][][] */ -34,-64,-39, -55,-91,-58, -43,-33,-30, 
  /* [5][1][][] */ -58,-106,-50, -83,-127,-66, -47,-35,-31, 
  /* [5][2][][] */ 4,10,-8, 2,5,-4, 2,16,5, 
  /* [6][0][][] */ -98,-2,39, 5,24,-12, 70,21,-18, 
  /* [6][1][][] */ -127,-32,47, 17,24,-25, 113,20,-29, 
  /* [6][2][][] */ -48,-10,21, 19,-4,1, 38,-9,34, 
  /* [7][0][][] */ -5,16,-2, -15,23,-7, -6,21,-8, 
  /* [7][1][][] */ 18,84,-6, 23,127,-22, -2,60,-27, 
  /* [7][2][][] */ -27,-50,-20, -42,-52,-32, -19,4,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.016411807388067245, 0.01091175340116024, 0.023529384285211563, 0.0066913259215652943, 0.030819343402981758, 0.0015228255651891232, 0.0020603579469025135, 0.020600972697138786, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.09782911092042923, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.097143679857254028, } };
const TfArray<1, int> quant47_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.097451165318489075, } };
const TfArray<1, int> quant51_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.079410091042518616, } };
const TfArray<1, int> quant54_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10099518299102783, } };
const TfArray<1, int> quant55_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.074894383549690247, } };
const TfArray<1, int> quant59_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.032551851123571396, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.072727419435977936, } };
const TfArray<1, int> quant63_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.021478934213519096, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.039569228887557983, } };
const TfArray<1, int> quant66_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.088347524404525757, } };
const TfArray<1, int> quant67_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.01998051255941391, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.048441130667924881, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.046679578721523285, } };
const TfArray<1, int> quant70_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_33_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
