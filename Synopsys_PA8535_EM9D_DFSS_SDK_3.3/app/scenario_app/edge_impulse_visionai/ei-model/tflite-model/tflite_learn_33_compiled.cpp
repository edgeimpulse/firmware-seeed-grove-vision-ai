/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 07.08.2024 12:44:26

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238592;
#else
constexpr int kTensorArenaSize = 237568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 25849, -28439, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00017986312741413713, 0.00016307859914377332, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 71,-48,-64,126,-94,-4,-43,48,109,-13,-55,-36,-28,55,-38,14,127,-47,-33,-60,100,50,97,-77,-59,-53,-18,70,20,-89,15,78, 
  /* [1][0][][] */ 54,85,87,-74,-74,88,-11,21,-37,-15,48,121,127,52,33,0,-44,-20,-63,-109,-81,48,35,124,88,79,-55,-4,110,-109,-119,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0037111921701580286, 0.0033648698590695858, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -380, 518, 567, 171, -646, 677, -291, 532, -507, -172, 583, 525, 535, 527, -579, -502, -404, 1259, -410, 194, -447, 625, 510, 574, 548, 531, 102, -336, 2, -514, 84, -246, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.7563138650730252e-05, 4.7702011215733364e-05, 4.5252010750118643e-05, 4.4067935959901661e-05, 4.2626350477803499e-05, 4.2687290260801092e-05, 4.4506468839244917e-05, 4.7983459808165208e-05, 4.8048248572740704e-05, 4.4038464693585411e-05, 4.6837310947012156e-05, 4.6784494770690799e-05, 4.6720961108803749e-05, 4.706952313426882e-05, 4.5767385017825291e-05, 4.2188501538475975e-05, 4.0355742385145277e-05, 5.1694034482352436e-05, 4.3835061660502106e-05, 4.3599568016361445e-05, 4.0879145672079176e-05, 4.360052480478771e-05, 4.7753899707458913e-05, 4.5030057663097978e-05, 4.8118879931280389e-05, 4.6571436541853473e-05, 4.4253796659177169e-05, 4.4419797632144764e-05, 4.9654794565867633e-05, 4.3279549572616816e-05, 5.8895300753647462e-05, 4.3342661228962243e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -45,-53,87,-9,84,-17,-93,-105,51,-113,-114,-16,44,-1,-39,47,-64,-32,-73,-67,-87,-109,-5,96,-121,2,68,-70,90,-8,-29,-85,73,-68,-99,54,-127,-86,-108,19,65,-92,-108,89,41,-120,96,-28, 
  /* [1][0][][] */ -37,48,-60,8,-26,86,55,19,91,-88,-89,81,74,-38,37,72,106,-28,40,127,-35,2,47,34,32,28,-26,109,15,18,104,-51,70,111,-2,35,60,74,-12,-49,-65,18,-7,-84,-24,37,-25,-45, 
  /* [2][0][][] */ 66,54,-53,106,-10,-52,110,108,-86,100,-21,95,103,-30,97,-104,-58,-15,42,69,-87,-5,127,32,-24,95,121,15,-65,95,96,109,-57,-10,-84,-97,-78,114,109,-13,-122,-65,29,8,-75,121,-17,-69, 
  /* [3][0][][] */ 78,0,45,-16,-69,51,-106,45,61,27,71,26,111,117,80,4,117,104,-46,30,127,-86,-58,-112,-21,-119,-86,117,70,-104,93,11,-54,-34,0,-11,-90,-23,55,51,-21,-91,-95,10,82,40,-34,-77, 
  /* [4][0][][] */ 40,97,-11,47,-41,-34,16,6,52,85,-24,71,17,-38,-25,-79,-32,-14,-80,3,105,-110,78,16,-24,-17,54,-71,-63,25,-88,-69,62,112,3,-123,-64,-23,-127,39,-59,-79,-92,-113,25,110,28,50, 
  /* [5][0][][] */ 121,-79,96,102,57,-117,45,74,127,-110,5,-101,35,87,55,47,59,77,-81,119,48,60,27,-29,-127,-57,0,-99,50,50,16,-90,-27,14,-77,20,-112,-26,45,38,-115,-42,60,106,-26,21,35,-50, 
  /* [6][0][][] */ 36,-42,114,78,-86,-64,6,66,-2,-85,12,-89,89,63,119,-112,38,19,-6,106,-78,-125,116,71,-60,-79,1,-63,-32,-112,71,-79,-91,-127,-44,-102,-12,60,-114,126,86,58,26,-12,-119,107,-75,-47, 
  /* [7][0][][] */ 127,80,-26,-31,-58,119,-8,10,123,16,-83,-2,63,-96,57,80,55,23,4,121,62,42,5,90,-65,107,52,61,-69,115,-18,47,35,34,70,103,-91,96,-6,-16,89,-63,94,75,59,0,103,-100, 
  /* [8][0][][] */ -6,18,-52,-97,46,17,-93,-31,-7,25,28,113,-8,-35,-94,-78,-69,79,-69,3,18,-34,66,96,-116,76,29,67,-71,5,-104,100,78,-41,36,-14,102,-13,-21,54,77,87,-121,-127,-20,-30,-30,96, 
  /* [9][0][][] */ -2,3,117,47,83,-117,-48,-127,41,49,-14,62,-29,-82,-110,-32,7,-4,-104,-72,2,102,-116,-112,116,-13,-17,25,-8,-68,-94,102,61,-3,27,-24,-82,13,-37,-50,48,-74,54,-101,81,20,-111,55, 
  /* [10][0][][] */ -42,98,102,-54,-3,112,126,39,51,43,36,-88,110,67,-19,20,-33,93,-92,-47,-6,36,68,-61,32,66,-100,-105,-42,93,-83,-67,97,109,124,81,-30,22,-30,49,-40,127,-94,-27,-85,-55,2,-50, 
  /* [11][0][][] */ 127,27,-5,113,127,53,71,40,122,102,-64,90,4,-97,40,-56,-54,-90,68,52,42,82,35,-100,-102,-82,-6,75,83,6,33,-7,-76,-61,59,53,-52,89,-27,-45,-30,114,-59,15,-31,-56,-84,-80, 
  /* [12][0][][] */ 31,82,-44,12,98,16,-16,45,-62,70,-1,-6,-33,-1,61,-69,-95,-20,-41,-66,38,-1,29,105,-64,-36,113,-92,97,27,-26,127,-73,-59,-37,25,7,-58,-15,56,111,52,-95,-28,-10,-79,-33,124, 
  /* [13][0][][] */ 124,-44,111,105,103,121,94,74,83,-90,23,-45,100,59,78,-38,-112,-59,-63,40,77,-19,127,-38,-61,50,19,25,-80,-75,86,49,51,112,-13,44,-72,-15,28,80,-65,87,-38,22,-32,31,3,-21, 
  /* [14][0][][] */ -63,-99,77,62,69,-37,-22,-126,-87,-47,58,70,-40,-91,-97,-90,-65,-63,1,18,-52,24,-12,51,-124,-79,-40,20,-127,-126,-88,27,98,-34,-43,-3,85,110,26,-120,-19,-122,32,79,57,-122,57,-94, 
  /* [15][0][][] */ -3,-40,-37,72,92,-100,31,-113,50,-11,-94,27,105,-3,-108,-127,97,-1,-110,11,43,12,65,108,85,62,30,98,13,51,47,-119,-4,1,-80,-16,-79,105,116,-86,13,113,-68,-44,20,-88,-58,-95, 
  /* [16][0][][] */ -91,-10,111,-76,41,122,-66,39,51,48,-126,110,-19,-38,-69,-76,123,82,81,67,120,87,-48,58,-39,57,-87,69,-110,7,56,6,-127,82,65,66,-46,55,-57,-85,32,-60,74,104,66,117,118,-18, 
  /* [17][0][][] */ 61,-69,44,94,-11,-87,-28,-63,62,-58,92,67,118,72,-77,58,44,65,109,127,-61,7,35,-25,35,77,-50,49,123,-25,-9,84,1,0,49,23,-23,112,-51,-3,-70,-8,7,9,28,37,100,-68, 
  /* [18][0][][] */ -108,97,107,-79,-16,-122,-114,-2,-13,70,-121,-46,-45,38,56,-67,19,-30,53,-31,99,-56,14,-91,27,-108,-26,110,27,28,-8,38,40,-36,-121,-120,-41,26,-41,59,-48,-8,-59,-19,-127,13,19,-11, 
  /* [19][0][][] */ 31,32,83,45,70,-83,115,103,111,-61,44,18,-88,53,-57,69,83,-95,127,65,-18,98,-42,30,90,-74,39,-61,-78,-117,-52,49,95,-77,50,12,13,-59,-43,-94,62,-113,-86,26,-78,40,97,-80, 
  /* [20][0][][] */ -19,70,73,101,-102,97,14,59,10,9,-104,23,-13,101,39,-88,-56,-44,-79,-41,21,-57,-93,-86,88,-88,-124,50,26,7,-54,121,107,44,-24,55,42,-44,-18,-127,-97,-45,-105,-123,-37,-71,-82,114, 
  /* [21][0][][] */ 116,95,86,-97,115,-69,95,29,13,-57,-61,25,16,20,-40,-83,-107,-23,39,-2,124,-39,89,-75,61,-76,-19,83,21,18,10,-10,20,33,-84,-105,127,119,-122,-21,-6,19,43,0,-92,-87,-74,107, 
  /* [22][0][][] */ 47,-37,-60,-83,97,-44,114,67,-83,96,-62,-119,120,-127,-96,-73,37,88,-109,-48,96,-68,40,38,92,1,-95,103,-54,-60,-65,-92,58,69,21,13,13,-3,-55,-100,-5,-1,15,98,63,-114,91,-15, 
  /* [23][0][][] */ 82,-76,15,69,110,-109,23,-94,70,-72,100,52,28,-127,32,-32,91,-23,-105,115,106,-76,117,-28,-16,-3,99,27,76,62,79,-27,-28,53,26,42,109,8,-114,20,-117,12,24,-103,-62,-93,120,35, 
  /* [24][0][][] */ -55,-28,-89,-54,-70,-114,-49,-76,77,127,89,22,121,44,-21,-115,-92,54,26,-35,106,-74,-43,-31,42,-20,90,59,106,70,2,-44,11,19,51,29,-41,-67,58,-4,-83,-81,118,10,29,-41,45,76, 
  /* [25][0][][] */ -68,-41,-69,0,103,-64,-86,64,56,-100,-27,0,81,-18,-95,-14,-73,70,36,-96,78,90,-1,-51,13,-42,-87,43,79,-75,37,127,103,-100,48,77,107,-46,-22,-5,-90,108,-89,10,107,42,68,42, 
  /* [26][0][][] */ 54,-124,-20,-5,-101,-1,-3,-10,-108,-124,109,98,-78,-43,11,-13,127,34,-76,-53,18,82,107,19,51,69,10,53,22,4,-93,-2,-28,-63,-97,-103,-60,89,-42,112,-88,111,62,35,-72,87,-37,116, 
  /* [27][0][][] */ 6,4,-69,-110,-127,-75,-74,-22,40,98,33,-98,-33,61,80,-33,66,-19,60,-89,-100,7,-35,-29,-111,44,-117,-6,63,25,-33,-14,59,67,-98,-93,-97,-72,-119,87,-99,14,25,12,98,23,67,102, 
  /* [28][0][][] */ 67,-4,80,42,-105,-60,-112,-70,-63,-100,46,38,-79,-88,5,84,86,92,-72,69,-25,22,-109,-87,-127,73,-81,-58,-91,-70,-6,-18,-100,10,48,61,16,-107,-39,28,67,39,-86,37,-101,-8,-13,43, 
  /* [29][0][][] */ 43,47,52,-63,-100,11,-127,0,102,-24,-99,-87,105,-95,-60,-51,-108,101,33,-77,-88,-35,52,5,-41,7,-54,-35,-114,-16,115,-13,48,-4,-82,-56,-19,103,-14,93,59,105,-58,87,-5,109,-55,-31, 
  /* [30][0][][] */ 18,-53,-46,29,-78,17,-26,-10,93,-14,48,-11,-72,43,45,7,4,25,85,-72,31,-72,-78,14,-83,48,-50,92,6,-87,-43,4,-64,-51,-84,-34,14,-9,-3,21,75,-59,14,127,86,-33,83,49, 
  /* [31][0][][] */ 83,-103,38,107,52,64,-65,-108,-34,-23,-88,-66,109,-127,-53,115,-61,-95,39,53,68,37,-34,112,51,-123,35,43,-67,-82,49,114,18,21,-98,-10,103,-36,-68,-120,65,-75,-33,32,4,-55,-39,28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023811536375433207, 0.0023881059605628252, 0.0022654517088085413, 0.0022061732597649097, 0.0021340032108128071, 0.0021370539907366037, 0.0022281275596469641, 0.0024021961726248264, 0.0024054397363215685, 0.0022046978119760752, 0.0023448164574801922, 0.0023421724326908588, 0.0023389917332679033, 0.0023564416915178299, 0.0022912528365850449, 0.0021120831370353699, 0.0020203297026455402, 0.0025879587046802044, 0.0021945149637758732, 0.0021827253513038158, 0.002046532928943634, 0.0021827733144164085, 0.0023907036520540714, 0.002254340099170804, 0.0024089757353067398, 0.0023315059952437878, 0.002215478103607893, 0.0022237885277718306, 0.0024858682882040739, 0.0021667042747139931, 0.002948475768789649, 0.0021698637865483761, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -201, 1291, 1954, 4467, 6833, -1182, -1132, 14632, 1204, 9939, 524, -783, 4097, -3727, 2350, -1976, -306, -3314, 898, 1647, 2825, 3599, 4893, 494, -2791, -1860, 429, 2027, 1552, 2269, -889, 2839, 4539, 4301, 4337, 1919, 11454, 1657, 1194, -980, 927, 14115, -1125, 1697, 8007, 72, 1487, 4270, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00032481478410772979, 0.00022808072390034795, 0.00013873161515221, 0.00013802683679386973, 0.00013932092406321317, 0.00014863637625239789, 0.0002899271494243294, 6.7989967647008598e-05, 0.00024763293913565576, 8.108348265523091e-05, 0.00017931048932950944, 0.000514136569108814, 0.00016307836631312966, 0.00017428160936105996, 0.00031304178992286325, 0.00014291366096585989, 0.0001448904222343117, 5.1099785196129233e-05, 0.00025061602354981005, 0.00033705058740451932, 0.00023307812807615846, 0.00014375644968822598, 0.0001341233728453517, 0.00022351971711032093, 0.00018067369819618762, 0.00025568992714397609, 0.00031425559427589178, 0.00026017709751613438, 0.00022030742547940463, 0.00027326698182150722, 0.00014505190483760089, 0.00022581849771086127, 0.00014598487177863717, 0.00016999860235955566, 0.00010229805047856644, 0.00012739645899273455, 7.6825592259410769e-05, 0.00016276416135951877, 0.00013958118506707251, 0.0002633818075992167, 0.00016897525347303599, 6.8980931246187538e-05, 0.00016076223982963711, 0.0001131135068135336, 0.0001011868444038555, 0.0001866612583398819, 0.00018471662770025432, 0.00017924442363437265, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 17,-19,-61,14,-127,7,-58,-3, 
  /* [1][0][][] */ -112,29,127,12,-114,-14,4,-18, 
  /* [2][0][][] */ 9,71,-37,25,-49,-127,-12,86, 
  /* [3][0][][] */ -82,40,-2,127,-2,-53,-77,-53, 
  /* [4][0][][] */ 11,-12,39,-121,-28,17,-127,18, 
  /* [5][0][][] */ 73,123,-61,-50,-31,-8,44,-127, 
  /* [6][0][][] */ 51,-42,47,99,-49,-127,-5,-89, 
  /* [7][0][][] */ 31,118,-49,-63,-67,-36,15,-127, 
  /* [8][0][][] */ -4,-26,55,-2,6,5,-53,-127, 
  /* [9][0][][] */ -87,-5,-113,28,-127,-83,-91,-21, 
  /* [10][0][][] */ 79,5,97,-39,-127,7,81,91, 
  /* [11][0][][] */ 127,-31,-83,12,59,-1,-76,-2, 
  /* [12][0][][] */ -27,-98,127,14,13,4,-76,63, 
  /* [13][0][][] */ 39,-66,74,-13,20,-127,60,-119, 
  /* [14][0][][] */ -105,42,127,-3,-40,-73,44,-44, 
  /* [15][0][][] */ 46,121,-36,-57,-54,13,48,-127, 
  /* [16][0][][] */ 26,94,-49,60,0,-38,-14,127, 
  /* [17][0][][] */ 25,80,-20,86,-51,76,-127,45, 
  /* [18][0][][] */ 72,-35,127,-39,79,-95,18,-30, 
  /* [19][0][][] */ 9,-9,21,127,22,-52,-43,-104, 
  /* [20][0][][] */ 8,20,-23,38,-14,51,-127,7, 
  /* [21][0][][] */ 9,-3,57,19,19,127,46,-61, 
  /* [22][0][][] */ 66,-127,-7,61,-94,68,17,14, 
  /* [23][0][][] */ -35,-113,-10,-109,4,-65,0,-127, 
  /* [24][0][][] */ 17,21,-19,-60,-36,-127,-46,52, 
  /* [25][0][][] */ 67,67,127,13,7,25,-44,-4, 
  /* [26][0][][] */ -115,41,127,-49,-98,-22,92,-8, 
  /* [27][0][][] */ -83,45,-35,-101,26,127,-24,91, 
  /* [28][0][][] */ 11,-103,68,53,42,3,-37,127, 
  /* [29][0][][] */ -118,60,69,-28,-127,0,88,-29, 
  /* [30][0][][] */ 90,-86,23,66,-127,-23,32,-82, 
  /* [31][0][][] */ 54,85,62,-41,-120,-18,7,127, 
  /* [32][0][][] */ -35,-24,99,-48,41,17,-126,-127, 
  /* [33][0][][] */ 56,35,107,-127,19,48,-34,63, 
  /* [34][0][][] */ -21,-119,98,-37,27,127,58,-98, 
  /* [35][0][][] */ 37,15,117,-1,1,127,18,-61, 
  /* [36][0][][] */ -23,35,-19,43,43,-127,1,19, 
  /* [37][0][][] */ 20,-18,59,24,-127,111,-35,-19, 
  /* [38][0][][] */ -127,-22,-93,-26,75,-38,-118,-32, 
  /* [39][0][][] */ 21,-1,38,-118,-32,52,-127,10, 
  /* [40][0][][] */ 98,-33,-72,-127,68,66,60,-23, 
  /* [41][0][][] */ 15,-19,-6,127,-110,3,-88,-61, 
  /* [42][0][][] */ -87,25,68,127,-58,-67,-59,7, 
  /* [43][0][][] */ 87,-111,103,46,-121,35,127,51, 
  /* [44][0][][] */ 11,-44,30,-66,-17,127,46,26, 
  /* [45][0][][] */ -32,33,-42,5,78,-47,-127,-38, 
  /* [46][0][][] */ -102,-96,-2,-20,18,127,-45,-120, 
  /* [47][0][][] */ -127,-99,-60,36,27,126,-28,-62, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.003673244034871459, 0.0025793043896555901, 0.0015688790008425713, 0.0015609088586643338, 0.001575543312355876, 0.0016808892833068967, 0.0032787092495709658, 0.00076888053445145488, 0.0028004150371998549, 0.00091695156879723072, 0.0020277746953070164, 0.0058142342604696751, 0.0018442099681124091, 0.0019709044136106968, 0.0035401065833866596, 0.0016161727253347635, 0.0016385273775085807, 0.0005778738996013999, 0.0028341501019895077, 0.0038116155192255974, 0.0026358186732977629, 0.0016257035313174129, 0.0015167655656114221, 0.0025277251843363047, 0.0020431908778846264, 0.0028915295843034983, 0.0035538331139832735, 0.0029422738589346409, 0.002491398248821497, 0.0030903036240488291, 0.001640353468246758, 0.0025537214241921902, 0.0016509041888639331, 0.0019224690040573478, 0.0011568615445867181, 0.0014406926929950714, 0.00086880027083680034, 0.0018406567396596074, 0.0015784866409376264, 0.0029785148799419403, 0.001910896273329854, 0.0007800870225764811, 0.0018180175684392452, 0.0012791706249117851, 0.0011442952090874314, 0.0021109026856720448, 0.0020889113657176495, 0.0020270275417715311, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -2271, -431, -12486, 11086, 7435, -2800, 8859, 1599, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 8.8226166553795338e-05, 0.00012692417658399791, 7.7988093835301697e-05, 0.00011368082778062671, 0.00013135028711985797, 7.4269693868700415e-05, 0.00012457555567380041, 0.00014817525516264141, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 14,43,31,33,-6,-29,44,48,2,27,-9,-6,44,-35,47,-16,-57,-28,-127,-6,48,-37,15,42,8,-7,48,-4,-6,-53,9,28,-44,51,47,6,53,74,-57,-50,5,16,-96,-45,33,22,-20,-56, 
  /* [1][0][][] */ -14,-42,-1,74,-18,-6,-8,-8,18,3,-16,-53,-6,-1,20,11,47,27,51,-36,-2,30,29,-48,-4,-13,-34,-29,-40,13,-7,-9,-32,-25,-97,73,22,11,-127,-14,28,-18,72,30,99,-21,-33,49, 
  /* [2][0][][] */ -8,-2,33,-30,-34,-18,-4,117,-49,88,-42,-6,127,-14,40,-23,-58,-72,1,33,-11,-20,20,-3,12,51,6,38,20,7,70,37,-65,-21,23,59,3,71,58,-122,41,39,-49,-34,17,33,-13,-13, 
  /* [3][0][][] */ 22,-11,-127,-25,9,-7,61,-41,-32,-16,-10,17,-43,-62,41,13,10,46,14,28,-65,14,-70,-10,-36,-70,27,2,-74,-66,-66,25,79,36,-48,22,-64,8,21,-24,29,-60,-30,13,60,-48,36,-20, 
  /* [4][0][][] */ 5,51,-5,-10,30,-5,-81,-114,-33,17,-19,73,2,-24,4,64,46,56,-88,9,26,9,-28,-8,36,-3,2,2,-25,14,4,-39,22,-20,-127,29,-29,-4,49,46,-28,-39,82,48,10,-47,23,17, 
  /* [5][0][][] */ -53,-30,97,17,79,27,58,-6,-127,7,-104,-12,-85,-89,51,76,-18,31,23,1,49,18,21,11,-16,-3,7,-19,-39,-6,-24,-23,-23,40,68,27,-16,74,-25,-6,45,-38,-57,47,-8,16,33,21, 
  /* [6][0][][] */ 85,67,-17,25,28,-31,-106,-69,0,-2,-2,71,-23,-31,0,39,-40,38,18,-2,127,-16,63,112,5,-54,15,-24,-57,-17,-31,-64,48,-30,20,-10,-4,27,-42,39,-53,-51,-63,-38,-26,-52,51,-3, 
  /* [7][0][][] */ 7,49,35,-77,56,-48,-39,-12,13,7,34,26,-35,4,34,-4,-17,26,-20,50,-46,-5,-13,56,3,-31,7,39,-9,30,-33,-16,43,-5,-33,-37,-59,9,127,-5,14,-33,-21,-9,38,3,63,3, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0037496120203286409, 0.0053942771628499031, 0.0033144939225167036, 0.0048314351588487625, 0.0055823870934545994, 0.0031564619857817888, 0.00529446080327034, 0.0062974481843411922, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1310, -2594, 3284, -755, -196, -91, 2824, 12078, -5991, 14199, 10025, -1669, 5294, -1746, 5579, -743, 1079, -1511, 1580, -2029, -3251, -2427, -17147, -3019, 3933, 115, 1715, 2015, 9323, 8289, 7872, -2537, -7781, -101, -2561, -5316, 5080, 8532, -2907, 12036, 1480, -853, -4329, -2324, -7975, 12509, 117, 7079, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 7.5468669820111245e-05, 0.00030451218481175601, 0.00017589455819688737, 0.00022109872952569276, 0.00015178140893112868, 0.00047426804667338729, 0.00025257866946049035, 0.00053075776668265462, 0.00025050848489627242, 0.00010690941417124122, 0.00015195875312201679, 0.00014231658133212477, 0.00016814431000966579, 0.00027791660977527499, 0.00017739394388627261, 0.00024112797109410167, 0.00053806038340553641, 0.00025751424254849553, 8.4526058344636112e-05, 0.00024730135919526219, 0.00013824740017298609, 0.0001975300838239491, 8.804054232314229e-05, 0.00029625324532389641, 0.00012613467697519809, 0.00035594863584265113, 8.2053324149455875e-05, 0.00022129564604256302, 0.0001766733912518248, 0.00012209467240609229, 0.00014654229744337499, 0.00017517368542030454, 0.0001873049623100087, 0.00033944827737286687, 0.0003584873047657311, 0.00013929512351751328, 0.0001119603548431769, 8.6331281636375934e-05, 0.00033282829099334776, 0.00014440745871979743, 0.00022604162222705781, 0.00018901986186392605, 0.00016632575716357678, 0.00021157805167604238, 0.00027356279315426946, 9.4380011432804167e-05, 0.00015498854918405414, 0.00010914617450907826, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 89,75,45,42,-14,-72,38,28,-57,-7,-26,49,57,13,-3,25,48,-40,103,48,60,-23,12,13,-6,-68,55,5,-31,-71,37,51,27,-89,9,28,-38,36,-10,-127,-7,-98,-53,-13,10,-127,73,-127, 127,11,65,-96,57,58,41,-42,-99,-93,21,127,11,-50,-127,23,-8,123,71,40,38,88,105,34,127,-59,-26,-127,-125,-55,-127,127,33,-77,-79,127,26,-96,-83,-113,11,127,-68,26,-45,-85,78,28, 80,6,21,-77,-20,-53,38,22,-44,-7,-3,23,33,27,44,8,-50,8,71,43,-23,-30,-66,-6,-12,-63,-65,-39,-44,-89,0,18,54,-54,32,36,-70,-63,2,-80,2,-28,112,-16,3,-112,16,-50, 
  /* [0][1][][] */ 103,3,19,69,66,77,-2,-127,99,-127,-109,-97,8,48,-55,127,-127,106,70,52,-2,100,78,-39,-7,123,86,21,29,-52,-90,45,63,88,-70,47,-83,-7,-4,-75,-19,-59,11,-95,45,-21,50,-33, 4,127,-127,97,127,60,-127,14,105,-36,-12,91,-127,127,-25,-6,42,-127,-127,-9,127,42,127,-127,-84,86,-55,0,-8,-44,37,-27,127,-9,124,-74,108,-127,127,97,127,70,-102,0,110,41,-127,-24, 49,-3,6,-127,65,53,11,-81,127,-52,-127,-40,17,39,-50,109,81,-2,18,63,40,-127,39,127,-65,127,-67,-23,36,-26,-49,40,-10,65,127,54,-71,-30,-55,-17,-22,-27,127,127,127,-36,65,-13, 
  /* [0][2][][] */ 30,41,28,50,2,0,28,28,8,-24,-10,-24,41,-62,45,-53,-12,24,84,-55,106,-20,18,-60,-73,-64,127,85,-4,-99,-52,62,27,36,-10,-2,-68,25,1,-15,-20,-76,18,-16,7,8,36,-76, 48,9,8,2,-8,-127,-9,-71,-9,-52,14,-34,-9,-57,-10,22,2,-38,30,123,92,70,82,28,43,-47,-77,46,-127,-44,-62,17,10,127,-49,-2,-116,-122,22,-28,-92,83,-10,5,-40,-80,84,-45, 18,3,28,-60,15,-3,38,39,-8,-1,9,-11,39,-54,54,-22,-6,-34,56,-127,22,-62,-61,68,-60,-66,-118,25,-9,-127,15,31,33,-36,-7,37,-127,-68,-28,-17,-24,-12,-2,11,-8,31,-31,-70, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0035298231523483992, 0.014242653734982014, 0.0082269459962844849, 0.010341237299144268, 0.0070991250686347485, 0.022182481363415718, 0.011813618242740631, 0.024824619293212891, 0.011716791428625584, 0.005000370554625988, 0.0071074198931455612, 0.0066564357839524746, 0.0078644510358572006, 0.012998724356293678, 0.008297075517475605, 0.011278045363724232, 0.025166178122162819, 0.01204446516931057, 0.0039534554816782475, 0.011566787958145142, 0.0064661120995879173, 0.0092388838529586792, 0.0041178353130817413, 0.013856367208063602, 0.0058995755389332771, 0.016648441553115845, 0.0038378008175641298, 0.010350447148084641, 0.0082633737474679947, 0.0057106162421405315, 0.0068540815263986588, 0.0081932293251156807, 0.0087606338784098625, 0.015876686200499535, 0.016767179593443871, 0.0065151164308190346, 0.0052366135641932487, 0.004037889651954174, 0.015567055903375149, 0.0067542307078838348, 0.010572426021099091, 0.008840843103826046, 0.0077793938107788563, 0.0098959356546401978, 0.01279508788138628, 0.0044143451377749443, 0.0072491294704377651, 0.0051049883477389812, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -1438, -1743, 2272, -575, -2315, 2162, 2202, 19917, 2351, 2107, 6376, 2472, 1505, 9356, 4872, -1924, 14017, 1832, 764, -2930, -208, -574, 1846, 9209, 736, 6758, 2421, -260, 7588, 251, 1691, -1336, -1729, -2749, -6394, 1568, 2663, 1923, 1984, 2720, 2218, 741, 4031, 2597, 14162, 4045, -1671, 748, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00022407429059967399, 0.00027574555133469403, 0.00027950876392424107, 0.00018966601055581123, 0.00022237279335968196, 0.00012063406029483303, 0.00025626388378441334, 6.2831539253238589e-05, 0.00013293822121340781, 0.00026363189681433141, 0.00012628792319446802, 0.00015180617629084736, 0.00025082676438614726, 9.3299648142419755e-05, 0.00015348345914389938, 0.00020974964718334377, 7.3051080107688904e-05, 0.00013052193389739841, 0.00030472906655631959, 0.00021289504365995526, 0.00013588997535407543, 0.0002945245651062578, 0.00019019538012798876, 0.00010101874795509502, 0.00021631784329656512, 9.9637785751838237e-05, 0.00025803985772654414, 0.00026785142836160958, 6.9491179601754993e-05, 0.00039274414302781224, 0.00014560458657797426, 0.00027495628455653787, 0.00027074487297795713, 0.00012186169624328613, 8.8348402641713619e-05, 0.00027241057250648737, 0.00016863565542735159, 0.00019424750644247979, 0.00022032210836187005, 0.00017676915740594268, 0.00027888669865205884, 0.00027660839259624481, 0.00016366843192372471, 0.00019966060062870383, 6.7874250817112625e-05, 0.00017097998352255672, 0.00011745655501727015, 0.00030100118601694703, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -16,-44,-46,104,14,-72,-82,-127, 
  /* [1][0][][] */ 127,-28,40,-28,22,-72,-3,26, 
  /* [2][0][][] */ -6,49,5,-127,20,93,-53,64, 
  /* [3][0][][] */ -27,127,-53,-80,-89,-4,25,-85, 
  /* [4][0][][] */ 3,-61,-90,-33,22,-80,-70,-127, 
  /* [5][0][][] */ -44,-88,88,56,18,127,39,-116, 
  /* [6][0][][] */ 1,5,-37,35,5,12,-127,-38, 
  /* [7][0][][] */ 25,-16,5,27,-38,54,127,66, 
  /* [8][0][][] */ -7,41,-81,-16,-38,-127,-64,61, 
  /* [9][0][][] */ 62,3,-46,-17,14,127,-43,102, 
  /* [10][0][][] */ -22,55,89,123,85,127,-15,-62, 
  /* [11][0][][] */ -17,-56,5,36,-127,74,-10,-30, 
  /* [12][0][][] */ -21,34,79,-54,58,-91,-127,-62, 
  /* [13][0][][] */ 48,34,-91,-127,-14,-65,-74,114, 
  /* [14][0][][] */ -38,-127,2,-71,6,-70,20,-117, 
  /* [15][0][][] */ 7,68,69,94,86,127,-12,-32, 
  /* [16][0][][] */ 43,18,-22,-127,64,105,-74,79, 
  /* [17][0][][] */ -100,100,-127,36,38,106,-79,40, 
  /* [18][0][][] */ -127,54,26,-18,-98,17,-27,7, 
  /* [19][0][][] */ 127,6,-35,-32,78,-63,69,-89, 
  /* [20][0][][] */ 127,-57,40,-32,-52,32,85,4, 
  /* [21][0][][] */ 13,-29,-40,47,-1,21,127,40, 
  /* [22][0][][] */ 96,41,-127,-96,20,121,73,120, 
  /* [23][0][][] */ -28,42,-50,-85,40,5,-127,3, 
  /* [24][0][][] */ 127,-68,-94,-26,102,-58,18,17, 
  /* [25][0][][] */ -39,-86,79,-46,73,127,-23,-100, 
  /* [26][0][][] */ 23,-59,44,41,127,-67,-47,-67, 
  /* [27][0][][] */ -23,-127,64,86,21,-6,-35,98, 
  /* [28][0][][] */ -18,62,-125,-48,121,-105,-27,127, 
  /* [29][0][][] */ -80,31,127,-93,13,-33,32,30, 
  /* [30][0][][] */ 118,-86,94,-31,-62,-127,72,-34, 
  /* [31][0][][] */ 20,26,49,-7,-33,-11,-127,12, 
  /* [32][0][][] */ 18,-17,22,127,-28,-88,-44,-89, 
  /* [33][0][][] */ 107,-90,-47,101,-127,90,-46,-36, 
  /* [34][0][][] */ 12,-89,11,-58,-115,127,39,-31, 
  /* [35][0][][] */ 22,127,83,20,17,20,-57,3, 
  /* [36][0][][] */ 22,106,-76,-127,-91,17,76,-85, 
  /* [37][0][][] */ 42,-5,42,16,45,127,63,22, 
  /* [38][0][][] */ -66,-93,96,53,23,-7,-59,127, 
  /* [39][0][][] */ 9,33,127,-54,-30,39,-31,28, 
  /* [40][0][][] */ 8,-1,19,-2,6,-28,127,5, 
  /* [41][0][][] */ -18,-8,-66,-127,-73,-83,-64,37, 
  /* [42][0][][] */ 34,-9,57,-38,-127,-59,-49,30, 
  /* [43][0][][] */ 79,-15,39,35,-79,-127,119,24, 
  /* [44][0][][] */ -74,-127,-17,-72,2,15,-1,-123, 
  /* [45][0][][] */ 19,111,68,69,51,127,-56,36, 
  /* [46][0][][] */ -115,-8,-2,72,109,53,-96,127, 
  /* [47][0][][] */ 15,75,-45,-42,-8,-39,25,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0030829333700239658, 0.0037938540335744619, 0.0038456304464489222, 0.0026095258072018623, 0.0030595231801271439, 0.0016597475623711944, 0.0035258149728178978, 0.0008644697954878211, 0.0018290347652509809, 0.0036271878052502871, 0.0017375365132465959, 0.0020886301063001156, 0.0034510081168264151, 0.0012836662353947759, 0.0021117071155458689, 0.0028858473524451256, 0.0010050756391137838, 0.0017957902746275067, 0.00419262470677495, 0.0029291233513504267, 0.0018696465995162725, 0.0040522255003452301, 0.0026168092153966427, 0.0013898697216063738, 0.002976215910166502, 0.0013708696933463216, 0.0035502496175467968, 0.0036852424964308739, 0.00095609662821516395, 0.005403582938015461, 0.0020033053588122129, 0.0037829950451850891, 0.0037250521127134562, 0.0016766380285844207, 0.0012155442964285612, 0.0037479696329683065, 0.0023201790172606707, 0.0026725605130195618, 0.0030313087627291679, 0.0024320841766893864, 0.0038370715919882059, 0.0038057256024330854, 0.0022518374025821686, 0.002747036749497056, 0.0009338500676676631, 0.0023524335119873285, 0.0016160297673195601, 0.0041413344442844391, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 15515, 4001, 14772, -5139, -15612, 8849, 4206, 13725, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 7.8277487773448229e-05, 0.00010060856584459543, 7.6642667409032583e-05, 7.5449730502441525e-05, 0.00010108925926033407, 0.00010163152182940394, 6.4550855313427746e-05, 8.7313215772155672e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-12,-12,-10,-23,-82,-32,-9,57,-38,-53,-26,-19,79,-54,5,14,-9,7,16,29,-30,3,11,37,5,3,32,11,59,-42,-84,17,-60,12,-26,34,-37,-10,29,-59,-22,-24,-44,-78,-82,4,-24, 
  /* [1][0][][] */ -73,2,92,-54,63,40,50,27,-17,15,-2,102,22,-34,-127,-58,-103,-81,39,-20,8,94,-46,7,21,-105,37,94,41,-24,30,48,47,36,5,35,-72,-22,20,10,0,-34,-95,19,-13,-46,-93,36, 
  /* [2][0][][] */ 88,35,-30,-66,-52,-7,-46,-90,31,28,-75,-52,-12,58,-53,45,-5,73,3,11,57,47,-2,-1,-127,21,26,-54,-2,31,36,-86,12,-37,16,17,-48,-53,16,32,-113,-106,-30,-52,-48,-95,31,3, 
  /* [3][0][][] */ 14,-2,19,23,-103,-26,-10,46,-33,-57,-7,72,15,-16,-75,-42,-26,31,1,-58,-40,127,14,-57,22,46,48,-47,19,13,9,24,30,20,11,-8,47,52,23,-1,39,-20,21,-49,-17,6,22,34, 
  /* [4][0][][] */ -46,22,-117,16,-8,97,23,43,-16,127,39,67,24,-75,-27,28,-19,-3,-5,33,-15,42,-74,26,11,-5,51,-11,44,-66,120,96,54,46,12,-47,-88,23,2,-23,43,18,38,38,50,39,25,71, 
  /* [5][0][][] */ -26,3,34,-7,58,-65,-37,-32,-31,-62,9,-30,40,5,-13,1,24,-5,5,29,15,64,22,17,15,-1,-36,-8,-34,-1,-127,-9,-41,-10,26,-20,-5,-30,3,-15,-12,-1,-31,-9,30,33,-3,42, 
  /* [6][0][][] */ 8,58,-2,74,-15,41,-58,55,-79,-34,53,20,46,9,37,17,-1,-48,-43,40,-3,68,33,-34,-87,-9,-42,24,-94,-11,-94,4,5,-32,-42,-59,127,-4,-56,-56,51,32,42,-51,-79,-17,-57,-41, 
  /* [7][0][][] */ -48,20,-78,31,-17,-1,-4,-1,-57,-45,34,71,42,11,-70,-73,-58,82,0,-8,41,13,36,-34,-37,100,-55,-108,-45,-13,-109,-11,-16,-30,-56,-5,-32,-38,-49,-21,-25,41,55,-18,-54,-54,127,-53, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0033267932012677193, 0.004275863990187645, 0.0032573132775723934, 0.0032066134735941887, 0.0042962934821844101, 0.0043193395249545574, 0.0027434113435447216, 0.0037108117248862982, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 5777, 6501, 9325, 9024, 35135, -2114, -1274, -297, -1471, -10583, -2522, -1607, 14177, 7226, 4441, -1070, 7088, 5654, 729, -3015, 4371, -2141, 7286, -821, 4168, 8601, 502, -219, -260, 1902, 9126, 3583, 1131, -1578, 2044, -1023, 7624, 5264, -1627, -328, 5279, -6305, 4272, 874, -466, 1851, 5184, -2251, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00028057588497176766, 0.00014627666678279638, 8.4358543972484767e-05, 0.00015201943460851908, 5.6289773056050763e-05, 0.00041403420618735254, 0.00024570946698077023, 0.00030641618650406599, 0.000377815798856318, 0.00026856537442654371, 0.00014016826753504574, 0.00033656740561127663, 8.1270722148474306e-05, 0.00015945221821311861, 0.0004068517591804266, 0.00012805075675714761, 0.00014492713671643287, 0.00017222274618688971, 0.00047734176041558385, 0.00029054743936285377, 0.00014095727237872779, 0.00017362913058605045, 0.00013564416440203786, 0.00016983425302896649, 0.00017845991533249617, 0.00019560624787118286, 0.00039692636346444488, 0.00026304929633624852, 0.00034277225495316088, 0.00027981770108453929, 0.00017928807938005775, 0.00033495092066004872, 0.00028192333411425352, 0.00089754234068095684, 0.00014035038475412875, 0.00018589921819511801, 0.00023304570640902966, 0.00017473820480518043, 0.00017878590733744204, 0.00029652283410541713, 0.00020184052118565887, 0.00018397664825897664, 0.00026020396035164595, 0.00051606370834633708, 0.00034945871448144317, 0.00039687257958576083, 0.00025144338724203408, 0.00023041317763272673, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -99,-19,44,-12,-127,17,-111,4,-5,127,55,12,-57,70,11,36,37,26,15,-21,-118,-22,25,57,-27,12,-8,-66,23,-123,85,36,-12,28,38,-34,17,-127,-18,127,-63,38,-9,-8,-11,6,9,-17, 16,-127,-8,22,-66,26,-116,-2,30,31,127,68,-65,-75,-94,-51,-10,-46,103,61,14,67,-62,29,-86,-4,-1,-127,7,-80,-29,-127,-10,19,-50,-127,-22,-1,21,92,127,-18,-12,127,9,-127,8,-29, -127,8,57,1,-98,24,-68,0,-2,93,-12,-7,-72,72,23,61,-34,-2,11,-39,-93,-31,61,25,13,-10,6,-45,-39,-127,47,-10,2,13,-54,-30,16,-102,22,95,-58,28,-9,4,7,11,12,46, 
  /* [0][1][][] */ 59,-42,22,-3,-84,4,63,-12,-54,65,31,41,-68,-38,-79,127,-49,8,45,127,4,45,-119,-15,-31,-98,-19,-66,127,20,36,118,-127,0,95,8,-4,37,-99,-113,51,-22,12,10,-127,42,6,-51, 115,-60,-127,-127,50,127,-6,127,-127,-94,-29,127,-65,-127,-127,-120,-28,-127,-78,62,127,127,-87,95,-127,65,-127,96,-57,-58,-127,-97,9,127,-127,117,-127,-65,127,-43,-54,127,-127,-77,102,76,-127,-67, 47,-25,100,-2,-52,-32,17,-22,-31,18,5,-21,-42,-80,-67,121,-127,-43,23,110,-22,52,-9,-127,29,-74,125,-1,-51,109,-50,95,103,-38,-57,24,-11,-13,1,-53,29,-22,-9,-9,1,30,-14,127, 
  /* [0][2][][] */ -107,-45,33,-25,-53,14,83,3,91,50,70,18,-56,75,36,-7,58,52,2,-14,-60,-29,43,34,-25,-8,-5,5,6,29,79,-4,-7,16,72,21,20,-44,-36,4,-37,16,5,-16,-11,-7,-8,-1, -69,-124,62,-57,-69,-13,127,2,91,36,93,-35,124,-107,-71,-24,-57,40,-127,19,-72,15,-127,-8,20,-127,-5,24,3,60,11,-85,-7,-40,-23,36,-12,55,54,-52,1,18,27,-46,27,-26,0,8, -76,-2,47,-4,-75,31,55,0,48,12,15,27,-127,51,44,6,-50,54,-2,-26,-45,-28,109,-62,-3,-16,9,27,-16,36,27,-47,-10,24,-31,20,21,-51,6,-34,-30,40,20,-2,-6,7,8,1, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.011924474500119686, 0.0062167579308152199, 0.0035852380096912384, 0.0064608259126543999, 0.0023923153057694435, 0.017596453428268433, 0.010442651808261871, 0.013022688217461109, 0.016057170927524567, 0.011414027772843838, 0.0059571512974798679, 0.014304114505648613, 0.003454005578532815, 0.0067767188884317875, 0.017291199415922165, 0.0054421569220721722, 0.0061594028957188129, 0.0073194666765630245, 0.020287023857235909, 0.012348266318440437, 0.0059906840324401855, 0.0073792380280792713, 0.0057648769579827785, 0.0072179557755589485, 0.0075845462270081043, 0.0083132656291127205, 0.016869369894266129, 0.011179594323039055, 0.014567820355296135, 0.01189225260168314, 0.0076197432354092598, 0.014235413633286953, 0.011981741525232792, 0.038145549595355988, 0.0059648915193974972, 0.0079007167369127274, 0.0099044423550367355, 0.0074263736605644226, 0.0075984010472893715, 0.012602220289409161, 0.008578222244977951, 0.0078190071508288383, 0.011058668605983257, 0.021932708099484444, 0.014851994812488556, 0.016867084428668022, 0.010686343535780907, 0.0097925597801804543, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 10779, -343, 1442, 1306, 2810, 740, 6388, -458, 10915, 8555, -808, -205, 1432, 1227, 191, 2430, 2593, 2728, -1718, -1299, 2414, 2304, 2684, 6, 3740, 2323, 4836, -667, 4993, -307, 6063, 7985, 4585, 720, 1164, 1650, 2944, 1480, 1242, 1703, -243, 3402, 1966, 4324, 5061, 2202, 141, 2095, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 9.4476446975022554e-05, 0.00033142336178570986, 0.00030946781043894589, 0.00025146870757453144, 0.00025332436780445278, 0.00017674120317678899, 9.5557654276490211e-05, 0.00028215261409059167, 8.801220974419266e-05, 8.6379986896645278e-05, 0.00017855684563983232, 0.00018748873844742775, 0.00035155785735696554, 0.00026089296443387866, 0.00011520502448547632, 0.00026572233764454722, 0.00020111582125537097, 0.00025685547734610736, 0.00022055923182051629, 0.00010702494182623923, 0.00028290128102526069, 0.00014120641571935266, 0.00024035900423768908, 0.0004649431211873889, 0.00017255432612728328, 0.00029850061400793493, 0.00018673844169825315, 0.00041651207720860839, 0.00018276894115842879, 0.00014654890401288867, 0.00012732591130770743, 8.2418599049560726e-05, 0.00019552379671949893, 0.0001250314962817356, 0.00027937476988881826, 0.00039004924474284053, 0.00021851150086149573, 0.00026863408857025206, 0.00039218299207277596, 0.00013347416825126857, 0.00028995878528803587, 0.00020306288206484169, 0.00037321954732760787, 0.00016148015856742859, 0.00018220649508293718, 0.00013026167289353907, 0.00027233932632952929, 0.00031352142104879022, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 62,-84,37,3,54,-127,1,-78, 
  /* [1][0][][] */ -52,-51,-76,69,-127,55,-29,21, 
  /* [2][0][][] */ 59,-48,49,-19,127,-21,-5,76, 
  /* [3][0][][] */ -15,127,-8,111,5,10,-54,-51, 
  /* [4][0][][] */ -36,127,77,-42,40,15,-71,15, 
  /* [5][0][][] */ -83,22,-3,16,127,-26,85,-11, 
  /* [6][0][][] */ 111,-73,113,16,27,127,86,-19, 
  /* [7][0][][] */ -30,-55,57,58,83,17,-54,127, 
  /* [8][0][][] */ 20,-24,-39,-86,-20,127,-70,20, 
  /* [9][0][][] */ -127,22,-98,2,109,-38,-55,12, 
  /* [10][0][][] */ -13,-96,57,25,-25,-91,-127,-97, 
  /* [11][0][][] */ 42,85,-15,-5,-22,-79,27,127, 
  /* [12][0][][] */ 36,-40,-87,53,-93,127,40,75, 
  /* [13][0][][] */ -37,-32,-127,24,-79,82,18,45, 
  /* [14][0][][] */ -61,127,-76,81,84,42,-18,73, 
  /* [15][0][][] */ -89,-11,-12,-1,85,71,-64,-127, 
  /* [16][0][][] */ 90,-127,-109,-24,-47,87,-45,-5, 
  /* [17][0][][] */ 25,126,-111,-54,-81,42,70,-127, 
  /* [18][0][][] */ -76,-114,46,26,127,-70,-37,73, 
  /* [19][0][][] */ -61,112,-40,54,18,-124,-127,64, 
  /* [20][0][][] */ 77,-14,31,-59,2,-58,28,127, 
  /* [21][0][][] */ 66,-47,127,103,-44,112,84,-25, 
  /* [22][0][][] */ -21,91,13,3,127,-53,-108,-61, 
  /* [23][0][][] */ 28,-40,25,127,-2,-58,60,-31, 
  /* [24][0][][] */ -28,54,127,-74,-25,-21,10,-29, 
  /* [25][0][][] */ -48,-127,99,66,35,-1,-29,127, 
  /* [26][0][][] */ 63,-25,-127,-94,-94,55,28,104, 
  /* [27][0][][] */ 44,124,-103,-56,-48,23,31,-127, 
  /* [28][0][][] */ -23,50,-52,-91,-16,-44,-127,-41, 
  /* [29][0][][] */ -108,53,-127,-54,117,59,-40,-8, 
  /* [30][0][][] */ 86,-57,16,-26,-119,119,127,63, 
  /* [31][0][][] */ -74,95,-45,89,127,-95,-20,5, 
  /* [32][0][][] */ 9,87,59,-63,127,-46,-16,-91, 
  /* [33][0][][] */ -127,51,-121,11,50,30,-29,4, 
  /* [34][0][][] */ 58,-16,66,-89,-41,-127,61,101, 
  /* [35][0][][] */ -127,28,45,-24,-77,11,5,5, 
  /* [36][0][][] */ -2,-48,-41,42,-15,10,127,38, 
  /* [37][0][][] */ -28,-28,-77,-46,-25,-127,-68,-7, 
  /* [38][0][][] */ -102,24,26,19,-127,16,32,8, 
  /* [39][0][][] */ -29,-60,27,-24,-31,92,-127,-109, 
  /* [40][0][][] */ 73,-127,24,63,-60,-51,114,56, 
  /* [41][0][][] */ 26,127,87,43,38,35,-93,-34, 
  /* [42][0][][] */ 35,127,-32,-13,-32,20,-15,-51, 
  /* [43][0][][] */ -71,63,-84,-127,23,18,-58,65, 
  /* [44][0][][] */ -52,25,-26,17,40,127,-6,-5, 
  /* [45][0][][] */ -7,85,-96,-32,-79,-101,-14,127, 
  /* [46][0][][] */ 31,106,-98,-32,-65,30,6,-127, 
  /* [47][0][][] */ 20,10,-4,-59,-70,-127,-32,38, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0012617637403309345, 0.004426266998052597, 0.0041330433450639248, 0.0033584465272724628, 0.003383229486644268, 0.0023604363668709993, 0.0012762036640197039, 0.0037682403344660997, 0.0011754317674785852, 0.0011536328820511699, 0.0023846849799156189, 0.0025039731990545988, 0.0046951696276664734, 0.003484310582280159, 0.0015386006562039256, 0.003548808628693223, 0.0026859673671424389, 0.0034303886350244284, 0.0029456403572112322, 0.0014293530257418752, 0.0037782390136271715, 0.0018858577823266387, 0.0032100728712975979, 0.0062094670720398426, 0.0023045192938297987, 0.0039865728467702866, 0.0024939528666436672, 0.0055626546964049339, 0.002440938726067543, 0.0019572083838284016, 0.0017004790715873241, 0.0011007272405549884, 0.0026112841442227364, 0.001669836463406682, 0.0037311410997062922, 0.0052092350088059902, 0.0029182923026382923, 0.0035876960027962923, 0.0052377316169440746, 0.0017825911054387689, 0.0038724939804524183, 0.0027119710575789213, 0.004984468687325716, 0.0021566201467067003, 0.0024334271438419819, 0.0017396871699020267, 0.0036371806636452675, 0.0041871806606650352, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5600, -2193, -2210, 3692, 1433, -17399, -3329, -10594, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00021252814622130245, 0.00012704498658422381, 0.00024922779994085431, 0.00014344787632580847, 0.00023739910102449358, 8.0607765994500369e-05, 0.00012141264596721157, 0.00013041171769145876, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -24,20,3,28,-19,11,0,29,-48,-5,-34,-3,-15,13,36,4,-46,-19,29,-18,-25,127,-20,-18,-22,-37,5,32,-33,35,9,-25,-10,20,33,37,21,4,31,-21,3,-33,-17,-12,-17,25,23,13, 
  /* [1][0][][] */ 8,56,5,46,29,37,46,115,-47,-46,80,-29,-39,-33,29,-21,-18,0,36,4,30,-127,-5,-69,6,11,-16,15,-8,9,-33,-57,-40,4,24,-9,17,65,72,-18,22,19,40,-27,-33,45,7,49, 
  /* [2][0][][] */ -3,24,-1,30,28,16,-31,33,23,10,62,17,5,-15,30,-55,20,27,-6,9,-17,127,7,-13,21,-42,-4,0,-21,31,-22,-60,-15,7,15,-42,31,-14,-41,-27,27,-12,-6,-50,-36,31,11,19, 
  /* [3][0][][] */ -40,47,-8,6,-18,32,60,-2,5,5,4,13,-18,34,41,15,-13,0,8,0,39,-81,-9,18,-15,4,-127,27,-33,-28,-13,5,-41,-16,9,26,32,-14,-40,-29,4,-14,12,16,17,-12,40,19, 
  /* [4][0][][] */ 23,4,-42,6,18,-5,21,-9,-57,13,1,27,9,-9,-15,19,-29,36,-20,-6,3,-127,-7,-1,35,28,36,-44,42,-5,4,12,-10,53,33,-6,-22,18,-5,8,-14,-66,-88,24,36,39,2,-12, 
  /* [5][0][][] */ -6,54,82,3,0,31,21,-104,69,-37,-15,-5,96,-64,1,17,19,-38,38,4,-25,127,20,8,88,6,84,46,94,60,-2,-34,-73,-45,102,38,-52,-50,2,-106,11,-18,61,68,-47,-42,-26,-32, 
  /* [6][0][][] */ 63,-5,-25,17,44,-21,46,-47,45,39,0,-32,-15,44,24,-76,22,-127,-27,-17,33,-16,-8,28,-45,-36,48,-17,62,-36,126,51,49,48,33,-51,-65,21,64,-30,-32,23,-78,67,39,8,42,-52, 
  /* [7][0][][] */ -12,50,51,59,-2,16,67,102,54,31,2,76,-59,-7,34,-14,90,-17,-36,-14,-3,-127,0,-100,-76,80,59,18,7,31,21,-22,22,-23,19,25,-21,106,-98,-33,11,-5,27,-12,-53,3,44,13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0090324459597468376, 0.0053994115442037582, 0.010592181235551834, 0.0060965348966419697, 0.01008946169167757, 0.0034258300438523293, 0.0051600374281406403, 0.0055424976162612438, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 22619, 22172, 9492, 20531, 5422, 9527, 20833, 7827, 45327, -1670, -577, 19720, 14432, -4265, 8729, 217, 1591, 31420, 17966, -381, 4265, -8509, 467, 1606, 47110, 35102, 1902, 264, -1257, 13038, -1919, 1076, -15220, 18572, 31143, 27059, 21800, 22395, -280, -482, 7161, 37772, -932, -274, -418, -2232, 20194, 11280, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.0233000365551561e-05, 7.6478507253341377e-05, 9.9987053545191884e-05, 6.5971602452918887e-05, 0.00013709864288102835, 9.8898955911863595e-05, 0.00014772622671443969, 0.00012473548122216016, 4.3079791794298217e-05, 8.5831750766374171e-05, 7.6633004937320948e-05, 5.6145156122511253e-05, 0.00017995880625676364, 5.7221008319174871e-05, 8.7634034571237862e-05, 8.5231535194907337e-05, 4.0861679735826328e-05, 7.0194510044530034e-05, 6.0305723309284076e-05, 0.00011767464457079768, 7.0827278250362724e-05, 0.00026918831281363964, 0.00014427291171159595, 9.8661752417683601e-05, 3.595857197069563e-05, 6.8818422732874751e-05, 7.5392825237940997e-05, 0.00010562265379121527, 5.855729614268057e-05, 0.00010887768439715728, 0.0001846651139203459, 0.00021201981871854514, 6.9546425947919488e-05, 5.7925910368794575e-05, 7.6995835115667433e-05, 0.00012435083044692874, 0.00010268769256072119, 0.00014410907169803977, 0.00013985650730319321, 8.6804007878527045e-05, 0.00016310534556396306, 4.0651495510246605e-05, 8.9212546299677342e-05, 5.4209471272770315e-05, 0.00041251169750466943, 0.00012442500155884773, 7.6017480751033872e-05, 9.1118359705433249e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -52,-81,-43,-61,-37,34,-63,-55,-60,61,42,-88,-29,21,-93,67,87,-81,-53,110,36,58,-49,86,-81,-64,58,66,60,-50,91,63,50,-64,-83,-32,-127,-67,122,60,-35,-23,36,90,70,103,-45,-63, -82,-120,-78,-106,-127,28,-82,-101,-67,100,78,-109,-62,68,-127,97,97,-112,-99,-7,77,76,87,112,-81,-93,106,104,99,-78,97,76,81,-89,-102,-57,-112,-78,127,78,-85,-63,55,107,75,111,-88,-97, -36,-42,-35,-65,-82,31,-69,-44,-44,56,50,-53,-26,77,-69,37,47,-47,-30,-51,59,-127,-67,39,-33,-39,40,29,43,-28,60,39,39,-55,-50,-29,-64,-45,27,28,-36,-32,43,62,38,66,-40,-33, 
  /* [0][1][][] */ -70,-95,-74,-88,-67,-7,-92,-73,-96,91,67,-93,-64,61,-123,82,109,-90,-70,127,77,76,-62,101,-115,-84,68,108,76,-80,102,84,71,-103,-104,-65,-102,-89,106,102,-86,-63,71,85,127,127,-66,-87, -127,-127,-127,-127,-118,-127,-127,-127,-127,127,127,-127,-127,127,-86,127,127,-127,-127,-54,127,80,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-95,-127,118,127,-127,-127,127,127,124,107,-127,-127, -54,-34,-79,-93,-95,-112,-109,-71,-63,80,68,-77,-57,111,-61,54,91,-60,-50,-118,85,-125,-82,54,-42,-67,36,38,70,-55,78,62,63,-90,-64,-72,-55,-75,44,49,-70,-59,72,82,51,31,-53,-51, 
  /* [0][2][][] */ -25,-18,-35,-38,-48,-15,-57,-37,-49,60,29,-23,-20,3,-76,37,35,-26,-25,39,44,32,-16,31,-48,-31,13,34,32,-23,43,39,52,-59,-60,-48,-17,-38,-2,58,-94,-48,41,35,64,24,-36,-31, -56,-14,-71,-64,-75,-123,-70,-56,-62,87,44,-55,-42,59,-70,36,48,-30,-40,-58,76,13,37,24,-56,-63,34,51,58,-58,56,63,80,-92,-88,-79,-21,-49,4,68,-99,-70,72,65,63,-4,-72,-47, -28,23,-50,-47,-41,-110,-75,-40,-25,62,25,-46,-11,50,5,15,51,-13,-29,-71,42,-52,-32,20,-8,-41,2,19,34,-28,31,37,34,-63,-67,-56,5,-36,13,37,-64,-33,40,33,22,-2,-21,-26, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0021349024027585983, 0.0032503365073353052, 0.0042494498193264008, 0.0028037929441779852, 0.005826692096889019, 0.0042032054625451565, 0.0062783644534647465, 0.0053012575954198837, 0.0018308911239728332, 0.0036478491965681314, 0.003256902564316988, 0.0023861690424382687, 0.0076482491567730904, 0.0024318927899003029, 0.0037244465202093124, 0.0036223402712494135, 0.0017366213724017143, 0.0029832667205482721, 0.0025629932060837746, 0.0050011724233627319, 0.003010159358382225, 0.011440502479672432, 0.0061315987259149551, 0.0041931243613362312, 0.0015282392269000411, 0.0029247829224914312, 0.0032041950616985559, 0.0044889627024531364, 0.0024886850733309984, 0.0046273013576865196, 0.0078482674434781075, 0.0090108420699834824, 0.002955723088234663, 0.0024618511088192463, 0.0032723229378461838, 0.0052849100902676582, 0.0043642269447445869, 0.0061246352270245552, 0.0059439013712108135, 0.003689170116558671, 0.0069319773465394974, 0.0017276884755119681, 0.0037915331777185202, 0.0023039025254547596, 0.017531746998429298, 0.0052880626171827316, 0.0032307428773492575, 0.0038725300692021847, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 706, 2216, 1532, -164, -770, 176, 6566, 2653, 1312, -2722, 1451, -59, 4837, 65, 828, -1708, -68, 3852, 785, 1087, -759, 26377, 1364, -1225, 874, 4216, 1943, -1365, 155, 150, -2097, -1383, 2975, 672, 5574, 12008, 3380, 5077, -2614, -1511, -766, 1416, 1044, 494, -1672, -1934, 2715, 1032, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00030611615511588752, 0.00029363456997089088, 0.00029393294244073331, 0.00042843029950745404, 0.00028793569072149694, 0.0002735813322942704, 0.00013280787970870733, 0.00021983709302730858, 0.00035033278982155025, 0.00020111825142521411, 0.00028225456480868161, 0.00036492451908998191, 0.00014394534809980541, 0.00051772716687992215, 0.00047674393863417208, 0.00021688763808924705, 0.00058757566148415208, 0.00017633808602113277, 0.00029502800316549838, 0.00029805416124872863, 0.00031051476253196597, 6.0965274315094575e-05, 0.00029834068845957518, 0.00022460613399744034, 0.00029455861658789217, 0.00019371607049833983, 0.00029075192287564278, 0.00032067456049844623, 0.00039604818448424339, 0.00044989451998844743, 0.00022879894822835922, 0.00024094665423035622, 0.0002423490077489987, 0.00046522050979547203, 0.0001620808761799708, 8.5543724708259106e-05, 0.0002504033618606627, 0.00016795597912278026, 0.00022184893896337599, 0.00021963957988191396, 0.00036325963446870446, 0.00034877486177720129, 0.00029776027076877654, 0.00036783859832212329, 0.0002584969624876976, 0.00024494720855727792, 0.00022729103511665016, 0.00020919469534419477, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -21,56,-60,53,29,127,39,29, 
  /* [1][0][][] */ 44,-127,-92,-33,-36,51,54,-33, 
  /* [2][0][][] */ -57,49,-50,-116,-47,-127,-39,-75, 
  /* [3][0][][] */ -13,127,63,28,0,-83,-25,28, 
  /* [4][0][][] */ -103,45,-127,82,12,-25,-41,-67, 
  /* [5][0][][] */ 85,-99,-127,33,12,-25,79,-47, 
  /* [6][0][][] */ -8,-93,-56,24,-127,-54,-46,75, 
  /* [7][0][][] */ -22,-43,-13,-42,47,1,-31,127, 
  /* [8][0][][] */ 10,32,-91,-94,42,-29,-127,-85, 
  /* [9][0][][] */ -127,60,-10,106,-11,68,101,-5, 
  /* [10][0][][] */ -24,-12,88,-127,-31,65,14,36, 
  /* [11][0][][] */ 106,-16,110,39,-38,50,85,127, 
  /* [12][0][][] */ 51,40,32,-51,71,116,90,-127, 
  /* [13][0][][] */ 32,51,-36,59,-9,-127,-37,52, 
  /* [14][0][][] */ 10,-127,-28,-29,8,66,31,-31, 
  /* [15][0][][] */ -109,-7,3,-78,62,127,-79,-26, 
  /* [16][0][][] */ 15,-42,118,14,-25,24,127,77, 
  /* [17][0][][] */ 61,20,57,24,-7,-82,-38,-127, 
  /* [18][0][][] */ -124,14,-81,-13,-16,-127,24,-92, 
  /* [19][0][][] */ 69,14,116,-23,-63,36,99,127, 
  /* [20][0][][] */ 18,127,50,-6,24,43,45,10, 
  /* [21][0][][] */ -38,30,27,-108,-63,127,-9,-11, 
  /* [22][0][][] */ 36,3,87,-10,-50,14,127,89, 
  /* [23][0][][] */ -72,120,53,42,-104,-98,-119,127, 
  /* [24][0][][] */ -18,-6,100,22,-114,127,-6,-96, 
  /* [25][0][][] */ -40,17,69,21,-127,47,-72,22, 
  /* [26][0][][] */ -49,-127,37,-42,17,41,-13,-15, 
  /* [27][0][][] */ -22,60,27,53,-22,127,-26,-10, 
  /* [28][0][][] */ 10,-127,62,17,63,124,33,43, 
  /* [29][0][][] */ 15,127,-24,32,-65,-59,-13,14, 
  /* [30][0][][] */ -54,75,105,89,-127,-61,-45,-108, 
  /* [31][0][][] */ 12,72,26,58,-49,-13,18,-127, 
  /* [32][0][][] */ -24,-35,-59,67,-127,-41,-54,4, 
  /* [33][0][][] */ 86,22,73,54,-28,61,56,127, 
  /* [34][0][][] */ 124,10,-127,-38,-53,-11,76,35, 
  /* [35][0][][] */ 127,102,104,-119,-57,-94,31,106, 
  /* [36][0][][] */ -48,-104,127,29,54,58,0,-36, 
  /* [37][0][][] */ -3,11,-24,0,-13,-54,-44,127, 
  /* [38][0][][] */ 127,3,50,9,-1,18,-60,32, 
  /* [39][0][][] */ 59,92,-112,-127,-107,86,47,-67, 
  /* [40][0][][] */ -52,127,-35,71,-52,-31,-59,-20, 
  /* [41][0][][] */ -127,38,-28,-51,60,43,0,-62, 
  /* [42][0][][] */ 46,-33,-5,-22,-24,127,15,84, 
  /* [43][0][][] */ -77,45,127,18,76,22,-41,5, 
  /* [44][0][][] */ 7,127,-3,31,-47,-60,-16,-4, 
  /* [45][0][][] */ -73,84,68,-127,-77,13,-65,-54, 
  /* [46][0][][] */ 39,-41,-16,24,28,8,-127,68, 
  /* [47][0][][] */ -98,-127,30,68,52,-87,15,87, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0030351516325026751, 0.0029113965574651957, 0.0029143546707928181, 0.0042479005642235279, 0.0028548918198794127, 0.0027125678025186062, 0.0013167945435270667, 0.0021796920336782932, 0.0034735610242933035, 0.0019940941128879786, 0.0027985633350908756, 0.0036182387266308069, 0.0014272228581830859, 0.0051332819275557995, 0.004726931918412447, 0.0021504480391740799, 0.0058258320204913616, 0.0017483979463577271, 0.002925212262198329, 0.0029552166815847158, 0.003078764071688056, 0.00060447270516306162, 0.0029580576810985804, 0.0022269771434366703, 0.0029205584432929754, 0.0019207012373954058, 0.0028828149661421776, 0.0031794989481568336, 0.0039268308319151402, 0.0044607189483940601, 0.0022685490548610687, 0.0023889939766377211, 0.0024028983898460865, 0.0046126767992973328, 0.0016070372657850385, 0.00084816885646432638, 0.0024827576708048582, 0.0016652890481054783, 0.0021996395662426949, 0.0021777336951345205, 0.0036017312668263912, 0.0034581141080707312, 0.0029523028060793877, 0.0036471318453550339, 0.0025630057789385319, 0.0024286597035825253, 0.0022535980679094791, 0.0020741722546517849, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 7229, -11960, -920, 6118, 1913, -5683, 3268, 7875, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00022913796419743448, 0.00016072561265900731, 0.00010377956641605124, 0.00016362832684535533, 0.00024904939346015453, 0.00012355581566225737, 0.00020126528397668153, 9.4821065431460738e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -26,-8,-9,-32,-68,-16,-4,-21,64,7,10,-3,10,15,-20,2,-33,13,-17,-14,-3,10,-23,1,19,-9,83,9,-16,-86,-14,10,-2,35,127,-11,-27,-41,26,-40,24,3,-3,-19,-19,0,-18,-87, 
  /* [1][0][][] */ 16,-32,-11,59,1,-9,20,38,65,75,41,-48,-51,71,6,1,-6,-31,19,-20,-63,40,-47,31,88,11,-30,35,24,2,127,22,-14,-38,-34,-3,-17,7,-24,-14,-1,-20,2,26,-5,37,30,20, 
  /* [2][0][][] */ -65,3,-74,119,-63,-67,27,-60,-77,41,54,-97,-25,-5,-48,10,122,34,-71,-49,-67,-22,-40,21,80,-32,126,-10,84,-17,-69,22,-3,-24,57,-1,-47,29,-1,-102,61,-69,-56,-127,-19,-70,-70,106, 
  /* [3][0][][] */ 25,-48,13,-40,37,-20,-9,-72,46,-62,1,-28,-86,-76,-19,11,10,-10,40,-41,-8,31,-81,4,73,-36,50,13,8,0,-3,-23,-39,35,22,-31,-51,23,1,-5,127,17,-50,37,-52,50,-10,-53, 
  /* [4][0][][] */ 24,8,16,16,10,35,-10,-7,45,23,6,-46,-1,6,-67,22,-2,20,24,-22,-24,27,5,42,35,6,-28,5,48,-10,-19,29,-6,-2,34,22,-127,2,54,14,14,-8,1,16,-36,49,-30,-96, 
  /* [5][0][][] */ -39,-97,31,115,-30,-3,-51,98,-95,80,50,28,-77,24,65,-39,-14,30,26,0,-5,32,41,48,-50,11,-25,40,-45,-97,40,26,-104,-47,-28,2,127,2,-22,15,-36,-15,86,98,21,39,44,46, 
  /* [6][0][][] */ 83,-2,-15,-13,81,-25,-29,-63,40,24,33,-28,-7,8,6,2,-1,-1,-11,-25,-34,17,13,23,55,-55,46,0,-24,103,-18,10,43,25,-127,-16,-89,-34,24,-65,-10,-5,-7,-92,-2,4,-20,-11, 
  /* [7][0][][] */ -37,-81,55,-52,11,127,49,-57,1,-99,-51,-4,2,-25,-60,-6,15,-59,111,70,45,-40,5,-7,-21,8,107,-1,49,20,14,-5,-33,-31,-55,110,-126,98,-39,-38,-55,51,4,-70,23,-14,74,-35, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0097383633255958557, 0.0068308385089039803, 0.0044106314890086651, 0.0069542038254439831, 0.010584599338471889, 0.005251122172921896, 0.0085537740960717201, 0.0040298951789736748, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 9091, 4491, -673, 7088, -174, -1684, 5567, -1022, 1861, 4757, -48, -75, -1854, 12148, 4229, -1271, -6619, -356, -2550, -1274, 10925, 24, -16358, -742, -5439, 3054, 589, 271, -1533, -1303, -7241, -113, 15241, -1662, 1796, 1567, -1800, 652, -968, 2030, 16673, 159, 1631, -230, 581, -320, -3998, 7211, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00025920796906575561, 0.00027847144519910216, 0.00017749029211699963, 0.00035437566111795604, 0.00041076450725086033, 0.00045045223669148982, 0.00011130216444144025, 0.00024321090313605964, 7.6001415436621755e-05, 0.00022686454758513719, 0.00032600204576738179, 0.00047536689089611173, 0.00024060666328296065, 0.00014931883197277784, 0.00022509745031129569, 0.00034356783726252615, 5.8048673963639885e-05, 0.00188652821816504, 0.00038614458753727376, 0.0001691870711511001, 0.00010519017814658582, 0.00052366696763783693, 0.00011551011994015425, 0.00016711001808289438, 0.00028827713686041534, 0.00022814681869931519, 0.0002717457537073642, 0.00023864585091359913, 0.00048454615171067417, 0.00022902959608472884, 0.00017914571799337864, 0.00052581063937395811, 6.8668523454107344e-05, 0.00035864557139575481, 0.00019481351773720235, 0.00072558753890916705, 0.00014603532326873392, 0.00019731868815142661, 0.00081954768393188715, 0.00035460127401165664, 5.5641299695707858e-05, 0.00033725914545357227, 0.00018847789033316076, 0.00014639290748164058, 0.00030326322303153574, 0.00024674530141055584, 0.00014078940148465335, 0.00039497308898717165, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -64,43,-44,-53,-7,-15,12,-11,-3,-15,5,41,-5,-103,-101,27,127,-1,61,46,-94,-59,103,-109,-6,-54,-7,99,-12,13,40,127,-14,-7,-19,7,-14,-42,-6,18,123,-83,-44,49,72,-105,-33,-5, -7,-127,33,-127,-2,-19,-80,127,64,-77,20,40,15,-127,-102,18,-32,11,-23,-78,-70,-1,72,127,12,-14,11,127,25,-5,11,-100,-87,28,-11,-19,127,-127,53,-9,1,-119,-51,31,95,71,30,-36, -21,-4,16,-24,-3,36,16,66,-5,15,-1,30,23,36,-85,30,80,12,-23,21,-123,47,69,19,-4,66,2,-51,-22,-1,13,-35,-43,6,-3,7,-28,125,-13,12,80,-57,21,-28,63,40,-44,-14, 
  /* [0][1][][] */ -35,-24,-127,-13,-29,25,1,5,32,-65,-5,-105,-29,-56,-127,127,105,4,127,93,-9,127,123,117,6,-64,-38,1,48,-35,43,-104,0,-23,-60,5,-3,-102,46,19,93,127,-15,-12,-69,127,61,-34, -127,43,123,120,127,-118,-127,-8,-19,-127,-127,-127,127,-23,-6,43,23,-127,-93,-127,127,-12,-77,-92,127,-47,127,-61,127,127,-34,75,-127,-127,127,-127,90,-83,-127,-127,25,107,-93,14,-127,-70,127,127, -17,2,5,24,40,127,-19,55,67,11,51,-51,-13,-17,-74,-13,82,49,-2,59,-60,-113,127,-22,10,127,16,-4,43,28,127,28,13,14,56,9,-20,90,52,-9,-2,71,127,-11,-49,-54,58,-9, 
  /* [0][2][][] */ -27,2,-63,-8,-4,-13,20,-10,43,20,3,46,-6,-15,75,7,20,0,60,16,-59,-5,74,35,-1,-62,-13,-82,1,-12,-1,-34,-12,58,-12,-8,-69,4,-5,5,27,-10,-34,-61,-20,14,-60,-39, -10,-49,47,-4,-81,-20,-80,-91,127,69,46,53,-11,-47,24,15,87,100,-29,-13,-81,-1,27,-23,3,-60,-67,-91,-17,-33,92,28,-60,53,-73,-21,28,-111,33,41,-127,-15,-108,127,24,-1,47,-52, 17,-14,15,-5,-41,27,19,-91,11,-8,-19,24,5,22,100,-119,54,-23,-21,-10,-60,10,28,0,-1,24,-30,6,-7,-26,24,14,-22,52,-48,-5,-103,97,-19,25,3,-23,43,53,-17,-16,-70,-25, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011016339063644409, 0.011835035867989063, 0.0075433370657265186, 0.015060964971780777, 0.017457490786910057, 0.019144220277667046, 0.0047303419560194016, 0.010336463339626789, 0.0032300602179020643, 0.0096417432650923729, 0.013855086639523506, 0.020203093066811562, 0.010225783102214336, 0.0063460501842200756, 0.0095666414126753807, 0.014601632952690125, 0.0024670686107128859, 0.080177448689937592, 0.016411144286394119, 0.0071904505603015423, 0.0044705825857818127, 0.022255845367908478, 0.0049091801047325134, 0.0071021756157279015, 0.012251777574419975, 0.0096962396055459976, 0.011549194343388081, 0.010142448358237743, 0.020593211054801941, 0.0097337579354643822, 0.0076136928983032703, 0.022346951067447662, 0.0029184122104197741, 0.015242435969412327, 0.0082795741036534309, 0.030837470665574074, 0.0062065008096396923, 0.0083860438317060471, 0.034830775111913681, 0.015070553869009018, 0.002364755142480135, 0.0143335135653615, 0.0080103101208806038, 0.006221698597073555, 0.01288868673145771, 0.01048667449504137, 0.0059835496358573437, 0.016786355525255203, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3263, 1002, 3148, 7887, 269, 4482, 1476, 1377, 1738, 4102, 2602, 4380, 2446, 1291, 2893, -70, 187, -2242, 6480, 2012, 1303, 4788, 7921, 425, 2723, 2699, 1597, -84, -1254, 1052, 5747, 2066, 1066, 809, 693, -377, 630, 1685, 16, 1411, 1225, 4518, 1701, 537, 2805, 1060, -126, 9475, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00028302316786721349, 0.00055603357031941414, 0.00023836166656110436, 0.00014183922030497342, 0.0014885697746649384, 0.00016328551282640547, 0.00043106020893901587, 0.00041360760224051774, 0.00031400902662426233, 0.00018492016533855349, 0.00027407941524870694, 0.00013865072105545551, 0.00031473577837459743, 0.00027758590294979513, 0.00020199126447550952, 0.00032369617838412523, 0.00042739187483675778, 0.00034084587241522968, 0.00015576092118863016, 0.00049211288569495082, 0.00053377891890704632, 0.00017223021131940186, 0.00011127308971481398, 0.00039889445179142058, 0.0002199568843934685, 0.00035336537985131145, 0.00042191179818473756, 0.00028979807393625379, 0.00033912097569555044, 0.00086504372302442789, 0.00016712948854546994, 0.00038028875133022666, 0.00058132794220000505, 0.00033427338348701596, 0.00091780908405780792, 0.00031588820274919271, 0.00025048147654160857, 0.00023367870016954839, 0.00026496860664337873, 0.00047803964116610587, 0.00033947869087569416, 0.0001834855938795954, 0.00023024909023661166, 0.0003875362453982234, 0.00020346506789792329, 0.00047937012277543545, 0.00045231150579638779, 0.00010727414337452501, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -127,-15,33,-115,-124,121,-3,-60, 
  /* [1][0][][] */ 88,3,23,-27,2,57,-127,40, 
  /* [2][0][][] */ -40,44,-108,82,-56,127,21,48, 
  /* [3][0][][] */ 96,-29,-33,72,0,-66,13,127, 
  /* [4][0][][] */ -80,-6,-4,13,-21,-36,127,4, 
  /* [5][0][][] */ 50,127,31,46,-123,-59,5,-26, 
  /* [6][0][][] */ -6,-63,34,127,16,-96,-18,34, 
  /* [7][0][][] */ 127,1,96,-3,-78,28,73,115, 
  /* [8][0][][] */ -32,-127,48,47,76,-35,-25,1, 
  /* [9][0][][] */ -83,-104,20,-25,-21,0,-53,127, 
  /* [10][0][][] */ -33,-125,25,109,70,127,11,-20, 
  /* [11][0][][] */ -127,-111,25,-58,59,60,-38,127, 
  /* [12][0][][] */ 77,-19,87,-77,28,-127,75,0, 
  /* [13][0][][] */ 30,19,25,127,-7,13,32,-58, 
  /* [14][0][][] */ -47,-4,44,6,127,-23,-6,121, 
  /* [15][0][][] */ -77,127,39,85,53,105,-37,84, 
  /* [16][0][][] */ -2,-30,-58,-127,-55,55,15,56, 
  /* [17][0][][] */ 19,127,-3,64,-24,-42,-1,15, 
  /* [18][0][][] */ 15,37,-7,-127,-41,-93,21,-14, 
  /* [19][0][][] */ 30,-83,-127,-103,-84,113,17,-9, 
  /* [20][0][][] */ 29,5,15,-7,127,25,35,-35, 
  /* [21][0][][] */ -127,-64,-59,-93,51,31,46,-13, 
  /* [22][0][][] */ -65,-46,81,126,46,-45,-54,127, 
  /* [23][0][][] */ 23,42,-38,125,127,27,33,104, 
  /* [24][0][][] */ 127,-2,-119,-19,-4,-18,46,-43, 
  /* [25][0][][] */ 6,-10,-46,-21,71,-26,-127,-60, 
  /* [26][0][][] */ 127,9,112,-38,-90,44,57,119, 
  /* [27][0][][] */ 27,-64,-43,127,34,3,-20,-120, 
  /* [28][0][][] */ -62,127,80,69,63,-19,-26,8, 
  /* [29][0][][] */ -1,-1,54,4,-74,2,127,68, 
  /* [30][0][][] */ -52,-75,48,-72,-83,127,66,41, 
  /* [31][0][][] */ 114,17,88,-21,-100,78,83,127, 
  /* [32][0][][] */ -110,-15,-28,34,-21,22,127,23, 
  /* [33][0][][] */ -127,123,53,83,31,25,-84,6, 
  /* [34][0][][] */ 119,6,22,-16,5,49,-127,15, 
  /* [35][0][][] */ 3,-2,19,32,-44,29,13,-127, 
  /* [36][0][][] */ 21,-3,-70,-114,44,-23,26,127, 
  /* [37][0][][] */ 54,-42,-42,-56,-25,37,58,-127, 
  /* [38][0][][] */ 23,127,15,116,-74,-82,-17,-21, 
  /* [39][0][][] */ 107,-7,110,-14,-91,36,127,120, 
  /* [40][0][][] */ -71,-75,127,111,-14,-26,-91,28, 
  /* [41][0][][] */ 36,-11,16,17,21,-74,-17,127, 
  /* [42][0][][] */ 49,-89,-85,-83,-55,75,36,-127, 
  /* [43][0][][] */ 99,-2,121,-30,-89,-20,119,127, 
  /* [44][0][][] */ -110,-94,-78,127,97,-14,-81,32, 
  /* [45][0][][] */ 127,-12,82,-22,-37,28,-7,77, 
  /* [46][0][][] */ 57,-127,-5,94,126,9,68,7, 
  /* [47][0][][] */ 63,127,-17,111,-29,-75,26,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0029033639002591372, 0.0057040131650865078, 0.0024452086072415113, 0.001455042976886034, 0.015270340256392956, 0.0016750475624576211, 0.0044219866394996643, 0.0042429510504007339, 0.0032212294172495604, 0.0018969845259562135, 0.0028116155881434679, 0.0014223341131582856, 0.0032286846544593573, 0.0028475862927734852, 0.0020721065811812878, 0.0033206038642674685, 0.0043843556195497513, 0.0034965323284268379, 0.0015978573355823755, 0.0050482894293963909, 0.0054757161997258663, 0.0017668058862909675, 0.0011414835462346673, 0.0040920176543295383, 0.0022564050741493702, 0.0036249624099582434, 0.0043281386606395245, 0.0029728638473898172, 0.0034788376651704311, 0.008873961865901947, 0.0017144806915894151, 0.0039011528715491295, 0.0059634926728904247, 0.0034291089978069067, 0.0094152502715587616, 0.0032405066303908825, 0.0025695383083075285, 0.0023971688933670521, 0.0027181531768292189, 0.0049039204604923725, 0.0034825073089450598, 0.0018822681158781052, 0.0023619865532964468, 0.0039755008183419704, 0.0020872254390269518, 0.0049175689928233624, 0.0046399910934269428, 0.0011004607658833265, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4515, 2675, 2753, 10646, 4540, 5388, 2465, -3055, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00012996929581277072, 0.00012113506090827286, 0.00015324534615501761, 0.000151057232869789, 0.00013290010974742472, 0.00010262667638016865, 9.8701915703713894e-05, 0.00025958451442420483, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -28,36,-30,-1,-46,-26,-79,25,8,21,36,38,36,4,-46,11,-45,43,12,-62,30,42,-127,3,-9,10,-31,45,-6,-10,23,22,15,-23,34,18,0,107,-67,-18,-12,21,-30,27,6,7,19,-3, 
  /* [1][0][][] */ -81,-100,-59,6,88,-25,-127,58,-22,-34,-13,-81,-19,77,8,-13,120,-123,-8,-23,-60,-1,-1,-20,27,-9,-33,-49,21,-18,-115,-27,25,-63,-82,-100,41,13,-97,-5,3,42,15,83,-12,4,2,45, 
  /* [2][0][][] */ 5,-73,12,56,113,20,97,-7,-36,-30,-8,-50,0,-28,22,33,-35,-94,43,-57,4,-67,-59,12,-72,62,71,-100,-39,-2,-60,-46,17,3,-71,-50,-4,127,76,-37,-14,10,-26,-74,43,34,49,-23, 
  /* [3][0][][] */ 11,1,24,-15,34,32,24,-95,25,18,-12,9,2,-117,-12,3,-25,7,-19,1,-7,52,-127,4,20,-102,37,31,47,-12,-29,55,1,12,-6,-36,-104,-49,12,-13,-6,-1,40,7,-15,5,1,-53, 
  /* [4][0][][] */ 31,-56,11,70,50,12,-31,-5,-38,-14,25,-31,73,38,-18,31,-42,-64,64,37,34,-49,127,25,-31,8,-51,-14,-11,16,-77,-40,81,-26,-46,-64,-46,-48,-24,0,-64,96,-2,-5,56,83,43,22, 
  /* [5][0][][] */ -63,-22,-37,53,-7,9,-4,-50,-63,-34,-6,-21,16,41,-77,15,127,-15,57,-81,30,-96,-8,0,88,-115,-105,-11,57,-49,35,-79,14,-59,-35,28,-78,-18,18,-33,-45,30,98,45,43,22,25,-38, 
  /* [6][0][][] */ -31,7,-36,35,-23,75,-72,8,-19,-1,-127,8,47,36,119,20,21,8,43,-14,39,-17,-49,-15,12,2,-72,17,2,-52,6,-24,35,-44,9,7,-2,-5,-54,-23,-33,44,-22,29,29,29,33,0, 
  /* [7][0][][] */ 32,-4,39,-17,3,6,13,-11,14,5,-9,-2,-10,-7,-3,-13,11,-3,-24,-20,-20,14,127,14,6,-13,-1,9,7,-10,-21,13,-1,21,1,-18,-9,14,8,28,5,-3,9,-3,-16,-2,-24,17, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0055236946791410446, 0.0051482398994266987, 0.0065129273571074009, 0.0064199320040643215, 0.0056482544168829918, 0.0043616336770355701, 0.0041948314756155014, 0.011032341979444027, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 4250, 78, 389, -45, 8193, 3264, -97, 4086, 4114, -281, -562, 1368, 542, -105, -778, 418, 12052, 429, 139, 34759, -452, 15167, 1146, 66, -44, -8506, 9040, -191, 351, -363, 1476, 8011, 549, -618, 844, 539, 8320, -1624, 3150, 740, 369, -750, 20162, -7395, 990, -333, 309, 666, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.0217160353204235e-05, 0.00018945748161058873, 0.0010103583335876465, 0.00082622602349147201, 0.00012385235459078103, 0.00015559779421892017, 8.3291321061551571e-05, 0.00032253997051157057, 0.00015104353951755911, 0.00043878631549887359, 5.6617707741679624e-05, 0.00066760409390553832, 0.00086535402806475759, 0.0001455846504541114, 0.0001288093626499176, 0.0086598247289657593, 0.00015287255519069731, 0.00020737957675009966, 0.00036406310391612351, 9.0154739154968411e-05, 0.00063293770654127002, 9.6005431259982288e-05, 0.0002841348759829998, 0.00010969749564537778, 0.00015513824473600835, 0.00073511915979906917, 0.00012197777687106282, 0.00032377368188463151, 0.00094492314383387566, 0.00047705409815534949, 0.00014118188119027764, 9.7024647402577102e-05, 0.0010174864437431097, 0.00043653429020196199, 0.0001919930218718946, 0.00024107837816700339, 0.00014327745884656906, 6.8734436354134232e-05, 8.9299443061463535e-05, 0.00021972761896904558, 0.00035107470466755331, 0.00034554788726381958, 6.170022243168205e-05, 0.00015693636669311672, 0.00084955972852185369, 0.00058974756393581629, 0.0051565179601311684, 0.00047833268763497472, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 106,-38,-72,-98,22,-100,66,-59,68,20,96,45,-98,62,55,-119,78,-97,0,-47,-127,-54,34,111,-2,69,-11,61,-127,-17,89,-81,-49,-59,46,81,-127,50,110,77,-46,-127,-73,44,-69,-29,4,-82, 87,-58,77,127,85,34,121,-125,-79,98,59,65,-3,59,59,115,80,-96,-104,-57,93,-96,49,2,116,127,-39,79,9,50,83,-49,44,113,127,127,-96,45,86,-33,85,29,-48,106,127,112,-6,-12, 25,-26,-3,-42,35,52,21,-88,-16,44,-84,29,88,-8,-62,-3,32,-35,91,-19,39,5,-84,-90,26,10,-11,24,36,72,34,8,-7,-47,31,34,-19,11,14,-66,-56,113,6,83,-61,-70,-2,72, 
  /* [0][1][][] */ 119,70,-127,23,-80,-127,72,-71,100,-71,127,-96,90,93,127,121,-44,113,-8,-91,120,-79,46,127,-12,-5,-32,19,-58,87,70,-127,-127,-68,-23,34,-17,104,127,127,-53,-79,-127,50,-7,-22,-127,-127, 127,127,115,-15,-127,11,127,-127,-127,-127,86,-127,37,127,101,-127,-37,127,127,-127,-66,-127,71,-37,63,10,-127,71,12,127,127,-102,115,127,-30,11,-27,127,109,-50,127,-4,-51,127,-14,127,120,40, 26,50,-3,15,-32,75,25,-83,-7,-93,-86,-74,-127,1,-71,-1,37,33,-102,-56,-50,-10,-127,-105,-39,5,-70,21,42,90,29,7,6,-63,-10,2,-3,36,19,-86,-62,99,-11,104,5,-79,3,91, 
  /* [0][2][][] */ 40,-40,-28,-8,46,-24,8,-22,73,25,29,41,5,54,-10,-17,-127,-29,-9,-18,19,-40,9,46,85,-18,-18,-95,24,52,-7,-80,-25,-39,-70,-4,71,24,32,72,-101,-54,-124,35,-2,0,88,-65, 19,-63,6,-6,41,3,31,-52,-83,68,-1,56,-22,66,-4,9,-95,-24,-17,-53,-29,-71,28,-8,127,-14,-50,-127,21,73,2,-57,29,81,-59,14,76,47,27,-29,-61,3,-55,92,-8,-4,-100,56, -3,-28,20,3,12,20,8,-18,-7,51,-34,25,14,-12,-19,-2,25,-6,15,-37,12,3,-41,-51,-10,-8,-18,-41,18,62,-6,11,-2,-39,-39,0,64,21,-2,-47,-101,58,-24,49,2,9,2,10, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0025592292658984661, 0.0080519430339336395, 0.042940229177474976, 0.035114604979753494, 0.0052637248300015926, 0.0066129062324762344, 0.0035398812033236027, 0.013707947917282581, 0.0064193503931164742, 0.018648417666554451, 0.0024062525480985641, 0.028373172506690025, 0.036777544766664505, 0.0061873476952314377, 0.0054743979126214981, 0.36804252862930298, 0.0064970832318067551, 0.0088136317208409309, 0.015472681261599064, 0.0038315763231366873, 0.026899851858615875, 0.0040802308358252048, 0.012075732462108135, 0.0046621435321867466, 0.0065933750011026859, 0.03124256432056427, 0.0051840553060173988, 0.013760381378233433, 0.040159232914447784, 0.020274799317121506, 0.0060002300888299942, 0.0041235475800931454, 0.043243173509836197, 0.018552707508206367, 0.0081597035750746727, 0.010245830751955509, 0.0060892920009791851, 0.0029212133958935738, 0.0037952261045575142, 0.0093384236097335815, 0.014920675195753574, 0.014685784466564655, 0.0026222595479339361, 0.0066697956062853336, 0.036106288433074951, 0.025064270943403244, 0.21915200352668762, 0.02032913826406002, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -964, -8128, 9530, 3431, 10225, 3028, 3178, 362, -1517, -7247, 660, 4600, 19469, -11600, 134, 12052, -7105, -793, 1690, 6780, 8430, 2993, 1019, 487, 11610, 25140, 9782, -11077, 1903, -883, 3, -3264, 18466, 7897, 10970, -1504, -10583, 340, -3800, 285, -12217, -9306, -1468, 2456, 7374, -11285, 11422, -1525, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00030983504257164896, 0.00029122765408828855, 9.1479399998206645e-05, 0.0002978737757075578, 0.00029159066616557539, 0.00070176972076296806, 0.00099755357950925827, 0.00059930910356342793, 0.00065916689345613122, 0.00037776038516312838, 0.0015533301047980785, 0.0002661698090378195, 7.3584516940172762e-05, 0.00035700685111805797, 0.0006297474610619247, 3.1173211027635261e-05, 0.00026890911976806819, 0.00042598182335495949, 0.00041849256376735866, 0.00022339711722452193, 0.0001507169654360041, 0.0014332880964502692, 0.00041883162339217961, 0.00083075475413352251, 0.00021703887614421546, 7.9457327956333756e-05, 0.00041818473255261779, 0.00030924665043130517, 0.00095784338191151619, 0.00045175637933425605, 0.0010648701572790742, 0.0014211282832548022, 0.00012097674334654585, 0.00028572132578119636, 0.00031205004779621959, 0.00080586189869791269, 0.00043896239367313683, 0.00039012019988149405, 0.0010123314568772912, 0.00034599838545545936, 0.00032849045237526298, 0.0002698100870475173, 0.0003392703365534544, 0.00039374417974613607, 0.0001398247986799106, 0.00027677390608005226, 3.275048584328033e-05, 0.00061573361745104194, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 16,48,8,-19,96,-25,127,-3, 
  /* [1][0][][] */ 127,81,73,18,-7,-41,3,118, 
  /* [2][0][][] */ -61,16,-3,127,13,-20,-30,53, 
  /* [3][0][][] */ 51,-37,-127,-7,-3,-43,21,126, 
  /* [4][0][][] */ -117,85,-127,-17,18,21,-39,-41, 
  /* [5][0][][] */ 127,-18,-4,-48,-2,-30,7,-126, 
  /* [6][0][][] */ 5,-9,-7,-3,-127,-26,56,4, 
  /* [7][0][][] */ -6,-62,-3,0,-24,1,-127,-1, 
  /* [8][0][][] */ -13,25,34,-6,127,15,-63,-18, 
  /* [9][0][][] */ 127,-39,26,-3,1,-32,48,110, 
  /* [10][0][][] */ 127,7,-6,-39,-3,11,-1,-124, 
  /* [11][0][][] */ -53,0,-3,127,-3,-43,-37,32, 
  /* [12][0][][] */ -127,4,-78,-25,13,104,-61,-122, 
  /* [13][0][][] */ 123,9,127,17,-10,20,21,44, 
  /* [14][0][][] */ -127,-5,13,15,0,-14,7,123, 
  /* [15][0][][] */ -127,9,4,120,-3,-4,-24,123, 
  /* [16][0][][] */ 60,-73,127,64,-14,-106,31,72, 
  /* [17][0][][] */ 19,-52,-78,127,1,20,-9,115, 
  /* [18][0][][] */ 20,-31,-115,40,-19,-1,34,127, 
  /* [19][0][][] */ 24,18,-13,127,-6,2,-69,-48, 
  /* [20][0][][] */ 17,53,109,-117,10,-68,12,-127, 
  /* [21][0][][] */ 4,-1,-8,1,-127,-13,53,1, 
  /* [22][0][][] */ 1,56,-3,-11,2,127,-12,0, 
  /* [23][0][][] */ 119,24,-8,94,-4,1,-46,-127, 
  /* [24][0][][] */ -127,20,-92,-37,18,-43,-47,-66, 
  /* [25][0][][] */ -44,-8,-66,-45,2,-127,7,-50, 
  /* [26][0][][] */ -102,-25,-127,11,11,3,-18,-37, 
  /* [27][0][][] */ 103,7,127,20,-5,44,19,42, 
  /* [28][0][][] */ 6,-60,-20,39,29,-127,5,14, 
  /* [29][0][][] */ -5,-8,25,-127,-17,-5,20,-2, 
  /* [30][0][][] */ -42,5,127,-6,0,5,-6,-118, 
  /* [31][0][][] */ 1,13,3,1,127,24,-55,-2, 
  /* [32][0][][] */ -127,-20,-108,-9,-2,-33,-27,-63, 
  /* [33][0][][] */ 11,-51,3,-30,37,-127,15,-21, 
  /* [34][0][][] */ -56,-117,-127,60,0,-55,-14,-23, 
  /* [35][0][][] */ 54,8,-114,-3,4,-2,10,127, 
  /* [36][0][][] */ 66,37,84,33,6,127,12,29, 
  /* [37][0][][] */ -10,17,-5,127,8,-20,-14,9, 
  /* [38][0][][] */ 2,24,9,-1,127,26,-36,0, 
  /* [39][0][][] */ -9,8,-12,23,-33,127,-109,-7, 
  /* [40][0][][] */ 127,-19,122,20,-23,30,16,60, 
  /* [41][0][][] */ 115,2,127,25,-7,1,34,47, 
  /* [42][0][][] */ 58,-60,-15,-39,29,127,21,-29, 
  /* [43][0][][] */ -8,-62,-6,3,-45,-19,-127,2, 
  /* [44][0][][] */ -24,-127,38,94,17,40,12,-118, 
  /* [45][0][][] */ 119,11,127,-4,-7,33,26,46, 
  /* [46][0][][] */ -85,14,5,127,3,6,-38,71, 
  /* [47][0][][] */ -4,49,-10,-3,-2,127,-18,2, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0031876510474830866, 0.0029962141998112202, 0.00094116013497114182, 0.0030645907390862703, 0.0029999488033354282, 0.0072199609130620956, 0.010263050906360149, 0.0061658238992094994, 0.0067816539667546749, 0.0038864819798618555, 0.015981001779437065, 0.0027384136337786913, 0.00075705366907641292, 0.003672964870929718, 0.0064789801836013794, 0.00032071684836409986, 0.0027665961533784866, 0.0043825944885611534, 0.004305543377995491, 0.0022983585949987173, 0.0015506092458963394, 0.014745983295142651, 0.0043090316466987133, 0.0085469875484704971, 0.0022329436615109444, 0.00081747444346547127, 0.0043023764155805111, 0.003181597450748086, 0.0098545029759407043, 0.004647769033908844, 0.010955618694424629, 0.014620880596339703, 0.001244635321199894, 0.0029395637102425098, 0.0032104393467307091, 0.0082908840849995613, 0.00451614148914814, 0.0040136422030627728, 0.010415088385343552, 0.0035597074311226606, 0.0033795819617807865, 0.0027758653741329908, 0.0034904878120869398, 0.0040509267710149288, 0.0014385483227670193, 0.0028475106228142977, 0.0003369441838003695, 0.0063348026014864445, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1483, 529, -572, -9048, -65, -879, -227, 4175, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021904931054450572, 0.00026210185023956001, 0.00034590924042277038, 0.00018516501586418599, 0.00024487290647812188, 0.0001272266817977652, 0.00033145953784696758, 0.00019153453467879444, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -12,-13,-21,13,-9,-127,10,38, 
  /* [1][0][][] */ -63,22,-127,121,9,63,-18,36, 
  /* [2][0][][] */ 6,-10,25,-2,-10,-127,11,25, 
  /* [3][0][][] */ 24,53,53,127,16,-40,-44,-14, 
  /* [4][0][][] */ 16,60,21,-16,-127,-12,22,-3, 
  /* [5][0][][] */ 64,-27,127,-103,19,-58,-5,-46, 
  /* [6][0][][] */ 26,127,44,-39,38,-10,-66,-22, 
  /* [7][0][][] */ -22,-25,-42,-16,-12,-127,21,43, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.009309595450758934, 0.011139328591525555, 0.014701141975820065, 0.0078695127740502357, 0.010407098568975925, 0.0054071340709924698, 0.014087030664086342, 0.008140217512845993, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 6505, 196, 263, 1511, 13913, 598, 626, 1977, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00010190482862526551, 0.00047101388918235898, 0.0001734306279104203, 0.00054246291983872652, 0.00018739102233666927, 0.00027469953056424856, 0.00057892210315912962, 9.466382471146062e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -19,-6,5,-1,-5,27,1,-4, 15,-1,5,-6,6,127,12,127, 6,0,6,-8,-4,17,2,4, 
  /* [0][1][][] */ 7,-127,-6,4,-18,-6,-105,-6, -127,98,-78,127,-127,-8,127,-38, 13,-2,-3,-64,-8,1,47,-27, 
  /* [0][2][][] */ 19,-4,2,-3,-5,-23,9,-8, 59,-2,127,-21,8,-114,5,7, 9,-1,-6,-8,-5,-20,-4,-4, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0043309549801051617, 0.020018089562654495, 0.007370801642537117, 0.02305467426776886, 0.0079641183838248253, 0.011674730107188225, 0.024604188278317451, 0.0040232124738395214, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 49350, -1095, 39295, 20173, 14970, 568798, 14897, 37872, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 6.4390311308670789e-05, 4.2793883039848879e-05, 9.2156311438884586e-05, 2.6228250135318376e-05, 0.00012100207095500082, 5.9551334743446205e-06, 8.0478666859562509e-06, 8.0797733971849084e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-3,12, 8,-24,30, 12,-24,21, 
  /* [0][1][][] */ 39,29,26, 65,18,58, 24,-33,38, 
  /* [0][2][][] */ -21,-92,-13, -30,-127,-1, -8,-56,17, 
  /* [1][0][][] */ 32,76,25, 7,9,-2, -30,-69,-26, 
  /* [1][1][][] */ 54,122,40, 3,0,-3, -54,-127,-39, 
  /* [1][2][][] */ 30,45,12, 5,-1,0, -32,-53,-3, 
  /* [2][0][][] */ 44,92,11, 54,127,13, 17,43,-1, 
  /* [2][1][][] */ -46,-83,-28, -80,-93,-38, -30,-6,-20, 
  /* [2][2][][] */ 1,11,7, 5,16,0, 1,11,-6, 
  /* [3][0][][] */ 46,-29,-14, 79,-34,-37, 31,-16,-11, 
  /* [3][1][][] */ 81,-53,-34, 127,-52,-71, 60,-27,-27, 
  /* [3][2][][] */ 21,-19,-2, 43,-26,-14, 17,-10,0, 
  /* [4][0][][] */ -12,-23,-5, 27,45,9, -16,-29,-4, 
  /* [4][1][][] */ -28,-60,-10, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 22,25,-3, -11,-13,-2, 
  /* [5][0][][] */ -35,-65,-39, -55,-91,-58, -43,-33,-30, 
  /* [5][1][][] */ -59,-106,-50, -83,-127,-66, -47,-35,-31, 
  /* [5][2][][] */ 4,10,-8, 2,5,-4, 3,16,6, 
  /* [6][0][][] */ -98,-2,39, 5,24,-12, 70,21,-18, 
  /* [6][1][][] */ -127,-32,47, 17,24,-25, 113,20,-29, 
  /* [6][2][][] */ -48,-10,21, 19,-4,1, 38,-9,34, 
  /* [7][0][][] */ -5,16,-2, -15,23,-7, -6,21,-8, 
  /* [7][1][][] */ 18,84,-6, 23,127,-22, -2,60,-27, 
  /* [7][2][][] */ -27,-50,-20, -42,-52,-32, -19,4,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.016419528052210808, 0.010912439785897732, 0.023499857634305954, 0.0066882031969726086, 0.030855527147650719, 0.001518558943644166, 0.0020522058475762606, 0.020603420212864876, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.097752638161182404, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.097198545932769775, } };
const TfArray<1, int> quant47_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.097481116652488708, } };
const TfArray<1, int> quant51_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.079420022666454315, } };
const TfArray<1, int> quant54_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.1008569523692131, } };
const TfArray<1, int> quant55_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.074876494705677032, } };
const TfArray<1, int> quant59_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.032563712447881699, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.072682172060012817, } };
const TfArray<1, int> quant63_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.021380297839641571, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.039545461535453796, } };
const TfArray<1, int> quant66_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.088427223265171051, } };
const TfArray<1, int> quant67_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.019974829629063606, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.048465054482221603, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.046683516353368759, } };
const TfArray<1, int> quant70_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_33_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
